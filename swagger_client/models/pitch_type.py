# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PitchType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CHANGE_UP = "CHANGE_UP"
    CURVE_BALL = "CURVE_BALL"
    FASTBALL = "FASTBALL"
    FAST_BALL_2_SEAM = "FAST_BALL_2_SEAM"
    FAST_BALL_4_SEAM = "FAST_BALL_4_SEAM"
    CUTTER = "CUTTER"
    SPLITTER = "SPLITTER"
    FORK_BALL = "FORK_BALL"
    GYRO_BALL = "GYRO_BALL"
    INTENTIONAL_BALL = "INTENTIONAL_BALL"
    KNUCKLE_CURVE = "KNUCKLE_CURVE"
    KNUCKLE_BALL = "KNUCKLE_BALL"
    NO_PITCH = "NO_PITCH"
    SCREW_BALL = "SCREW_BALL"
    SINKER = "SINKER"
    SLIDER = "SLIDER"
    SN = "SN"
    PITCHOUT = "PITCHOUT"
    AUTOMATIC_BALL = "AUTOMATIC_BALL"
    AUTOMATIC_STRIKE = "AUTOMATIC_STRIKE"
    EEPHUS = "EEPHUS"
    SLUTTER = "SLUTTER"
    SLURVE = "SLURVE"
    SLOW_CURVE = "SLOW_CURVE"
    UNNKNOWN = "UNNKNOWN"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """PitchType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitchType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitchType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
