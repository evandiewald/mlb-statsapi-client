# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ball_color': 'str',
        'trail_color': 'str',
        'start_speed': 'float',
        'end_speed': 'float',
        'nasty_factor': 'float',
        'strike_zone_top': 'float',
        'strike_zone_bottom': 'float',
        'strike_zone_width': 'float',
        'strike_zone_depth': 'float',
        'geta_x': 'float',
        'geta_y': 'float',
        'geta_z': 'float',
        'pfx_x': 'float',
        'pfx_z': 'float',
        'getp_x': 'float',
        'getp_z': 'float',
        'getv_x0': 'float',
        'getv_y0': 'float',
        'getv_z0': 'float',
        'x': 'float',
        'y': 'float',
        'z0': 'float',
        'y0': 'float',
        'x0': 'float',
        'break_horizontal': 'float',
        'break_vertical': 'float',
        'break_vertical_induced': 'float',
        'break_angle': 'float',
        'break_length': 'float',
        'break_x': 'float',
        'break_y': 'float',
        'break_z': 'float',
        'zone': 'int',
        'spin_rate': 'int',
        'spin_direction': 'int',
        'type_confidence': 'float',
        'plate_time': 'float',
        'extension': 'float'
    }

    attribute_map = {
        'ball_color': 'ballColor',
        'trail_color': 'trailColor',
        'start_speed': 'startSpeed',
        'end_speed': 'endSpeed',
        'nasty_factor': 'nastyFactor',
        'strike_zone_top': 'strikeZoneTop',
        'strike_zone_bottom': 'strikeZoneBottom',
        'strike_zone_width': 'strikeZoneWidth',
        'strike_zone_depth': 'strikeZoneDepth',
        'geta_x': 'getaX',
        'geta_y': 'getaY',
        'geta_z': 'getaZ',
        'pfx_x': 'pfxX',
        'pfx_z': 'pfxZ',
        'getp_x': 'getpX',
        'getp_z': 'getpZ',
        'getv_x0': 'getvX0',
        'getv_y0': 'getvY0',
        'getv_z0': 'getvZ0',
        'x': 'x',
        'y': 'y',
        'z0': 'z0',
        'y0': 'y0',
        'x0': 'x0',
        'break_horizontal': 'breakHorizontal',
        'break_vertical': 'breakVertical',
        'break_vertical_induced': 'breakVerticalInduced',
        'break_angle': 'breakAngle',
        'break_length': 'breakLength',
        'break_x': 'breakX',
        'break_y': 'breakY',
        'break_z': 'breakZ',
        'zone': 'zone',
        'spin_rate': 'spinRate',
        'spin_direction': 'spinDirection',
        'type_confidence': 'typeConfidence',
        'plate_time': 'plateTime',
        'extension': 'extension'
    }

    def __init__(self, ball_color=None, trail_color=None, start_speed=None, end_speed=None, nasty_factor=None, strike_zone_top=None, strike_zone_bottom=None, strike_zone_width=None, strike_zone_depth=None, geta_x=None, geta_y=None, geta_z=None, pfx_x=None, pfx_z=None, getp_x=None, getp_z=None, getv_x0=None, getv_y0=None, getv_z0=None, x=None, y=None, z0=None, y0=None, x0=None, break_horizontal=None, break_vertical=None, break_vertical_induced=None, break_angle=None, break_length=None, break_x=None, break_y=None, break_z=None, zone=None, spin_rate=None, spin_direction=None, type_confidence=None, plate_time=None, extension=None):  # noqa: E501
        """BaseballPitch - a model defined in Swagger"""  # noqa: E501
        self._ball_color = None
        self._trail_color = None
        self._start_speed = None
        self._end_speed = None
        self._nasty_factor = None
        self._strike_zone_top = None
        self._strike_zone_bottom = None
        self._strike_zone_width = None
        self._strike_zone_depth = None
        self._geta_x = None
        self._geta_y = None
        self._geta_z = None
        self._pfx_x = None
        self._pfx_z = None
        self._getp_x = None
        self._getp_z = None
        self._getv_x0 = None
        self._getv_y0 = None
        self._getv_z0 = None
        self._x = None
        self._y = None
        self._z0 = None
        self._y0 = None
        self._x0 = None
        self._break_horizontal = None
        self._break_vertical = None
        self._break_vertical_induced = None
        self._break_angle = None
        self._break_length = None
        self._break_x = None
        self._break_y = None
        self._break_z = None
        self._zone = None
        self._spin_rate = None
        self._spin_direction = None
        self._type_confidence = None
        self._plate_time = None
        self._extension = None
        self.discriminator = None
        if ball_color is not None:
            self.ball_color = ball_color
        if trail_color is not None:
            self.trail_color = trail_color
        if start_speed is not None:
            self.start_speed = start_speed
        if end_speed is not None:
            self.end_speed = end_speed
        if nasty_factor is not None:
            self.nasty_factor = nasty_factor
        if strike_zone_top is not None:
            self.strike_zone_top = strike_zone_top
        if strike_zone_bottom is not None:
            self.strike_zone_bottom = strike_zone_bottom
        if strike_zone_width is not None:
            self.strike_zone_width = strike_zone_width
        if strike_zone_depth is not None:
            self.strike_zone_depth = strike_zone_depth
        if geta_x is not None:
            self.geta_x = geta_x
        if geta_y is not None:
            self.geta_y = geta_y
        if geta_z is not None:
            self.geta_z = geta_z
        if pfx_x is not None:
            self.pfx_x = pfx_x
        if pfx_z is not None:
            self.pfx_z = pfx_z
        if getp_x is not None:
            self.getp_x = getp_x
        if getp_z is not None:
            self.getp_z = getp_z
        if getv_x0 is not None:
            self.getv_x0 = getv_x0
        if getv_y0 is not None:
            self.getv_y0 = getv_y0
        if getv_z0 is not None:
            self.getv_z0 = getv_z0
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z0 is not None:
            self.z0 = z0
        if y0 is not None:
            self.y0 = y0
        if x0 is not None:
            self.x0 = x0
        if break_horizontal is not None:
            self.break_horizontal = break_horizontal
        if break_vertical is not None:
            self.break_vertical = break_vertical
        if break_vertical_induced is not None:
            self.break_vertical_induced = break_vertical_induced
        if break_angle is not None:
            self.break_angle = break_angle
        if break_length is not None:
            self.break_length = break_length
        if break_x is not None:
            self.break_x = break_x
        if break_y is not None:
            self.break_y = break_y
        if break_z is not None:
            self.break_z = break_z
        if zone is not None:
            self.zone = zone
        if spin_rate is not None:
            self.spin_rate = spin_rate
        if spin_direction is not None:
            self.spin_direction = spin_direction
        if type_confidence is not None:
            self.type_confidence = type_confidence
        if plate_time is not None:
            self.plate_time = plate_time
        if extension is not None:
            self.extension = extension

    @property
    def ball_color(self):
        """Gets the ball_color of this BaseballPitch.  # noqa: E501


        :return: The ball_color of this BaseballPitch.  # noqa: E501
        :rtype: str
        """
        return self._ball_color

    @ball_color.setter
    def ball_color(self, ball_color):
        """Sets the ball_color of this BaseballPitch.


        :param ball_color: The ball_color of this BaseballPitch.  # noqa: E501
        :type: str
        """

        self._ball_color = ball_color

    @property
    def trail_color(self):
        """Gets the trail_color of this BaseballPitch.  # noqa: E501


        :return: The trail_color of this BaseballPitch.  # noqa: E501
        :rtype: str
        """
        return self._trail_color

    @trail_color.setter
    def trail_color(self, trail_color):
        """Sets the trail_color of this BaseballPitch.


        :param trail_color: The trail_color of this BaseballPitch.  # noqa: E501
        :type: str
        """

        self._trail_color = trail_color

    @property
    def start_speed(self):
        """Gets the start_speed of this BaseballPitch.  # noqa: E501


        :return: The start_speed of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._start_speed

    @start_speed.setter
    def start_speed(self, start_speed):
        """Sets the start_speed of this BaseballPitch.


        :param start_speed: The start_speed of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._start_speed = start_speed

    @property
    def end_speed(self):
        """Gets the end_speed of this BaseballPitch.  # noqa: E501


        :return: The end_speed of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._end_speed

    @end_speed.setter
    def end_speed(self, end_speed):
        """Sets the end_speed of this BaseballPitch.


        :param end_speed: The end_speed of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._end_speed = end_speed

    @property
    def nasty_factor(self):
        """Gets the nasty_factor of this BaseballPitch.  # noqa: E501


        :return: The nasty_factor of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._nasty_factor

    @nasty_factor.setter
    def nasty_factor(self, nasty_factor):
        """Sets the nasty_factor of this BaseballPitch.


        :param nasty_factor: The nasty_factor of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._nasty_factor = nasty_factor

    @property
    def strike_zone_top(self):
        """Gets the strike_zone_top of this BaseballPitch.  # noqa: E501


        :return: The strike_zone_top of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_top

    @strike_zone_top.setter
    def strike_zone_top(self, strike_zone_top):
        """Sets the strike_zone_top of this BaseballPitch.


        :param strike_zone_top: The strike_zone_top of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._strike_zone_top = strike_zone_top

    @property
    def strike_zone_bottom(self):
        """Gets the strike_zone_bottom of this BaseballPitch.  # noqa: E501


        :return: The strike_zone_bottom of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_bottom

    @strike_zone_bottom.setter
    def strike_zone_bottom(self, strike_zone_bottom):
        """Sets the strike_zone_bottom of this BaseballPitch.


        :param strike_zone_bottom: The strike_zone_bottom of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._strike_zone_bottom = strike_zone_bottom

    @property
    def strike_zone_width(self):
        """Gets the strike_zone_width of this BaseballPitch.  # noqa: E501


        :return: The strike_zone_width of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_width

    @strike_zone_width.setter
    def strike_zone_width(self, strike_zone_width):
        """Sets the strike_zone_width of this BaseballPitch.


        :param strike_zone_width: The strike_zone_width of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._strike_zone_width = strike_zone_width

    @property
    def strike_zone_depth(self):
        """Gets the strike_zone_depth of this BaseballPitch.  # noqa: E501


        :return: The strike_zone_depth of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_depth

    @strike_zone_depth.setter
    def strike_zone_depth(self, strike_zone_depth):
        """Sets the strike_zone_depth of this BaseballPitch.


        :param strike_zone_depth: The strike_zone_depth of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._strike_zone_depth = strike_zone_depth

    @property
    def geta_x(self):
        """Gets the geta_x of this BaseballPitch.  # noqa: E501


        :return: The geta_x of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._geta_x

    @geta_x.setter
    def geta_x(self, geta_x):
        """Sets the geta_x of this BaseballPitch.


        :param geta_x: The geta_x of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._geta_x = geta_x

    @property
    def geta_y(self):
        """Gets the geta_y of this BaseballPitch.  # noqa: E501


        :return: The geta_y of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._geta_y

    @geta_y.setter
    def geta_y(self, geta_y):
        """Sets the geta_y of this BaseballPitch.


        :param geta_y: The geta_y of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._geta_y = geta_y

    @property
    def geta_z(self):
        """Gets the geta_z of this BaseballPitch.  # noqa: E501


        :return: The geta_z of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._geta_z

    @geta_z.setter
    def geta_z(self, geta_z):
        """Sets the geta_z of this BaseballPitch.


        :param geta_z: The geta_z of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._geta_z = geta_z

    @property
    def pfx_x(self):
        """Gets the pfx_x of this BaseballPitch.  # noqa: E501


        :return: The pfx_x of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._pfx_x

    @pfx_x.setter
    def pfx_x(self, pfx_x):
        """Sets the pfx_x of this BaseballPitch.


        :param pfx_x: The pfx_x of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._pfx_x = pfx_x

    @property
    def pfx_z(self):
        """Gets the pfx_z of this BaseballPitch.  # noqa: E501


        :return: The pfx_z of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._pfx_z

    @pfx_z.setter
    def pfx_z(self, pfx_z):
        """Sets the pfx_z of this BaseballPitch.


        :param pfx_z: The pfx_z of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._pfx_z = pfx_z

    @property
    def getp_x(self):
        """Gets the getp_x of this BaseballPitch.  # noqa: E501


        :return: The getp_x of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._getp_x

    @getp_x.setter
    def getp_x(self, getp_x):
        """Sets the getp_x of this BaseballPitch.


        :param getp_x: The getp_x of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._getp_x = getp_x

    @property
    def getp_z(self):
        """Gets the getp_z of this BaseballPitch.  # noqa: E501


        :return: The getp_z of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._getp_z

    @getp_z.setter
    def getp_z(self, getp_z):
        """Sets the getp_z of this BaseballPitch.


        :param getp_z: The getp_z of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._getp_z = getp_z

    @property
    def getv_x0(self):
        """Gets the getv_x0 of this BaseballPitch.  # noqa: E501


        :return: The getv_x0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._getv_x0

    @getv_x0.setter
    def getv_x0(self, getv_x0):
        """Sets the getv_x0 of this BaseballPitch.


        :param getv_x0: The getv_x0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._getv_x0 = getv_x0

    @property
    def getv_y0(self):
        """Gets the getv_y0 of this BaseballPitch.  # noqa: E501


        :return: The getv_y0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._getv_y0

    @getv_y0.setter
    def getv_y0(self, getv_y0):
        """Sets the getv_y0 of this BaseballPitch.


        :param getv_y0: The getv_y0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._getv_y0 = getv_y0

    @property
    def getv_z0(self):
        """Gets the getv_z0 of this BaseballPitch.  # noqa: E501


        :return: The getv_z0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._getv_z0

    @getv_z0.setter
    def getv_z0(self, getv_z0):
        """Sets the getv_z0 of this BaseballPitch.


        :param getv_z0: The getv_z0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._getv_z0 = getv_z0

    @property
    def x(self):
        """Gets the x of this BaseballPitch.  # noqa: E501


        :return: The x of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this BaseballPitch.


        :param x: The x of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this BaseballPitch.  # noqa: E501


        :return: The y of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this BaseballPitch.


        :param y: The y of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def z0(self):
        """Gets the z0 of this BaseballPitch.  # noqa: E501


        :return: The z0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._z0

    @z0.setter
    def z0(self, z0):
        """Sets the z0 of this BaseballPitch.


        :param z0: The z0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._z0 = z0

    @property
    def y0(self):
        """Gets the y0 of this BaseballPitch.  # noqa: E501


        :return: The y0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this BaseballPitch.


        :param y0: The y0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._y0 = y0

    @property
    def x0(self):
        """Gets the x0 of this BaseballPitch.  # noqa: E501


        :return: The x0 of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this BaseballPitch.


        :param x0: The x0 of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._x0 = x0

    @property
    def break_horizontal(self):
        """Gets the break_horizontal of this BaseballPitch.  # noqa: E501


        :return: The break_horizontal of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_horizontal

    @break_horizontal.setter
    def break_horizontal(self, break_horizontal):
        """Sets the break_horizontal of this BaseballPitch.


        :param break_horizontal: The break_horizontal of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_horizontal = break_horizontal

    @property
    def break_vertical(self):
        """Gets the break_vertical of this BaseballPitch.  # noqa: E501


        :return: The break_vertical of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_vertical

    @break_vertical.setter
    def break_vertical(self, break_vertical):
        """Sets the break_vertical of this BaseballPitch.


        :param break_vertical: The break_vertical of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_vertical = break_vertical

    @property
    def break_vertical_induced(self):
        """Gets the break_vertical_induced of this BaseballPitch.  # noqa: E501


        :return: The break_vertical_induced of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_vertical_induced

    @break_vertical_induced.setter
    def break_vertical_induced(self, break_vertical_induced):
        """Sets the break_vertical_induced of this BaseballPitch.


        :param break_vertical_induced: The break_vertical_induced of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_vertical_induced = break_vertical_induced

    @property
    def break_angle(self):
        """Gets the break_angle of this BaseballPitch.  # noqa: E501


        :return: The break_angle of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_angle

    @break_angle.setter
    def break_angle(self, break_angle):
        """Sets the break_angle of this BaseballPitch.


        :param break_angle: The break_angle of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_angle = break_angle

    @property
    def break_length(self):
        """Gets the break_length of this BaseballPitch.  # noqa: E501


        :return: The break_length of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_length

    @break_length.setter
    def break_length(self, break_length):
        """Sets the break_length of this BaseballPitch.


        :param break_length: The break_length of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_length = break_length

    @property
    def break_x(self):
        """Gets the break_x of this BaseballPitch.  # noqa: E501


        :return: The break_x of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_x

    @break_x.setter
    def break_x(self, break_x):
        """Sets the break_x of this BaseballPitch.


        :param break_x: The break_x of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_x = break_x

    @property
    def break_y(self):
        """Gets the break_y of this BaseballPitch.  # noqa: E501


        :return: The break_y of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_y

    @break_y.setter
    def break_y(self, break_y):
        """Sets the break_y of this BaseballPitch.


        :param break_y: The break_y of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_y = break_y

    @property
    def break_z(self):
        """Gets the break_z of this BaseballPitch.  # noqa: E501


        :return: The break_z of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._break_z

    @break_z.setter
    def break_z(self, break_z):
        """Sets the break_z of this BaseballPitch.


        :param break_z: The break_z of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._break_z = break_z

    @property
    def zone(self):
        """Gets the zone of this BaseballPitch.  # noqa: E501


        :return: The zone of this BaseballPitch.  # noqa: E501
        :rtype: int
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this BaseballPitch.


        :param zone: The zone of this BaseballPitch.  # noqa: E501
        :type: int
        """

        self._zone = zone

    @property
    def spin_rate(self):
        """Gets the spin_rate of this BaseballPitch.  # noqa: E501


        :return: The spin_rate of this BaseballPitch.  # noqa: E501
        :rtype: int
        """
        return self._spin_rate

    @spin_rate.setter
    def spin_rate(self, spin_rate):
        """Sets the spin_rate of this BaseballPitch.


        :param spin_rate: The spin_rate of this BaseballPitch.  # noqa: E501
        :type: int
        """

        self._spin_rate = spin_rate

    @property
    def spin_direction(self):
        """Gets the spin_direction of this BaseballPitch.  # noqa: E501


        :return: The spin_direction of this BaseballPitch.  # noqa: E501
        :rtype: int
        """
        return self._spin_direction

    @spin_direction.setter
    def spin_direction(self, spin_direction):
        """Sets the spin_direction of this BaseballPitch.


        :param spin_direction: The spin_direction of this BaseballPitch.  # noqa: E501
        :type: int
        """

        self._spin_direction = spin_direction

    @property
    def type_confidence(self):
        """Gets the type_confidence of this BaseballPitch.  # noqa: E501


        :return: The type_confidence of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._type_confidence

    @type_confidence.setter
    def type_confidence(self, type_confidence):
        """Sets the type_confidence of this BaseballPitch.


        :param type_confidence: The type_confidence of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._type_confidence = type_confidence

    @property
    def plate_time(self):
        """Gets the plate_time of this BaseballPitch.  # noqa: E501


        :return: The plate_time of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._plate_time

    @plate_time.setter
    def plate_time(self, plate_time):
        """Sets the plate_time of this BaseballPitch.


        :param plate_time: The plate_time of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._plate_time = plate_time

    @property
    def extension(self):
        """Gets the extension of this BaseballPitch.  # noqa: E501


        :return: The extension of this BaseballPitch.  # noqa: E501
        :rtype: float
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this BaseballPitch.


        :param extension: The extension of this BaseballPitch.  # noqa: E501
        :type: float
        """

        self._extension = extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
