# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StandingsOdds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wildcard_odds': 'float',
        'division_odds': 'float',
        'playoff_odds': 'float'
    }

    attribute_map = {
        'wildcard_odds': 'wildcardOdds',
        'division_odds': 'divisionOdds',
        'playoff_odds': 'playoffOdds'
    }

    def __init__(self, wildcard_odds=None, division_odds=None, playoff_odds=None):  # noqa: E501
        """StandingsOdds - a model defined in Swagger"""  # noqa: E501
        self._wildcard_odds = None
        self._division_odds = None
        self._playoff_odds = None
        self.discriminator = None
        if wildcard_odds is not None:
            self.wildcard_odds = wildcard_odds
        if division_odds is not None:
            self.division_odds = division_odds
        if playoff_odds is not None:
            self.playoff_odds = playoff_odds

    @property
    def wildcard_odds(self):
        """Gets the wildcard_odds of this StandingsOdds.  # noqa: E501


        :return: The wildcard_odds of this StandingsOdds.  # noqa: E501
        :rtype: float
        """
        return self._wildcard_odds

    @wildcard_odds.setter
    def wildcard_odds(self, wildcard_odds):
        """Sets the wildcard_odds of this StandingsOdds.


        :param wildcard_odds: The wildcard_odds of this StandingsOdds.  # noqa: E501
        :type: float
        """

        self._wildcard_odds = wildcard_odds

    @property
    def division_odds(self):
        """Gets the division_odds of this StandingsOdds.  # noqa: E501


        :return: The division_odds of this StandingsOdds.  # noqa: E501
        :rtype: float
        """
        return self._division_odds

    @division_odds.setter
    def division_odds(self, division_odds):
        """Sets the division_odds of this StandingsOdds.


        :param division_odds: The division_odds of this StandingsOdds.  # noqa: E501
        :type: float
        """

        self._division_odds = division_odds

    @property
    def playoff_odds(self):
        """Gets the playoff_odds of this StandingsOdds.  # noqa: E501


        :return: The playoff_odds of this StandingsOdds.  # noqa: E501
        :rtype: float
        """
        return self._playoff_odds

    @playoff_odds.setter
    def playoff_odds(self, playoff_odds):
        """Sets the playoff_odds of this StandingsOdds.


        :param playoff_odds: The playoff_odds of this StandingsOdds.  # noqa: E501
        :type: float
        """

        self._playoff_odds = playoff_odds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandingsOdds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandingsOdds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
