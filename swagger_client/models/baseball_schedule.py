# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'games': 'list[BaseballScheduleItem]',
        'refresh_interval': 'int',
        'include_site_broadcasts': 'bool',
        'include_event_tickets': 'bool',
        'game_types': 'list[GameTypeEnum]',
        'schedule_events': 'list[ScheduleEvent]',
        'abschallenges': 'dict(str, object)',
        'challenges': 'dict(str, object)',
        'flags': 'dict(str, object)',
        'teams_with_games': 'list[int]',
        'schedule_items': 'list[BaseballScheduleItem]',
        'home_runs': 'dict(str, object)',
        'alerts': 'dict(str, object)',
        'baseball_schedule': 'list[BaseballScheduleItem]',
        'hydrated_stats': 'dict(str, object)',
        'hydrated_people': 'dict(str, object)',
        'previous_play': 'dict(str, object)',
        'hydrated_team_leaders_in_preview': 'dict(str, object)',
        'hydrated_team_leaders': 'dict(str, object)',
        'probable_pitchers_notes': 'dict(str, object)',
        'hydrated_probable_pitchers': 'dict(str, object)',
        'live_lookins': 'dict(str, object)',
        'baseball_lineups': 'dict(str, object)',
        'probable_officials': 'dict(str, object)',
        'hydrated_teams_as_string': 'dict(str, object)',
        'hydrated_venues_as_string': 'dict(str, object)',
        'hydrated_event_venues_as_string': 'dict(str, object)',
        'hydrated_event_divisions_as_string': 'dict(str, object)',
        'hydrated_event_leagues_as_string': 'dict(str, object)',
        'hydrated_event_sports_as_string': 'dict(str, object)',
        'game_preview_story_legacy': 'BaseballScheduleItem',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'games': 'games',
        'refresh_interval': 'refreshInterval',
        'include_site_broadcasts': 'includeSiteBroadcasts',
        'include_event_tickets': 'includeEventTickets',
        'game_types': 'gameTypes',
        'schedule_events': 'scheduleEvents',
        'abschallenges': 'abschallenges',
        'challenges': 'challenges',
        'flags': 'flags',
        'teams_with_games': 'teamsWithGames',
        'schedule_items': 'scheduleItems',
        'home_runs': 'homeRuns',
        'alerts': 'alerts',
        'baseball_schedule': 'baseballSchedule',
        'hydrated_stats': 'hydratedStats',
        'hydrated_people': 'hydratedPeople',
        'previous_play': 'previousPlay',
        'hydrated_team_leaders_in_preview': 'hydratedTeamLeadersInPreview',
        'hydrated_team_leaders': 'hydratedTeamLeaders',
        'probable_pitchers_notes': 'probablePitchersNotes',
        'hydrated_probable_pitchers': 'hydratedProbablePitchers',
        'live_lookins': 'liveLookins',
        'baseball_lineups': 'baseballLineups',
        'probable_officials': 'probableOfficials',
        'hydrated_teams_as_string': 'hydratedTeamsAsString',
        'hydrated_venues_as_string': 'hydratedVenuesAsString',
        'hydrated_event_venues_as_string': 'hydratedEventVenuesAsString',
        'hydrated_event_divisions_as_string': 'hydratedEventDivisionsAsString',
        'hydrated_event_leagues_as_string': 'hydratedEventLeaguesAsString',
        'hydrated_event_sports_as_string': 'hydratedEventSportsAsString',
        'game_preview_story_legacy': 'gamePreviewStoryLegacy',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, games=None, refresh_interval=None, include_site_broadcasts=None, include_event_tickets=None, game_types=None, schedule_events=None, abschallenges=None, challenges=None, flags=None, teams_with_games=None, schedule_items=None, home_runs=None, alerts=None, baseball_schedule=None, hydrated_stats=None, hydrated_people=None, previous_play=None, hydrated_team_leaders_in_preview=None, hydrated_team_leaders=None, probable_pitchers_notes=None, hydrated_probable_pitchers=None, live_lookins=None, baseball_lineups=None, probable_officials=None, hydrated_teams_as_string=None, hydrated_venues_as_string=None, hydrated_event_venues_as_string=None, hydrated_event_divisions_as_string=None, hydrated_event_leagues_as_string=None, hydrated_event_sports_as_string=None, game_preview_story_legacy=None, user_privileges=None):  # noqa: E501
        """BaseballSchedule - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._games = None
        self._refresh_interval = None
        self._include_site_broadcasts = None
        self._include_event_tickets = None
        self._game_types = None
        self._schedule_events = None
        self._abschallenges = None
        self._challenges = None
        self._flags = None
        self._teams_with_games = None
        self._schedule_items = None
        self._home_runs = None
        self._alerts = None
        self._baseball_schedule = None
        self._hydrated_stats = None
        self._hydrated_people = None
        self._previous_play = None
        self._hydrated_team_leaders_in_preview = None
        self._hydrated_team_leaders = None
        self._probable_pitchers_notes = None
        self._hydrated_probable_pitchers = None
        self._live_lookins = None
        self._baseball_lineups = None
        self._probable_officials = None
        self._hydrated_teams_as_string = None
        self._hydrated_venues_as_string = None
        self._hydrated_event_venues_as_string = None
        self._hydrated_event_divisions_as_string = None
        self._hydrated_event_leagues_as_string = None
        self._hydrated_event_sports_as_string = None
        self._game_preview_story_legacy = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if games is not None:
            self.games = games
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if include_site_broadcasts is not None:
            self.include_site_broadcasts = include_site_broadcasts
        if include_event_tickets is not None:
            self.include_event_tickets = include_event_tickets
        if game_types is not None:
            self.game_types = game_types
        if schedule_events is not None:
            self.schedule_events = schedule_events
        if abschallenges is not None:
            self.abschallenges = abschallenges
        if challenges is not None:
            self.challenges = challenges
        if flags is not None:
            self.flags = flags
        if teams_with_games is not None:
            self.teams_with_games = teams_with_games
        if schedule_items is not None:
            self.schedule_items = schedule_items
        if home_runs is not None:
            self.home_runs = home_runs
        if alerts is not None:
            self.alerts = alerts
        if baseball_schedule is not None:
            self.baseball_schedule = baseball_schedule
        if hydrated_stats is not None:
            self.hydrated_stats = hydrated_stats
        if hydrated_people is not None:
            self.hydrated_people = hydrated_people
        if previous_play is not None:
            self.previous_play = previous_play
        if hydrated_team_leaders_in_preview is not None:
            self.hydrated_team_leaders_in_preview = hydrated_team_leaders_in_preview
        if hydrated_team_leaders is not None:
            self.hydrated_team_leaders = hydrated_team_leaders
        if probable_pitchers_notes is not None:
            self.probable_pitchers_notes = probable_pitchers_notes
        if hydrated_probable_pitchers is not None:
            self.hydrated_probable_pitchers = hydrated_probable_pitchers
        if live_lookins is not None:
            self.live_lookins = live_lookins
        if baseball_lineups is not None:
            self.baseball_lineups = baseball_lineups
        if probable_officials is not None:
            self.probable_officials = probable_officials
        if hydrated_teams_as_string is not None:
            self.hydrated_teams_as_string = hydrated_teams_as_string
        if hydrated_venues_as_string is not None:
            self.hydrated_venues_as_string = hydrated_venues_as_string
        if hydrated_event_venues_as_string is not None:
            self.hydrated_event_venues_as_string = hydrated_event_venues_as_string
        if hydrated_event_divisions_as_string is not None:
            self.hydrated_event_divisions_as_string = hydrated_event_divisions_as_string
        if hydrated_event_leagues_as_string is not None:
            self.hydrated_event_leagues_as_string = hydrated_event_leagues_as_string
        if hydrated_event_sports_as_string is not None:
            self.hydrated_event_sports_as_string = hydrated_event_sports_as_string
        if game_preview_story_legacy is not None:
            self.game_preview_story_legacy = game_preview_story_legacy
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this BaseballSchedule.  # noqa: E501


        :return: The requesting_user_role of this BaseballSchedule.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this BaseballSchedule.


        :param requesting_user_role: The requesting_user_role of this BaseballSchedule.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def games(self):
        """Gets the games of this BaseballSchedule.  # noqa: E501


        :return: The games of this BaseballSchedule.  # noqa: E501
        :rtype: list[BaseballScheduleItem]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this BaseballSchedule.


        :param games: The games of this BaseballSchedule.  # noqa: E501
        :type: list[BaseballScheduleItem]
        """

        self._games = games

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this BaseballSchedule.  # noqa: E501


        :return: The refresh_interval of this BaseballSchedule.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this BaseballSchedule.


        :param refresh_interval: The refresh_interval of this BaseballSchedule.  # noqa: E501
        :type: int
        """

        self._refresh_interval = refresh_interval

    @property
    def include_site_broadcasts(self):
        """Gets the include_site_broadcasts of this BaseballSchedule.  # noqa: E501


        :return: The include_site_broadcasts of this BaseballSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._include_site_broadcasts

    @include_site_broadcasts.setter
    def include_site_broadcasts(self, include_site_broadcasts):
        """Sets the include_site_broadcasts of this BaseballSchedule.


        :param include_site_broadcasts: The include_site_broadcasts of this BaseballSchedule.  # noqa: E501
        :type: bool
        """

        self._include_site_broadcasts = include_site_broadcasts

    @property
    def include_event_tickets(self):
        """Gets the include_event_tickets of this BaseballSchedule.  # noqa: E501


        :return: The include_event_tickets of this BaseballSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._include_event_tickets

    @include_event_tickets.setter
    def include_event_tickets(self, include_event_tickets):
        """Sets the include_event_tickets of this BaseballSchedule.


        :param include_event_tickets: The include_event_tickets of this BaseballSchedule.  # noqa: E501
        :type: bool
        """

        self._include_event_tickets = include_event_tickets

    @property
    def game_types(self):
        """Gets the game_types of this BaseballSchedule.  # noqa: E501


        :return: The game_types of this BaseballSchedule.  # noqa: E501
        :rtype: list[GameTypeEnum]
        """
        return self._game_types

    @game_types.setter
    def game_types(self, game_types):
        """Sets the game_types of this BaseballSchedule.


        :param game_types: The game_types of this BaseballSchedule.  # noqa: E501
        :type: list[GameTypeEnum]
        """

        self._game_types = game_types

    @property
    def schedule_events(self):
        """Gets the schedule_events of this BaseballSchedule.  # noqa: E501


        :return: The schedule_events of this BaseballSchedule.  # noqa: E501
        :rtype: list[ScheduleEvent]
        """
        return self._schedule_events

    @schedule_events.setter
    def schedule_events(self, schedule_events):
        """Sets the schedule_events of this BaseballSchedule.


        :param schedule_events: The schedule_events of this BaseballSchedule.  # noqa: E501
        :type: list[ScheduleEvent]
        """

        self._schedule_events = schedule_events

    @property
    def abschallenges(self):
        """Gets the abschallenges of this BaseballSchedule.  # noqa: E501


        :return: The abschallenges of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._abschallenges

    @abschallenges.setter
    def abschallenges(self, abschallenges):
        """Sets the abschallenges of this BaseballSchedule.


        :param abschallenges: The abschallenges of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._abschallenges = abschallenges

    @property
    def challenges(self):
        """Gets the challenges of this BaseballSchedule.  # noqa: E501


        :return: The challenges of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this BaseballSchedule.


        :param challenges: The challenges of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._challenges = challenges

    @property
    def flags(self):
        """Gets the flags of this BaseballSchedule.  # noqa: E501


        :return: The flags of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this BaseballSchedule.


        :param flags: The flags of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._flags = flags

    @property
    def teams_with_games(self):
        """Gets the teams_with_games of this BaseballSchedule.  # noqa: E501


        :return: The teams_with_games of this BaseballSchedule.  # noqa: E501
        :rtype: list[int]
        """
        return self._teams_with_games

    @teams_with_games.setter
    def teams_with_games(self, teams_with_games):
        """Sets the teams_with_games of this BaseballSchedule.


        :param teams_with_games: The teams_with_games of this BaseballSchedule.  # noqa: E501
        :type: list[int]
        """

        self._teams_with_games = teams_with_games

    @property
    def schedule_items(self):
        """Gets the schedule_items of this BaseballSchedule.  # noqa: E501


        :return: The schedule_items of this BaseballSchedule.  # noqa: E501
        :rtype: list[BaseballScheduleItem]
        """
        return self._schedule_items

    @schedule_items.setter
    def schedule_items(self, schedule_items):
        """Sets the schedule_items of this BaseballSchedule.


        :param schedule_items: The schedule_items of this BaseballSchedule.  # noqa: E501
        :type: list[BaseballScheduleItem]
        """

        self._schedule_items = schedule_items

    @property
    def home_runs(self):
        """Gets the home_runs of this BaseballSchedule.  # noqa: E501


        :return: The home_runs of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._home_runs

    @home_runs.setter
    def home_runs(self, home_runs):
        """Sets the home_runs of this BaseballSchedule.


        :param home_runs: The home_runs of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._home_runs = home_runs

    @property
    def alerts(self):
        """Gets the alerts of this BaseballSchedule.  # noqa: E501


        :return: The alerts of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this BaseballSchedule.


        :param alerts: The alerts of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._alerts = alerts

    @property
    def baseball_schedule(self):
        """Gets the baseball_schedule of this BaseballSchedule.  # noqa: E501


        :return: The baseball_schedule of this BaseballSchedule.  # noqa: E501
        :rtype: list[BaseballScheduleItem]
        """
        return self._baseball_schedule

    @baseball_schedule.setter
    def baseball_schedule(self, baseball_schedule):
        """Sets the baseball_schedule of this BaseballSchedule.


        :param baseball_schedule: The baseball_schedule of this BaseballSchedule.  # noqa: E501
        :type: list[BaseballScheduleItem]
        """

        self._baseball_schedule = baseball_schedule

    @property
    def hydrated_stats(self):
        """Gets the hydrated_stats of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_stats of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_stats

    @hydrated_stats.setter
    def hydrated_stats(self, hydrated_stats):
        """Sets the hydrated_stats of this BaseballSchedule.


        :param hydrated_stats: The hydrated_stats of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_stats = hydrated_stats

    @property
    def hydrated_people(self):
        """Gets the hydrated_people of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_people of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_people

    @hydrated_people.setter
    def hydrated_people(self, hydrated_people):
        """Sets the hydrated_people of this BaseballSchedule.


        :param hydrated_people: The hydrated_people of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_people = hydrated_people

    @property
    def previous_play(self):
        """Gets the previous_play of this BaseballSchedule.  # noqa: E501


        :return: The previous_play of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._previous_play

    @previous_play.setter
    def previous_play(self, previous_play):
        """Sets the previous_play of this BaseballSchedule.


        :param previous_play: The previous_play of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._previous_play = previous_play

    @property
    def hydrated_team_leaders_in_preview(self):
        """Gets the hydrated_team_leaders_in_preview of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_team_leaders_in_preview of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_team_leaders_in_preview

    @hydrated_team_leaders_in_preview.setter
    def hydrated_team_leaders_in_preview(self, hydrated_team_leaders_in_preview):
        """Sets the hydrated_team_leaders_in_preview of this BaseballSchedule.


        :param hydrated_team_leaders_in_preview: The hydrated_team_leaders_in_preview of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_team_leaders_in_preview = hydrated_team_leaders_in_preview

    @property
    def hydrated_team_leaders(self):
        """Gets the hydrated_team_leaders of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_team_leaders of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_team_leaders

    @hydrated_team_leaders.setter
    def hydrated_team_leaders(self, hydrated_team_leaders):
        """Sets the hydrated_team_leaders of this BaseballSchedule.


        :param hydrated_team_leaders: The hydrated_team_leaders of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_team_leaders = hydrated_team_leaders

    @property
    def probable_pitchers_notes(self):
        """Gets the probable_pitchers_notes of this BaseballSchedule.  # noqa: E501


        :return: The probable_pitchers_notes of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._probable_pitchers_notes

    @probable_pitchers_notes.setter
    def probable_pitchers_notes(self, probable_pitchers_notes):
        """Sets the probable_pitchers_notes of this BaseballSchedule.


        :param probable_pitchers_notes: The probable_pitchers_notes of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._probable_pitchers_notes = probable_pitchers_notes

    @property
    def hydrated_probable_pitchers(self):
        """Gets the hydrated_probable_pitchers of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_probable_pitchers of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_probable_pitchers

    @hydrated_probable_pitchers.setter
    def hydrated_probable_pitchers(self, hydrated_probable_pitchers):
        """Sets the hydrated_probable_pitchers of this BaseballSchedule.


        :param hydrated_probable_pitchers: The hydrated_probable_pitchers of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_probable_pitchers = hydrated_probable_pitchers

    @property
    def live_lookins(self):
        """Gets the live_lookins of this BaseballSchedule.  # noqa: E501


        :return: The live_lookins of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._live_lookins

    @live_lookins.setter
    def live_lookins(self, live_lookins):
        """Sets the live_lookins of this BaseballSchedule.


        :param live_lookins: The live_lookins of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._live_lookins = live_lookins

    @property
    def baseball_lineups(self):
        """Gets the baseball_lineups of this BaseballSchedule.  # noqa: E501


        :return: The baseball_lineups of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._baseball_lineups

    @baseball_lineups.setter
    def baseball_lineups(self, baseball_lineups):
        """Sets the baseball_lineups of this BaseballSchedule.


        :param baseball_lineups: The baseball_lineups of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._baseball_lineups = baseball_lineups

    @property
    def probable_officials(self):
        """Gets the probable_officials of this BaseballSchedule.  # noqa: E501


        :return: The probable_officials of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._probable_officials

    @probable_officials.setter
    def probable_officials(self, probable_officials):
        """Sets the probable_officials of this BaseballSchedule.


        :param probable_officials: The probable_officials of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._probable_officials = probable_officials

    @property
    def hydrated_teams_as_string(self):
        """Gets the hydrated_teams_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_teams_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_teams_as_string

    @hydrated_teams_as_string.setter
    def hydrated_teams_as_string(self, hydrated_teams_as_string):
        """Sets the hydrated_teams_as_string of this BaseballSchedule.


        :param hydrated_teams_as_string: The hydrated_teams_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_teams_as_string = hydrated_teams_as_string

    @property
    def hydrated_venues_as_string(self):
        """Gets the hydrated_venues_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_venues_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_venues_as_string

    @hydrated_venues_as_string.setter
    def hydrated_venues_as_string(self, hydrated_venues_as_string):
        """Sets the hydrated_venues_as_string of this BaseballSchedule.


        :param hydrated_venues_as_string: The hydrated_venues_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_venues_as_string = hydrated_venues_as_string

    @property
    def hydrated_event_venues_as_string(self):
        """Gets the hydrated_event_venues_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_event_venues_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_event_venues_as_string

    @hydrated_event_venues_as_string.setter
    def hydrated_event_venues_as_string(self, hydrated_event_venues_as_string):
        """Sets the hydrated_event_venues_as_string of this BaseballSchedule.


        :param hydrated_event_venues_as_string: The hydrated_event_venues_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_event_venues_as_string = hydrated_event_venues_as_string

    @property
    def hydrated_event_divisions_as_string(self):
        """Gets the hydrated_event_divisions_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_event_divisions_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_event_divisions_as_string

    @hydrated_event_divisions_as_string.setter
    def hydrated_event_divisions_as_string(self, hydrated_event_divisions_as_string):
        """Sets the hydrated_event_divisions_as_string of this BaseballSchedule.


        :param hydrated_event_divisions_as_string: The hydrated_event_divisions_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_event_divisions_as_string = hydrated_event_divisions_as_string

    @property
    def hydrated_event_leagues_as_string(self):
        """Gets the hydrated_event_leagues_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_event_leagues_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_event_leagues_as_string

    @hydrated_event_leagues_as_string.setter
    def hydrated_event_leagues_as_string(self, hydrated_event_leagues_as_string):
        """Sets the hydrated_event_leagues_as_string of this BaseballSchedule.


        :param hydrated_event_leagues_as_string: The hydrated_event_leagues_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_event_leagues_as_string = hydrated_event_leagues_as_string

    @property
    def hydrated_event_sports_as_string(self):
        """Gets the hydrated_event_sports_as_string of this BaseballSchedule.  # noqa: E501


        :return: The hydrated_event_sports_as_string of this BaseballSchedule.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_event_sports_as_string

    @hydrated_event_sports_as_string.setter
    def hydrated_event_sports_as_string(self, hydrated_event_sports_as_string):
        """Sets the hydrated_event_sports_as_string of this BaseballSchedule.


        :param hydrated_event_sports_as_string: The hydrated_event_sports_as_string of this BaseballSchedule.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_event_sports_as_string = hydrated_event_sports_as_string

    @property
    def game_preview_story_legacy(self):
        """Gets the game_preview_story_legacy of this BaseballSchedule.  # noqa: E501


        :return: The game_preview_story_legacy of this BaseballSchedule.  # noqa: E501
        :rtype: BaseballScheduleItem
        """
        return self._game_preview_story_legacy

    @game_preview_story_legacy.setter
    def game_preview_story_legacy(self, game_preview_story_legacy):
        """Sets the game_preview_story_legacy of this BaseballSchedule.


        :param game_preview_story_legacy: The game_preview_story_legacy of this BaseballSchedule.  # noqa: E501
        :type: BaseballScheduleItem
        """

        self._game_preview_story_legacy = game_preview_story_legacy

    @property
    def user_privileges(self):
        """Gets the user_privileges of this BaseballSchedule.  # noqa: E501


        :return: The user_privileges of this BaseballSchedule.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this BaseballSchedule.


        :param user_privileges: The user_privileges of this BaseballSchedule.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
