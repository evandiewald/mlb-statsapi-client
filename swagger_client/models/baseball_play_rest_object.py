# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPlayRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hydrations': 'list[str]',
        'result': 'Result',
        'about': 'About',
        'count': 'Count',
        'matchup': 'Matchup',
        'pitch_index': 'list[int]',
        'action_index': 'list[int]',
        'runner_index': 'list[int]',
        'runners': 'list[RunnerMovement]',
        'play_events': 'list[BaseballPlayEventRestObject]',
        'credits': 'list[PlayCreditRestObject]',
        'flags': 'list[PlayCreditRestObject]',
        'review_details': 'ReviewDetails',
        'play_end_time': 'datetime',
        'at_bat_index': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'result': 'result',
        'about': 'about',
        'count': 'count',
        'matchup': 'matchup',
        'pitch_index': 'pitchIndex',
        'action_index': 'actionIndex',
        'runner_index': 'runnerIndex',
        'runners': 'runners',
        'play_events': 'playEvents',
        'credits': 'credits',
        'flags': 'flags',
        'review_details': 'reviewDetails',
        'play_end_time': 'playEndTime',
        'at_bat_index': 'atBatIndex'
    }

    def __init__(self, copyright=None, hydrations=None, result=None, about=None, count=None, matchup=None, pitch_index=None, action_index=None, runner_index=None, runners=None, play_events=None, credits=None, flags=None, review_details=None, play_end_time=None, at_bat_index=None):  # noqa: E501
        """BaseballPlayRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hydrations = None
        self._result = None
        self._about = None
        self._count = None
        self._matchup = None
        self._pitch_index = None
        self._action_index = None
        self._runner_index = None
        self._runners = None
        self._play_events = None
        self._credits = None
        self._flags = None
        self._review_details = None
        self._play_end_time = None
        self._at_bat_index = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if result is not None:
            self.result = result
        if about is not None:
            self.about = about
        if count is not None:
            self.count = count
        if matchup is not None:
            self.matchup = matchup
        if pitch_index is not None:
            self.pitch_index = pitch_index
        if action_index is not None:
            self.action_index = action_index
        if runner_index is not None:
            self.runner_index = runner_index
        if runners is not None:
            self.runners = runners
        if play_events is not None:
            self.play_events = play_events
        if credits is not None:
            self.credits = credits
        if flags is not None:
            self.flags = flags
        if review_details is not None:
            self.review_details = review_details
        if play_end_time is not None:
            self.play_end_time = play_end_time
        if at_bat_index is not None:
            self.at_bat_index = at_bat_index

    @property
    def copyright(self):
        """Gets the copyright of this BaseballPlayRestObject.  # noqa: E501


        :return: The copyright of this BaseballPlayRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballPlayRestObject.


        :param copyright: The copyright of this BaseballPlayRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this BaseballPlayRestObject.  # noqa: E501


        :return: The hydrations of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this BaseballPlayRestObject.


        :param hydrations: The hydrations of this BaseballPlayRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def result(self):
        """Gets the result of this BaseballPlayRestObject.  # noqa: E501


        :return: The result of this BaseballPlayRestObject.  # noqa: E501
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BaseballPlayRestObject.


        :param result: The result of this BaseballPlayRestObject.  # noqa: E501
        :type: Result
        """

        self._result = result

    @property
    def about(self):
        """Gets the about of this BaseballPlayRestObject.  # noqa: E501


        :return: The about of this BaseballPlayRestObject.  # noqa: E501
        :rtype: About
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this BaseballPlayRestObject.


        :param about: The about of this BaseballPlayRestObject.  # noqa: E501
        :type: About
        """

        self._about = about

    @property
    def count(self):
        """Gets the count of this BaseballPlayRestObject.  # noqa: E501


        :return: The count of this BaseballPlayRestObject.  # noqa: E501
        :rtype: Count
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BaseballPlayRestObject.


        :param count: The count of this BaseballPlayRestObject.  # noqa: E501
        :type: Count
        """

        self._count = count

    @property
    def matchup(self):
        """Gets the matchup of this BaseballPlayRestObject.  # noqa: E501


        :return: The matchup of this BaseballPlayRestObject.  # noqa: E501
        :rtype: Matchup
        """
        return self._matchup

    @matchup.setter
    def matchup(self, matchup):
        """Sets the matchup of this BaseballPlayRestObject.


        :param matchup: The matchup of this BaseballPlayRestObject.  # noqa: E501
        :type: Matchup
        """

        self._matchup = matchup

    @property
    def pitch_index(self):
        """Gets the pitch_index of this BaseballPlayRestObject.  # noqa: E501


        :return: The pitch_index of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._pitch_index

    @pitch_index.setter
    def pitch_index(self, pitch_index):
        """Sets the pitch_index of this BaseballPlayRestObject.


        :param pitch_index: The pitch_index of this BaseballPlayRestObject.  # noqa: E501
        :type: list[int]
        """

        self._pitch_index = pitch_index

    @property
    def action_index(self):
        """Gets the action_index of this BaseballPlayRestObject.  # noqa: E501


        :return: The action_index of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._action_index

    @action_index.setter
    def action_index(self, action_index):
        """Sets the action_index of this BaseballPlayRestObject.


        :param action_index: The action_index of this BaseballPlayRestObject.  # noqa: E501
        :type: list[int]
        """

        self._action_index = action_index

    @property
    def runner_index(self):
        """Gets the runner_index of this BaseballPlayRestObject.  # noqa: E501


        :return: The runner_index of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._runner_index

    @runner_index.setter
    def runner_index(self, runner_index):
        """Sets the runner_index of this BaseballPlayRestObject.


        :param runner_index: The runner_index of this BaseballPlayRestObject.  # noqa: E501
        :type: list[int]
        """

        self._runner_index = runner_index

    @property
    def runners(self):
        """Gets the runners of this BaseballPlayRestObject.  # noqa: E501


        :return: The runners of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[RunnerMovement]
        """
        return self._runners

    @runners.setter
    def runners(self, runners):
        """Sets the runners of this BaseballPlayRestObject.


        :param runners: The runners of this BaseballPlayRestObject.  # noqa: E501
        :type: list[RunnerMovement]
        """

        self._runners = runners

    @property
    def play_events(self):
        """Gets the play_events of this BaseballPlayRestObject.  # noqa: E501


        :return: The play_events of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[BaseballPlayEventRestObject]
        """
        return self._play_events

    @play_events.setter
    def play_events(self, play_events):
        """Sets the play_events of this BaseballPlayRestObject.


        :param play_events: The play_events of this BaseballPlayRestObject.  # noqa: E501
        :type: list[BaseballPlayEventRestObject]
        """

        self._play_events = play_events

    @property
    def credits(self):
        """Gets the credits of this BaseballPlayRestObject.  # noqa: E501


        :return: The credits of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[PlayCreditRestObject]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this BaseballPlayRestObject.


        :param credits: The credits of this BaseballPlayRestObject.  # noqa: E501
        :type: list[PlayCreditRestObject]
        """

        self._credits = credits

    @property
    def flags(self):
        """Gets the flags of this BaseballPlayRestObject.  # noqa: E501


        :return: The flags of this BaseballPlayRestObject.  # noqa: E501
        :rtype: list[PlayCreditRestObject]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this BaseballPlayRestObject.


        :param flags: The flags of this BaseballPlayRestObject.  # noqa: E501
        :type: list[PlayCreditRestObject]
        """

        self._flags = flags

    @property
    def review_details(self):
        """Gets the review_details of this BaseballPlayRestObject.  # noqa: E501


        :return: The review_details of this BaseballPlayRestObject.  # noqa: E501
        :rtype: ReviewDetails
        """
        return self._review_details

    @review_details.setter
    def review_details(self, review_details):
        """Sets the review_details of this BaseballPlayRestObject.


        :param review_details: The review_details of this BaseballPlayRestObject.  # noqa: E501
        :type: ReviewDetails
        """

        self._review_details = review_details

    @property
    def play_end_time(self):
        """Gets the play_end_time of this BaseballPlayRestObject.  # noqa: E501


        :return: The play_end_time of this BaseballPlayRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._play_end_time

    @play_end_time.setter
    def play_end_time(self, play_end_time):
        """Sets the play_end_time of this BaseballPlayRestObject.


        :param play_end_time: The play_end_time of this BaseballPlayRestObject.  # noqa: E501
        :type: datetime
        """

        self._play_end_time = play_end_time

    @property
    def at_bat_index(self):
        """Gets the at_bat_index of this BaseballPlayRestObject.  # noqa: E501


        :return: The at_bat_index of this BaseballPlayRestObject.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_index

    @at_bat_index.setter
    def at_bat_index(self, at_bat_index):
        """Sets the at_bat_index of this BaseballPlayRestObject.


        :param at_bat_index: The at_bat_index of this BaseballPlayRestObject.  # noqa: E501
        :type: int
        """

        self._at_bat_index = at_bat_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPlayRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPlayRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
