# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Division(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'id': 'int',
        'name': 'str',
        'name_short': 'str',
        'conference_id': 'int',
        'conference': 'Conference',
        'league': 'League',
        'sport_code': 'str',
        'sport': 'Sport',
        'abbreviation': 'str',
        'has_wildcard': 'bool',
        'num_playoff_teams': 'int',
        'season': 'str',
        'sort_order': 'int',
        'active': 'bool',
        'hydrated_conferences': 'dict(str, object)',
        'hydrated_leagues': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'id': 'id',
        'name': 'name',
        'name_short': 'nameShort',
        'conference_id': 'conferenceId',
        'conference': 'conference',
        'league': 'league',
        'sport_code': 'sportCode',
        'sport': 'sport',
        'abbreviation': 'abbreviation',
        'has_wildcard': 'hasWildcard',
        'num_playoff_teams': 'numPlayoffTeams',
        'season': 'season',
        'sort_order': 'sortOrder',
        'active': 'active',
        'hydrated_conferences': 'hydratedConferences',
        'hydrated_leagues': 'hydratedLeagues',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, id=None, name=None, name_short=None, conference_id=None, conference=None, league=None, sport_code=None, sport=None, abbreviation=None, has_wildcard=None, num_playoff_teams=None, season=None, sort_order=None, active=None, hydrated_conferences=None, hydrated_leagues=None, user_privileges=None):  # noqa: E501
        """Division - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._id = None
        self._name = None
        self._name_short = None
        self._conference_id = None
        self._conference = None
        self._league = None
        self._sport_code = None
        self._sport = None
        self._abbreviation = None
        self._has_wildcard = None
        self._num_playoff_teams = None
        self._season = None
        self._sort_order = None
        self._active = None
        self._hydrated_conferences = None
        self._hydrated_leagues = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if name_short is not None:
            self.name_short = name_short
        if conference_id is not None:
            self.conference_id = conference_id
        if conference is not None:
            self.conference = conference
        if league is not None:
            self.league = league
        if sport_code is not None:
            self.sport_code = sport_code
        if sport is not None:
            self.sport = sport
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if has_wildcard is not None:
            self.has_wildcard = has_wildcard
        if num_playoff_teams is not None:
            self.num_playoff_teams = num_playoff_teams
        if season is not None:
            self.season = season
        if sort_order is not None:
            self.sort_order = sort_order
        if active is not None:
            self.active = active
        if hydrated_conferences is not None:
            self.hydrated_conferences = hydrated_conferences
        if hydrated_leagues is not None:
            self.hydrated_leagues = hydrated_leagues
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this Division.  # noqa: E501


        :return: The requesting_user_role of this Division.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this Division.


        :param requesting_user_role: The requesting_user_role of this Division.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def id(self):
        """Gets the id of this Division.  # noqa: E501


        :return: The id of this Division.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Division.


        :param id: The id of this Division.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Division.  # noqa: E501


        :return: The name of this Division.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Division.


        :param name: The name of this Division.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_short(self):
        """Gets the name_short of this Division.  # noqa: E501


        :return: The name_short of this Division.  # noqa: E501
        :rtype: str
        """
        return self._name_short

    @name_short.setter
    def name_short(self, name_short):
        """Sets the name_short of this Division.


        :param name_short: The name_short of this Division.  # noqa: E501
        :type: str
        """

        self._name_short = name_short

    @property
    def conference_id(self):
        """Gets the conference_id of this Division.  # noqa: E501


        :return: The conference_id of this Division.  # noqa: E501
        :rtype: int
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this Division.


        :param conference_id: The conference_id of this Division.  # noqa: E501
        :type: int
        """

        self._conference_id = conference_id

    @property
    def conference(self):
        """Gets the conference of this Division.  # noqa: E501


        :return: The conference of this Division.  # noqa: E501
        :rtype: Conference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this Division.


        :param conference: The conference of this Division.  # noqa: E501
        :type: Conference
        """

        self._conference = conference

    @property
    def league(self):
        """Gets the league of this Division.  # noqa: E501


        :return: The league of this Division.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this Division.


        :param league: The league of this Division.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def sport_code(self):
        """Gets the sport_code of this Division.  # noqa: E501


        :return: The sport_code of this Division.  # noqa: E501
        :rtype: str
        """
        return self._sport_code

    @sport_code.setter
    def sport_code(self, sport_code):
        """Sets the sport_code of this Division.


        :param sport_code: The sport_code of this Division.  # noqa: E501
        :type: str
        """

        self._sport_code = sport_code

    @property
    def sport(self):
        """Gets the sport of this Division.  # noqa: E501


        :return: The sport of this Division.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this Division.


        :param sport: The sport of this Division.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Division.  # noqa: E501


        :return: The abbreviation of this Division.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Division.


        :param abbreviation: The abbreviation of this Division.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def has_wildcard(self):
        """Gets the has_wildcard of this Division.  # noqa: E501


        :return: The has_wildcard of this Division.  # noqa: E501
        :rtype: bool
        """
        return self._has_wildcard

    @has_wildcard.setter
    def has_wildcard(self, has_wildcard):
        """Sets the has_wildcard of this Division.


        :param has_wildcard: The has_wildcard of this Division.  # noqa: E501
        :type: bool
        """

        self._has_wildcard = has_wildcard

    @property
    def num_playoff_teams(self):
        """Gets the num_playoff_teams of this Division.  # noqa: E501


        :return: The num_playoff_teams of this Division.  # noqa: E501
        :rtype: int
        """
        return self._num_playoff_teams

    @num_playoff_teams.setter
    def num_playoff_teams(self, num_playoff_teams):
        """Sets the num_playoff_teams of this Division.


        :param num_playoff_teams: The num_playoff_teams of this Division.  # noqa: E501
        :type: int
        """

        self._num_playoff_teams = num_playoff_teams

    @property
    def season(self):
        """Gets the season of this Division.  # noqa: E501


        :return: The season of this Division.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Division.


        :param season: The season of this Division.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def sort_order(self):
        """Gets the sort_order of this Division.  # noqa: E501


        :return: The sort_order of this Division.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Division.


        :param sort_order: The sort_order of this Division.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def active(self):
        """Gets the active of this Division.  # noqa: E501


        :return: The active of this Division.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Division.


        :param active: The active of this Division.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def hydrated_conferences(self):
        """Gets the hydrated_conferences of this Division.  # noqa: E501


        :return: The hydrated_conferences of this Division.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_conferences

    @hydrated_conferences.setter
    def hydrated_conferences(self, hydrated_conferences):
        """Sets the hydrated_conferences of this Division.


        :param hydrated_conferences: The hydrated_conferences of this Division.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_conferences = hydrated_conferences

    @property
    def hydrated_leagues(self):
        """Gets the hydrated_leagues of this Division.  # noqa: E501


        :return: The hydrated_leagues of this Division.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_leagues

    @hydrated_leagues.setter
    def hydrated_leagues(self, hydrated_leagues):
        """Sets the hydrated_leagues of this Division.


        :param hydrated_leagues: The hydrated_leagues of this Division.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_leagues = hydrated_leagues

    @property
    def user_privileges(self):
        """Gets the user_privileges of this Division.  # noqa: E501


        :return: The user_privileges of this Division.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this Division.


        :param user_privileges: The user_privileges of this Division.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Division, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Division):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
