# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PitchFxDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'x0': 'CoordinatesRestObject',
        'v0': 'CoordinatesRestObject',
        'a0': 'CoordinatesRestObject',
        'pfx_vert': 'float',
        'pfx_horz': 'float'
    }

    attribute_map = {
        'copyright': 'copyright',
        'x0': 'x0',
        'v0': 'v0',
        'a0': 'a0',
        'pfx_vert': 'pfxVert',
        'pfx_horz': 'pfxHorz'
    }

    def __init__(self, copyright=None, x0=None, v0=None, a0=None, pfx_vert=None, pfx_horz=None):  # noqa: E501
        """PitchFxDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._x0 = None
        self._v0 = None
        self._a0 = None
        self._pfx_vert = None
        self._pfx_horz = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if x0 is not None:
            self.x0 = x0
        if v0 is not None:
            self.v0 = v0
        if a0 is not None:
            self.a0 = a0
        if pfx_vert is not None:
            self.pfx_vert = pfx_vert
        if pfx_horz is not None:
            self.pfx_horz = pfx_horz

    @property
    def copyright(self):
        """Gets the copyright of this PitchFxDataRestObject.  # noqa: E501


        :return: The copyright of this PitchFxDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PitchFxDataRestObject.


        :param copyright: The copyright of this PitchFxDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def x0(self):
        """Gets the x0 of this PitchFxDataRestObject.  # noqa: E501


        :return: The x0 of this PitchFxDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this PitchFxDataRestObject.


        :param x0: The x0 of this PitchFxDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._x0 = x0

    @property
    def v0(self):
        """Gets the v0 of this PitchFxDataRestObject.  # noqa: E501


        :return: The v0 of this PitchFxDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._v0

    @v0.setter
    def v0(self, v0):
        """Sets the v0 of this PitchFxDataRestObject.


        :param v0: The v0 of this PitchFxDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._v0 = v0

    @property
    def a0(self):
        """Gets the a0 of this PitchFxDataRestObject.  # noqa: E501


        :return: The a0 of this PitchFxDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._a0

    @a0.setter
    def a0(self, a0):
        """Sets the a0 of this PitchFxDataRestObject.


        :param a0: The a0 of this PitchFxDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._a0 = a0

    @property
    def pfx_vert(self):
        """Gets the pfx_vert of this PitchFxDataRestObject.  # noqa: E501


        :return: The pfx_vert of this PitchFxDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._pfx_vert

    @pfx_vert.setter
    def pfx_vert(self, pfx_vert):
        """Sets the pfx_vert of this PitchFxDataRestObject.


        :param pfx_vert: The pfx_vert of this PitchFxDataRestObject.  # noqa: E501
        :type: float
        """

        self._pfx_vert = pfx_vert

    @property
    def pfx_horz(self):
        """Gets the pfx_horz of this PitchFxDataRestObject.  # noqa: E501


        :return: The pfx_horz of this PitchFxDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._pfx_horz

    @pfx_horz.setter
    def pfx_horz(self, pfx_horz):
        """Sets the pfx_horz of this PitchFxDataRestObject.


        :param pfx_horz: The pfx_horz of this PitchFxDataRestObject.  # noqa: E501
        :type: float
        """

        self._pfx_horz = pfx_horz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitchFxDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitchFxDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
