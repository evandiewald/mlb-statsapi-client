# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeagueListsEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    MILB_FULL = "MILB_FULL"
    MILB_SHORT = "MILB_SHORT"
    MILB_COMPLEX = "MILB_COMPLEX"
    MILB_ALL = "MILB_ALL"
    MILB_ALL_NOMEX = "MILB_ALL_NOMEX"
    MILB_ALL_DOMESTIC = "MILB_ALL_DOMESTIC"
    MILB_NONCOMP = "MILB_NONCOMP"
    MILB_NONCOMP_NOMEX = "MILB_NONCOMP_NOMEX"
    MILB_DOMCOMP = "MILB_DOMCOMP"
    MILB_INTCOMP = "MILB_INTCOMP"
    WIN_NOABL = "WIN_NOABL"
    WIN_CARIBBEAN = "WIN_CARIBBEAN"
    WIN_ALL = "WIN_ALL"
    ABL = "ABL"
    MEX_ALL = "MEX_ALL"
    MLB = "MLB"
    MLB_HIST = "MLB_HIST"
    MLB_MILB = "MLB_MILB"
    MLB_MILB_HIST = "MLB_MILB_HIST"
    MLB_MILB_WIN = "MLB_MILB_WIN"
    BASEBALL_ALL = "BASEBALL_ALL"
    MLB_SPRING = "MLB_SPRING"
    MLB_AL_NL = "MLB_AL_NL"
    MLB_NEGRO = "MLB_NEGRO"
    NEGRO_ALL = "NEGRO_ALL"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """LeagueListsEnum - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueListsEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueListsEnum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
