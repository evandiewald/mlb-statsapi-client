# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamStandingsRecordRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'team': 'BaseballTeamRestObject',
        'division': 'Division',
        'conference': 'Conference',
        'league': 'League',
        'season': 'str',
        'streak': 'StreakRestObject',
        'clinch_indicator': 'str',
        'division_rank': 'str',
        'conference_rank': 'str',
        'league_rank': 'str',
        'spring_league_rank': 'str',
        'wild_card_rank': 'str',
        'sport_rank': 'str',
        'games_played': 'int',
        'games_back': 'str',
        'wild_card_games_back': 'str',
        'league_games_back': 'str',
        'spring_league_games_back': 'str',
        'sport_games_back': 'str',
        'division_games_back': 'str',
        'conference_games_back': 'str',
        'league_record': 'WinLossRecordRestObject',
        'last_updated': 'datetime',
        'records': 'dict(str, list[WinLossRecordRestObject])',
        'probabilites': 'StandingsOdds',
        'points': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'team': 'team',
        'division': 'division',
        'conference': 'conference',
        'league': 'league',
        'season': 'season',
        'streak': 'streak',
        'clinch_indicator': 'clinchIndicator',
        'division_rank': 'divisionRank',
        'conference_rank': 'conferenceRank',
        'league_rank': 'leagueRank',
        'spring_league_rank': 'springLeagueRank',
        'wild_card_rank': 'wildCardRank',
        'sport_rank': 'sportRank',
        'games_played': 'gamesPlayed',
        'games_back': 'gamesBack',
        'wild_card_games_back': 'wildCardGamesBack',
        'league_games_back': 'leagueGamesBack',
        'spring_league_games_back': 'springLeagueGamesBack',
        'sport_games_back': 'sportGamesBack',
        'division_games_back': 'divisionGamesBack',
        'conference_games_back': 'conferenceGamesBack',
        'league_record': 'leagueRecord',
        'last_updated': 'lastUpdated',
        'records': 'records',
        'probabilites': 'probabilites',
        'points': 'points'
    }

    def __init__(self, copyright=None, team=None, division=None, conference=None, league=None, season=None, streak=None, clinch_indicator=None, division_rank=None, conference_rank=None, league_rank=None, spring_league_rank=None, wild_card_rank=None, sport_rank=None, games_played=None, games_back=None, wild_card_games_back=None, league_games_back=None, spring_league_games_back=None, sport_games_back=None, division_games_back=None, conference_games_back=None, league_record=None, last_updated=None, records=None, probabilites=None, points=None):  # noqa: E501
        """TeamStandingsRecordRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._team = None
        self._division = None
        self._conference = None
        self._league = None
        self._season = None
        self._streak = None
        self._clinch_indicator = None
        self._division_rank = None
        self._conference_rank = None
        self._league_rank = None
        self._spring_league_rank = None
        self._wild_card_rank = None
        self._sport_rank = None
        self._games_played = None
        self._games_back = None
        self._wild_card_games_back = None
        self._league_games_back = None
        self._spring_league_games_back = None
        self._sport_games_back = None
        self._division_games_back = None
        self._conference_games_back = None
        self._league_record = None
        self._last_updated = None
        self._records = None
        self._probabilites = None
        self._points = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if team is not None:
            self.team = team
        if division is not None:
            self.division = division
        if conference is not None:
            self.conference = conference
        if league is not None:
            self.league = league
        if season is not None:
            self.season = season
        if streak is not None:
            self.streak = streak
        if clinch_indicator is not None:
            self.clinch_indicator = clinch_indicator
        if division_rank is not None:
            self.division_rank = division_rank
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if league_rank is not None:
            self.league_rank = league_rank
        if spring_league_rank is not None:
            self.spring_league_rank = spring_league_rank
        if wild_card_rank is not None:
            self.wild_card_rank = wild_card_rank
        if sport_rank is not None:
            self.sport_rank = sport_rank
        if games_played is not None:
            self.games_played = games_played
        if games_back is not None:
            self.games_back = games_back
        if wild_card_games_back is not None:
            self.wild_card_games_back = wild_card_games_back
        if league_games_back is not None:
            self.league_games_back = league_games_back
        if spring_league_games_back is not None:
            self.spring_league_games_back = spring_league_games_back
        if sport_games_back is not None:
            self.sport_games_back = sport_games_back
        if division_games_back is not None:
            self.division_games_back = division_games_back
        if conference_games_back is not None:
            self.conference_games_back = conference_games_back
        if league_record is not None:
            self.league_record = league_record
        if last_updated is not None:
            self.last_updated = last_updated
        if records is not None:
            self.records = records
        if probabilites is not None:
            self.probabilites = probabilites
        if points is not None:
            self.points = points

    @property
    def copyright(self):
        """Gets the copyright of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The copyright of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this TeamStandingsRecordRestObject.


        :param copyright: The copyright of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def team(self):
        """Gets the team of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The team of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamStandingsRecordRestObject.


        :param team: The team of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def division(self):
        """Gets the division of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The division of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: Division
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this TeamStandingsRecordRestObject.


        :param division: The division of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: Division
        """

        self._division = division

    @property
    def conference(self):
        """Gets the conference of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The conference of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: Conference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamStandingsRecordRestObject.


        :param conference: The conference of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: Conference
        """

        self._conference = conference

    @property
    def league(self):
        """Gets the league of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The league of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this TeamStandingsRecordRestObject.


        :param league: The league of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def season(self):
        """Gets the season of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The season of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this TeamStandingsRecordRestObject.


        :param season: The season of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def streak(self):
        """Gets the streak of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The streak of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: StreakRestObject
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this TeamStandingsRecordRestObject.


        :param streak: The streak of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: StreakRestObject
        """

        self._streak = streak

    @property
    def clinch_indicator(self):
        """Gets the clinch_indicator of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The clinch_indicator of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._clinch_indicator

    @clinch_indicator.setter
    def clinch_indicator(self, clinch_indicator):
        """Sets the clinch_indicator of this TeamStandingsRecordRestObject.


        :param clinch_indicator: The clinch_indicator of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._clinch_indicator = clinch_indicator

    @property
    def division_rank(self):
        """Gets the division_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The division_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this TeamStandingsRecordRestObject.


        :param division_rank: The division_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._division_rank = division_rank

    @property
    def conference_rank(self):
        """Gets the conference_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The conference_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this TeamStandingsRecordRestObject.


        :param conference_rank: The conference_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._conference_rank = conference_rank

    @property
    def league_rank(self):
        """Gets the league_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The league_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._league_rank

    @league_rank.setter
    def league_rank(self, league_rank):
        """Sets the league_rank of this TeamStandingsRecordRestObject.


        :param league_rank: The league_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._league_rank = league_rank

    @property
    def spring_league_rank(self):
        """Gets the spring_league_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The spring_league_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._spring_league_rank

    @spring_league_rank.setter
    def spring_league_rank(self, spring_league_rank):
        """Sets the spring_league_rank of this TeamStandingsRecordRestObject.


        :param spring_league_rank: The spring_league_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._spring_league_rank = spring_league_rank

    @property
    def wild_card_rank(self):
        """Gets the wild_card_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The wild_card_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._wild_card_rank

    @wild_card_rank.setter
    def wild_card_rank(self, wild_card_rank):
        """Sets the wild_card_rank of this TeamStandingsRecordRestObject.


        :param wild_card_rank: The wild_card_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._wild_card_rank = wild_card_rank

    @property
    def sport_rank(self):
        """Gets the sport_rank of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The sport_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._sport_rank

    @sport_rank.setter
    def sport_rank(self, sport_rank):
        """Sets the sport_rank of this TeamStandingsRecordRestObject.


        :param sport_rank: The sport_rank of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._sport_rank = sport_rank

    @property
    def games_played(self):
        """Gets the games_played of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The games_played of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: int
        """
        return self._games_played

    @games_played.setter
    def games_played(self, games_played):
        """Sets the games_played of this TeamStandingsRecordRestObject.


        :param games_played: The games_played of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: int
        """

        self._games_played = games_played

    @property
    def games_back(self):
        """Gets the games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._games_back

    @games_back.setter
    def games_back(self, games_back):
        """Sets the games_back of this TeamStandingsRecordRestObject.


        :param games_back: The games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._games_back = games_back

    @property
    def wild_card_games_back(self):
        """Gets the wild_card_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The wild_card_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._wild_card_games_back

    @wild_card_games_back.setter
    def wild_card_games_back(self, wild_card_games_back):
        """Sets the wild_card_games_back of this TeamStandingsRecordRestObject.


        :param wild_card_games_back: The wild_card_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._wild_card_games_back = wild_card_games_back

    @property
    def league_games_back(self):
        """Gets the league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._league_games_back

    @league_games_back.setter
    def league_games_back(self, league_games_back):
        """Sets the league_games_back of this TeamStandingsRecordRestObject.


        :param league_games_back: The league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._league_games_back = league_games_back

    @property
    def spring_league_games_back(self):
        """Gets the spring_league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The spring_league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._spring_league_games_back

    @spring_league_games_back.setter
    def spring_league_games_back(self, spring_league_games_back):
        """Sets the spring_league_games_back of this TeamStandingsRecordRestObject.


        :param spring_league_games_back: The spring_league_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._spring_league_games_back = spring_league_games_back

    @property
    def sport_games_back(self):
        """Gets the sport_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The sport_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._sport_games_back

    @sport_games_back.setter
    def sport_games_back(self, sport_games_back):
        """Sets the sport_games_back of this TeamStandingsRecordRestObject.


        :param sport_games_back: The sport_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._sport_games_back = sport_games_back

    @property
    def division_games_back(self):
        """Gets the division_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The division_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._division_games_back

    @division_games_back.setter
    def division_games_back(self, division_games_back):
        """Sets the division_games_back of this TeamStandingsRecordRestObject.


        :param division_games_back: The division_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._division_games_back = division_games_back

    @property
    def conference_games_back(self):
        """Gets the conference_games_back of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The conference_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._conference_games_back

    @conference_games_back.setter
    def conference_games_back(self, conference_games_back):
        """Sets the conference_games_back of this TeamStandingsRecordRestObject.


        :param conference_games_back: The conference_games_back of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: str
        """

        self._conference_games_back = conference_games_back

    @property
    def league_record(self):
        """Gets the league_record of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The league_record of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: WinLossRecordRestObject
        """
        return self._league_record

    @league_record.setter
    def league_record(self, league_record):
        """Sets the league_record of this TeamStandingsRecordRestObject.


        :param league_record: The league_record of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: WinLossRecordRestObject
        """

        self._league_record = league_record

    @property
    def last_updated(self):
        """Gets the last_updated of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The last_updated of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this TeamStandingsRecordRestObject.


        :param last_updated: The last_updated of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def records(self):
        """Gets the records of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The records of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: dict(str, list[WinLossRecordRestObject])
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this TeamStandingsRecordRestObject.


        :param records: The records of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: dict(str, list[WinLossRecordRestObject])
        """

        self._records = records

    @property
    def probabilites(self):
        """Gets the probabilites of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The probabilites of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: StandingsOdds
        """
        return self._probabilites

    @probabilites.setter
    def probabilites(self, probabilites):
        """Sets the probabilites of this TeamStandingsRecordRestObject.


        :param probabilites: The probabilites of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: StandingsOdds
        """

        self._probabilites = probabilites

    @property
    def points(self):
        """Gets the points of this TeamStandingsRecordRestObject.  # noqa: E501


        :return: The points of this TeamStandingsRecordRestObject.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this TeamStandingsRecordRestObject.


        :param points: The points of this TeamStandingsRecordRestObject.  # noqa: E501
        :type: int
        """

        self._points = points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamStandingsRecordRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamStandingsRecordRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
