# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'note': 'str',
        'summary': 'dict(str, str)',
        'catchers_interference': 'int',
        'average': 'str',
        'on_base_percentage': 'str',
        'on_base_plus_slugging': 'str',
        'stolen_bases': 'int',
        'caught_stealing': 'int',
        'slugging': 'str',
        'outs': 'int',
        'gidp': 'int',
        'gitp': 'int',
        'home_runs': 'int',
        'number_of_pitches': 'int',
        'total_bases': 'int',
        'gidp_opportunites': 'int',
        'walks': 'int',
        'hit_by_pitch': 'int',
        'strikeouts': 'int',
        'air_outs': 'int',
        'go_ao': 'str',
        'pitches_per_plate_appearance': 'float',
        'intentional_walks': 'int',
        'ground_outs': 'int',
        'fly_outs': 'int',
        'games': 'int',
        'games_started': 'int',
        'doubles': 'int',
        'hits': 'int',
        'triples': 'int',
        'singles': 'int',
        'runs': 'int',
        'at_bats': 'int',
        'pickoffs': 'int',
        'stolen_base_percentage': 'str',
        'wild_pitches': 'int',
        'sac_flies': 'int',
        'sac_bunts': 'int',
        'putouts': 'int',
        'assists': 'int',
        'chances': 'int',
        'streak': 'int',
        'batting_order': 'str',
        'total_swings': 'int',
        'swings_and_misses': 'int',
        'balls_in_play': 'int',
        'pop_outs': 'int',
        'line_outs': 'int',
        'fly_hits': 'int',
        'pop_hits': 'int',
        'line_hits': 'int',
        'ground_hits': 'int',
        'games_played_on_both_teams': 'int',
        'outfield_assists': 'int',
        'errors': 'int',
        'fielding_percentage': 'str',
        'range_factor_per_game': 'str',
        'range_factor_per9_inn': 'str',
        'innings': 'str',
        'passed_ball': 'int',
        'double_plays': 'int',
        'triple_plays': 'int',
        'catcher_era': 'str',
        'throwing_errors': 'int',
        'uzr': 'float',
        'position': 'BaseballPosition',
        'plate_appearances': 'int',
        'pitches_per_plate_appearance_str': 'str',
        'stolen_base_percentage_or_null': 'str',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'note': 'note',
        'summary': 'summary',
        'catchers_interference': 'catchersInterference',
        'average': 'average',
        'on_base_percentage': 'onBasePercentage',
        'on_base_plus_slugging': 'onBasePlusSlugging',
        'stolen_bases': 'stolenBases',
        'caught_stealing': 'caughtStealing',
        'slugging': 'slugging',
        'outs': 'outs',
        'gidp': 'gidp',
        'gitp': 'gitp',
        'home_runs': 'homeRuns',
        'number_of_pitches': 'numberOfPitches',
        'total_bases': 'totalBases',
        'gidp_opportunites': 'gidpOpportunites',
        'walks': 'walks',
        'hit_by_pitch': 'hitByPitch',
        'strikeouts': 'strikeouts',
        'air_outs': 'airOuts',
        'go_ao': 'goAo',
        'pitches_per_plate_appearance': 'pitchesPerPlateAppearance',
        'intentional_walks': 'intentionalWalks',
        'ground_outs': 'groundOuts',
        'fly_outs': 'flyOuts',
        'games': 'games',
        'games_started': 'gamesStarted',
        'doubles': 'doubles',
        'hits': 'hits',
        'triples': 'triples',
        'singles': 'singles',
        'runs': 'runs',
        'at_bats': 'atBats',
        'pickoffs': 'pickoffs',
        'stolen_base_percentage': 'stolenBasePercentage',
        'wild_pitches': 'wildPitches',
        'sac_flies': 'sacFlies',
        'sac_bunts': 'sacBunts',
        'putouts': 'putouts',
        'assists': 'assists',
        'chances': 'chances',
        'streak': 'streak',
        'batting_order': 'battingOrder',
        'total_swings': 'totalSwings',
        'swings_and_misses': 'swingsAndMisses',
        'balls_in_play': 'ballsInPlay',
        'pop_outs': 'popOuts',
        'line_outs': 'lineOuts',
        'fly_hits': 'flyHits',
        'pop_hits': 'popHits',
        'line_hits': 'lineHits',
        'ground_hits': 'groundHits',
        'games_played_on_both_teams': 'gamesPlayedOnBothTeams',
        'outfield_assists': 'outfieldAssists',
        'errors': 'errors',
        'fielding_percentage': 'fieldingPercentage',
        'range_factor_per_game': 'rangeFactorPerGame',
        'range_factor_per9_inn': 'rangeFactorPer9Inn',
        'innings': 'innings',
        'passed_ball': 'passedBall',
        'double_plays': 'doublePlays',
        'triple_plays': 'triplePlays',
        'catcher_era': 'catcherERA',
        'throwing_errors': 'throwingErrors',
        'uzr': 'uzr',
        'position': 'position',
        'plate_appearances': 'plateAppearances',
        'pitches_per_plate_appearance_str': 'pitchesPerPlateAppearanceStr',
        'stolen_base_percentage_or_null': 'stolenBasePercentageOrNull',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, note=None, summary=None, catchers_interference=None, average=None, on_base_percentage=None, on_base_plus_slugging=None, stolen_bases=None, caught_stealing=None, slugging=None, outs=None, gidp=None, gitp=None, home_runs=None, number_of_pitches=None, total_bases=None, gidp_opportunites=None, walks=None, hit_by_pitch=None, strikeouts=None, air_outs=None, go_ao=None, pitches_per_plate_appearance=None, intentional_walks=None, ground_outs=None, fly_outs=None, games=None, games_started=None, doubles=None, hits=None, triples=None, singles=None, runs=None, at_bats=None, pickoffs=None, stolen_base_percentage=None, wild_pitches=None, sac_flies=None, sac_bunts=None, putouts=None, assists=None, chances=None, streak=None, batting_order=None, total_swings=None, swings_and_misses=None, balls_in_play=None, pop_outs=None, line_outs=None, fly_hits=None, pop_hits=None, line_hits=None, ground_hits=None, games_played_on_both_teams=None, outfield_assists=None, errors=None, fielding_percentage=None, range_factor_per_game=None, range_factor_per9_inn=None, innings=None, passed_ball=None, double_plays=None, triple_plays=None, catcher_era=None, throwing_errors=None, uzr=None, position=None, plate_appearances=None, pitches_per_plate_appearance_str=None, stolen_base_percentage_or_null=None, user_privileges=None):  # noqa: E501
        """FieldingData - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._note = None
        self._summary = None
        self._catchers_interference = None
        self._average = None
        self._on_base_percentage = None
        self._on_base_plus_slugging = None
        self._stolen_bases = None
        self._caught_stealing = None
        self._slugging = None
        self._outs = None
        self._gidp = None
        self._gitp = None
        self._home_runs = None
        self._number_of_pitches = None
        self._total_bases = None
        self._gidp_opportunites = None
        self._walks = None
        self._hit_by_pitch = None
        self._strikeouts = None
        self._air_outs = None
        self._go_ao = None
        self._pitches_per_plate_appearance = None
        self._intentional_walks = None
        self._ground_outs = None
        self._fly_outs = None
        self._games = None
        self._games_started = None
        self._doubles = None
        self._hits = None
        self._triples = None
        self._singles = None
        self._runs = None
        self._at_bats = None
        self._pickoffs = None
        self._stolen_base_percentage = None
        self._wild_pitches = None
        self._sac_flies = None
        self._sac_bunts = None
        self._putouts = None
        self._assists = None
        self._chances = None
        self._streak = None
        self._batting_order = None
        self._total_swings = None
        self._swings_and_misses = None
        self._balls_in_play = None
        self._pop_outs = None
        self._line_outs = None
        self._fly_hits = None
        self._pop_hits = None
        self._line_hits = None
        self._ground_hits = None
        self._games_played_on_both_teams = None
        self._outfield_assists = None
        self._errors = None
        self._fielding_percentage = None
        self._range_factor_per_game = None
        self._range_factor_per9_inn = None
        self._innings = None
        self._passed_ball = None
        self._double_plays = None
        self._triple_plays = None
        self._catcher_era = None
        self._throwing_errors = None
        self._uzr = None
        self._position = None
        self._plate_appearances = None
        self._pitches_per_plate_appearance_str = None
        self._stolen_base_percentage_or_null = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if note is not None:
            self.note = note
        if summary is not None:
            self.summary = summary
        if catchers_interference is not None:
            self.catchers_interference = catchers_interference
        if average is not None:
            self.average = average
        if on_base_percentage is not None:
            self.on_base_percentage = on_base_percentage
        if on_base_plus_slugging is not None:
            self.on_base_plus_slugging = on_base_plus_slugging
        if stolen_bases is not None:
            self.stolen_bases = stolen_bases
        if caught_stealing is not None:
            self.caught_stealing = caught_stealing
        if slugging is not None:
            self.slugging = slugging
        if outs is not None:
            self.outs = outs
        if gidp is not None:
            self.gidp = gidp
        if gitp is not None:
            self.gitp = gitp
        if home_runs is not None:
            self.home_runs = home_runs
        if number_of_pitches is not None:
            self.number_of_pitches = number_of_pitches
        if total_bases is not None:
            self.total_bases = total_bases
        if gidp_opportunites is not None:
            self.gidp_opportunites = gidp_opportunites
        if walks is not None:
            self.walks = walks
        if hit_by_pitch is not None:
            self.hit_by_pitch = hit_by_pitch
        if strikeouts is not None:
            self.strikeouts = strikeouts
        if air_outs is not None:
            self.air_outs = air_outs
        if go_ao is not None:
            self.go_ao = go_ao
        if pitches_per_plate_appearance is not None:
            self.pitches_per_plate_appearance = pitches_per_plate_appearance
        if intentional_walks is not None:
            self.intentional_walks = intentional_walks
        if ground_outs is not None:
            self.ground_outs = ground_outs
        if fly_outs is not None:
            self.fly_outs = fly_outs
        if games is not None:
            self.games = games
        if games_started is not None:
            self.games_started = games_started
        if doubles is not None:
            self.doubles = doubles
        if hits is not None:
            self.hits = hits
        if triples is not None:
            self.triples = triples
        if singles is not None:
            self.singles = singles
        if runs is not None:
            self.runs = runs
        if at_bats is not None:
            self.at_bats = at_bats
        if pickoffs is not None:
            self.pickoffs = pickoffs
        if stolen_base_percentage is not None:
            self.stolen_base_percentage = stolen_base_percentage
        if wild_pitches is not None:
            self.wild_pitches = wild_pitches
        if sac_flies is not None:
            self.sac_flies = sac_flies
        if sac_bunts is not None:
            self.sac_bunts = sac_bunts
        if putouts is not None:
            self.putouts = putouts
        if assists is not None:
            self.assists = assists
        if chances is not None:
            self.chances = chances
        if streak is not None:
            self.streak = streak
        if batting_order is not None:
            self.batting_order = batting_order
        if total_swings is not None:
            self.total_swings = total_swings
        if swings_and_misses is not None:
            self.swings_and_misses = swings_and_misses
        if balls_in_play is not None:
            self.balls_in_play = balls_in_play
        if pop_outs is not None:
            self.pop_outs = pop_outs
        if line_outs is not None:
            self.line_outs = line_outs
        if fly_hits is not None:
            self.fly_hits = fly_hits
        if pop_hits is not None:
            self.pop_hits = pop_hits
        if line_hits is not None:
            self.line_hits = line_hits
        if ground_hits is not None:
            self.ground_hits = ground_hits
        if games_played_on_both_teams is not None:
            self.games_played_on_both_teams = games_played_on_both_teams
        if outfield_assists is not None:
            self.outfield_assists = outfield_assists
        if errors is not None:
            self.errors = errors
        if fielding_percentage is not None:
            self.fielding_percentage = fielding_percentage
        if range_factor_per_game is not None:
            self.range_factor_per_game = range_factor_per_game
        if range_factor_per9_inn is not None:
            self.range_factor_per9_inn = range_factor_per9_inn
        if innings is not None:
            self.innings = innings
        if passed_ball is not None:
            self.passed_ball = passed_ball
        if double_plays is not None:
            self.double_plays = double_plays
        if triple_plays is not None:
            self.triple_plays = triple_plays
        if catcher_era is not None:
            self.catcher_era = catcher_era
        if throwing_errors is not None:
            self.throwing_errors = throwing_errors
        if uzr is not None:
            self.uzr = uzr
        if position is not None:
            self.position = position
        if plate_appearances is not None:
            self.plate_appearances = plate_appearances
        if pitches_per_plate_appearance_str is not None:
            self.pitches_per_plate_appearance_str = pitches_per_plate_appearance_str
        if stolen_base_percentage_or_null is not None:
            self.stolen_base_percentage_or_null = stolen_base_percentage_or_null
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this FieldingData.  # noqa: E501


        :return: The requesting_user_role of this FieldingData.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this FieldingData.


        :param requesting_user_role: The requesting_user_role of this FieldingData.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def note(self):
        """Gets the note of this FieldingData.  # noqa: E501


        :return: The note of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FieldingData.


        :param note: The note of this FieldingData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def summary(self):
        """Gets the summary of this FieldingData.  # noqa: E501


        :return: The summary of this FieldingData.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this FieldingData.


        :param summary: The summary of this FieldingData.  # noqa: E501
        :type: dict(str, str)
        """

        self._summary = summary

    @property
    def catchers_interference(self):
        """Gets the catchers_interference of this FieldingData.  # noqa: E501


        :return: The catchers_interference of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._catchers_interference

    @catchers_interference.setter
    def catchers_interference(self, catchers_interference):
        """Sets the catchers_interference of this FieldingData.


        :param catchers_interference: The catchers_interference of this FieldingData.  # noqa: E501
        :type: int
        """

        self._catchers_interference = catchers_interference

    @property
    def average(self):
        """Gets the average of this FieldingData.  # noqa: E501


        :return: The average of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this FieldingData.


        :param average: The average of this FieldingData.  # noqa: E501
        :type: str
        """

        self._average = average

    @property
    def on_base_percentage(self):
        """Gets the on_base_percentage of this FieldingData.  # noqa: E501


        :return: The on_base_percentage of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._on_base_percentage

    @on_base_percentage.setter
    def on_base_percentage(self, on_base_percentage):
        """Sets the on_base_percentage of this FieldingData.


        :param on_base_percentage: The on_base_percentage of this FieldingData.  # noqa: E501
        :type: str
        """

        self._on_base_percentage = on_base_percentage

    @property
    def on_base_plus_slugging(self):
        """Gets the on_base_plus_slugging of this FieldingData.  # noqa: E501


        :return: The on_base_plus_slugging of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._on_base_plus_slugging

    @on_base_plus_slugging.setter
    def on_base_plus_slugging(self, on_base_plus_slugging):
        """Sets the on_base_plus_slugging of this FieldingData.


        :param on_base_plus_slugging: The on_base_plus_slugging of this FieldingData.  # noqa: E501
        :type: str
        """

        self._on_base_plus_slugging = on_base_plus_slugging

    @property
    def stolen_bases(self):
        """Gets the stolen_bases of this FieldingData.  # noqa: E501


        :return: The stolen_bases of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._stolen_bases

    @stolen_bases.setter
    def stolen_bases(self, stolen_bases):
        """Sets the stolen_bases of this FieldingData.


        :param stolen_bases: The stolen_bases of this FieldingData.  # noqa: E501
        :type: int
        """

        self._stolen_bases = stolen_bases

    @property
    def caught_stealing(self):
        """Gets the caught_stealing of this FieldingData.  # noqa: E501


        :return: The caught_stealing of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._caught_stealing

    @caught_stealing.setter
    def caught_stealing(self, caught_stealing):
        """Sets the caught_stealing of this FieldingData.


        :param caught_stealing: The caught_stealing of this FieldingData.  # noqa: E501
        :type: int
        """

        self._caught_stealing = caught_stealing

    @property
    def slugging(self):
        """Gets the slugging of this FieldingData.  # noqa: E501


        :return: The slugging of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._slugging

    @slugging.setter
    def slugging(self, slugging):
        """Sets the slugging of this FieldingData.


        :param slugging: The slugging of this FieldingData.  # noqa: E501
        :type: str
        """

        self._slugging = slugging

    @property
    def outs(self):
        """Gets the outs of this FieldingData.  # noqa: E501


        :return: The outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this FieldingData.


        :param outs: The outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def gidp(self):
        """Gets the gidp of this FieldingData.  # noqa: E501


        :return: The gidp of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._gidp

    @gidp.setter
    def gidp(self, gidp):
        """Sets the gidp of this FieldingData.


        :param gidp: The gidp of this FieldingData.  # noqa: E501
        :type: int
        """

        self._gidp = gidp

    @property
    def gitp(self):
        """Gets the gitp of this FieldingData.  # noqa: E501


        :return: The gitp of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._gitp

    @gitp.setter
    def gitp(self, gitp):
        """Sets the gitp of this FieldingData.


        :param gitp: The gitp of this FieldingData.  # noqa: E501
        :type: int
        """

        self._gitp = gitp

    @property
    def home_runs(self):
        """Gets the home_runs of this FieldingData.  # noqa: E501


        :return: The home_runs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._home_runs

    @home_runs.setter
    def home_runs(self, home_runs):
        """Sets the home_runs of this FieldingData.


        :param home_runs: The home_runs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._home_runs = home_runs

    @property
    def number_of_pitches(self):
        """Gets the number_of_pitches of this FieldingData.  # noqa: E501


        :return: The number_of_pitches of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pitches

    @number_of_pitches.setter
    def number_of_pitches(self, number_of_pitches):
        """Sets the number_of_pitches of this FieldingData.


        :param number_of_pitches: The number_of_pitches of this FieldingData.  # noqa: E501
        :type: int
        """

        self._number_of_pitches = number_of_pitches

    @property
    def total_bases(self):
        """Gets the total_bases of this FieldingData.  # noqa: E501


        :return: The total_bases of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._total_bases

    @total_bases.setter
    def total_bases(self, total_bases):
        """Sets the total_bases of this FieldingData.


        :param total_bases: The total_bases of this FieldingData.  # noqa: E501
        :type: int
        """

        self._total_bases = total_bases

    @property
    def gidp_opportunites(self):
        """Gets the gidp_opportunites of this FieldingData.  # noqa: E501


        :return: The gidp_opportunites of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._gidp_opportunites

    @gidp_opportunites.setter
    def gidp_opportunites(self, gidp_opportunites):
        """Sets the gidp_opportunites of this FieldingData.


        :param gidp_opportunites: The gidp_opportunites of this FieldingData.  # noqa: E501
        :type: int
        """

        self._gidp_opportunites = gidp_opportunites

    @property
    def walks(self):
        """Gets the walks of this FieldingData.  # noqa: E501


        :return: The walks of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._walks

    @walks.setter
    def walks(self, walks):
        """Sets the walks of this FieldingData.


        :param walks: The walks of this FieldingData.  # noqa: E501
        :type: int
        """

        self._walks = walks

    @property
    def hit_by_pitch(self):
        """Gets the hit_by_pitch of this FieldingData.  # noqa: E501


        :return: The hit_by_pitch of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._hit_by_pitch

    @hit_by_pitch.setter
    def hit_by_pitch(self, hit_by_pitch):
        """Sets the hit_by_pitch of this FieldingData.


        :param hit_by_pitch: The hit_by_pitch of this FieldingData.  # noqa: E501
        :type: int
        """

        self._hit_by_pitch = hit_by_pitch

    @property
    def strikeouts(self):
        """Gets the strikeouts of this FieldingData.  # noqa: E501


        :return: The strikeouts of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._strikeouts

    @strikeouts.setter
    def strikeouts(self, strikeouts):
        """Sets the strikeouts of this FieldingData.


        :param strikeouts: The strikeouts of this FieldingData.  # noqa: E501
        :type: int
        """

        self._strikeouts = strikeouts

    @property
    def air_outs(self):
        """Gets the air_outs of this FieldingData.  # noqa: E501


        :return: The air_outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._air_outs

    @air_outs.setter
    def air_outs(self, air_outs):
        """Sets the air_outs of this FieldingData.


        :param air_outs: The air_outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._air_outs = air_outs

    @property
    def go_ao(self):
        """Gets the go_ao of this FieldingData.  # noqa: E501


        :return: The go_ao of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._go_ao

    @go_ao.setter
    def go_ao(self, go_ao):
        """Sets the go_ao of this FieldingData.


        :param go_ao: The go_ao of this FieldingData.  # noqa: E501
        :type: str
        """

        self._go_ao = go_ao

    @property
    def pitches_per_plate_appearance(self):
        """Gets the pitches_per_plate_appearance of this FieldingData.  # noqa: E501


        :return: The pitches_per_plate_appearance of this FieldingData.  # noqa: E501
        :rtype: float
        """
        return self._pitches_per_plate_appearance

    @pitches_per_plate_appearance.setter
    def pitches_per_plate_appearance(self, pitches_per_plate_appearance):
        """Sets the pitches_per_plate_appearance of this FieldingData.


        :param pitches_per_plate_appearance: The pitches_per_plate_appearance of this FieldingData.  # noqa: E501
        :type: float
        """

        self._pitches_per_plate_appearance = pitches_per_plate_appearance

    @property
    def intentional_walks(self):
        """Gets the intentional_walks of this FieldingData.  # noqa: E501


        :return: The intentional_walks of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._intentional_walks

    @intentional_walks.setter
    def intentional_walks(self, intentional_walks):
        """Sets the intentional_walks of this FieldingData.


        :param intentional_walks: The intentional_walks of this FieldingData.  # noqa: E501
        :type: int
        """

        self._intentional_walks = intentional_walks

    @property
    def ground_outs(self):
        """Gets the ground_outs of this FieldingData.  # noqa: E501


        :return: The ground_outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._ground_outs

    @ground_outs.setter
    def ground_outs(self, ground_outs):
        """Sets the ground_outs of this FieldingData.


        :param ground_outs: The ground_outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._ground_outs = ground_outs

    @property
    def fly_outs(self):
        """Gets the fly_outs of this FieldingData.  # noqa: E501


        :return: The fly_outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._fly_outs

    @fly_outs.setter
    def fly_outs(self, fly_outs):
        """Sets the fly_outs of this FieldingData.


        :param fly_outs: The fly_outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._fly_outs = fly_outs

    @property
    def games(self):
        """Gets the games of this FieldingData.  # noqa: E501


        :return: The games of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this FieldingData.


        :param games: The games of this FieldingData.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def games_started(self):
        """Gets the games_started of this FieldingData.  # noqa: E501


        :return: The games_started of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._games_started

    @games_started.setter
    def games_started(self, games_started):
        """Sets the games_started of this FieldingData.


        :param games_started: The games_started of this FieldingData.  # noqa: E501
        :type: int
        """

        self._games_started = games_started

    @property
    def doubles(self):
        """Gets the doubles of this FieldingData.  # noqa: E501


        :return: The doubles of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this FieldingData.


        :param doubles: The doubles of this FieldingData.  # noqa: E501
        :type: int
        """

        self._doubles = doubles

    @property
    def hits(self):
        """Gets the hits of this FieldingData.  # noqa: E501


        :return: The hits of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this FieldingData.


        :param hits: The hits of this FieldingData.  # noqa: E501
        :type: int
        """

        self._hits = hits

    @property
    def triples(self):
        """Gets the triples of this FieldingData.  # noqa: E501


        :return: The triples of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._triples

    @triples.setter
    def triples(self, triples):
        """Sets the triples of this FieldingData.


        :param triples: The triples of this FieldingData.  # noqa: E501
        :type: int
        """

        self._triples = triples

    @property
    def singles(self):
        """Gets the singles of this FieldingData.  # noqa: E501


        :return: The singles of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._singles

    @singles.setter
    def singles(self, singles):
        """Sets the singles of this FieldingData.


        :param singles: The singles of this FieldingData.  # noqa: E501
        :type: int
        """

        self._singles = singles

    @property
    def runs(self):
        """Gets the runs of this FieldingData.  # noqa: E501


        :return: The runs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this FieldingData.


        :param runs: The runs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._runs = runs

    @property
    def at_bats(self):
        """Gets the at_bats of this FieldingData.  # noqa: E501


        :return: The at_bats of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._at_bats

    @at_bats.setter
    def at_bats(self, at_bats):
        """Sets the at_bats of this FieldingData.


        :param at_bats: The at_bats of this FieldingData.  # noqa: E501
        :type: int
        """

        self._at_bats = at_bats

    @property
    def pickoffs(self):
        """Gets the pickoffs of this FieldingData.  # noqa: E501


        :return: The pickoffs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._pickoffs

    @pickoffs.setter
    def pickoffs(self, pickoffs):
        """Sets the pickoffs of this FieldingData.


        :param pickoffs: The pickoffs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._pickoffs = pickoffs

    @property
    def stolen_base_percentage(self):
        """Gets the stolen_base_percentage of this FieldingData.  # noqa: E501


        :return: The stolen_base_percentage of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._stolen_base_percentage

    @stolen_base_percentage.setter
    def stolen_base_percentage(self, stolen_base_percentage):
        """Sets the stolen_base_percentage of this FieldingData.


        :param stolen_base_percentage: The stolen_base_percentage of this FieldingData.  # noqa: E501
        :type: str
        """

        self._stolen_base_percentage = stolen_base_percentage

    @property
    def wild_pitches(self):
        """Gets the wild_pitches of this FieldingData.  # noqa: E501


        :return: The wild_pitches of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._wild_pitches

    @wild_pitches.setter
    def wild_pitches(self, wild_pitches):
        """Sets the wild_pitches of this FieldingData.


        :param wild_pitches: The wild_pitches of this FieldingData.  # noqa: E501
        :type: int
        """

        self._wild_pitches = wild_pitches

    @property
    def sac_flies(self):
        """Gets the sac_flies of this FieldingData.  # noqa: E501


        :return: The sac_flies of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._sac_flies

    @sac_flies.setter
    def sac_flies(self, sac_flies):
        """Sets the sac_flies of this FieldingData.


        :param sac_flies: The sac_flies of this FieldingData.  # noqa: E501
        :type: int
        """

        self._sac_flies = sac_flies

    @property
    def sac_bunts(self):
        """Gets the sac_bunts of this FieldingData.  # noqa: E501


        :return: The sac_bunts of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._sac_bunts

    @sac_bunts.setter
    def sac_bunts(self, sac_bunts):
        """Sets the sac_bunts of this FieldingData.


        :param sac_bunts: The sac_bunts of this FieldingData.  # noqa: E501
        :type: int
        """

        self._sac_bunts = sac_bunts

    @property
    def putouts(self):
        """Gets the putouts of this FieldingData.  # noqa: E501


        :return: The putouts of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._putouts

    @putouts.setter
    def putouts(self, putouts):
        """Sets the putouts of this FieldingData.


        :param putouts: The putouts of this FieldingData.  # noqa: E501
        :type: int
        """

        self._putouts = putouts

    @property
    def assists(self):
        """Gets the assists of this FieldingData.  # noqa: E501


        :return: The assists of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this FieldingData.


        :param assists: The assists of this FieldingData.  # noqa: E501
        :type: int
        """

        self._assists = assists

    @property
    def chances(self):
        """Gets the chances of this FieldingData.  # noqa: E501


        :return: The chances of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._chances

    @chances.setter
    def chances(self, chances):
        """Sets the chances of this FieldingData.


        :param chances: The chances of this FieldingData.  # noqa: E501
        :type: int
        """

        self._chances = chances

    @property
    def streak(self):
        """Gets the streak of this FieldingData.  # noqa: E501


        :return: The streak of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this FieldingData.


        :param streak: The streak of this FieldingData.  # noqa: E501
        :type: int
        """

        self._streak = streak

    @property
    def batting_order(self):
        """Gets the batting_order of this FieldingData.  # noqa: E501


        :return: The batting_order of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this FieldingData.


        :param batting_order: The batting_order of this FieldingData.  # noqa: E501
        :type: str
        """

        self._batting_order = batting_order

    @property
    def total_swings(self):
        """Gets the total_swings of this FieldingData.  # noqa: E501


        :return: The total_swings of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._total_swings

    @total_swings.setter
    def total_swings(self, total_swings):
        """Sets the total_swings of this FieldingData.


        :param total_swings: The total_swings of this FieldingData.  # noqa: E501
        :type: int
        """

        self._total_swings = total_swings

    @property
    def swings_and_misses(self):
        """Gets the swings_and_misses of this FieldingData.  # noqa: E501


        :return: The swings_and_misses of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._swings_and_misses

    @swings_and_misses.setter
    def swings_and_misses(self, swings_and_misses):
        """Sets the swings_and_misses of this FieldingData.


        :param swings_and_misses: The swings_and_misses of this FieldingData.  # noqa: E501
        :type: int
        """

        self._swings_and_misses = swings_and_misses

    @property
    def balls_in_play(self):
        """Gets the balls_in_play of this FieldingData.  # noqa: E501


        :return: The balls_in_play of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._balls_in_play

    @balls_in_play.setter
    def balls_in_play(self, balls_in_play):
        """Sets the balls_in_play of this FieldingData.


        :param balls_in_play: The balls_in_play of this FieldingData.  # noqa: E501
        :type: int
        """

        self._balls_in_play = balls_in_play

    @property
    def pop_outs(self):
        """Gets the pop_outs of this FieldingData.  # noqa: E501


        :return: The pop_outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._pop_outs

    @pop_outs.setter
    def pop_outs(self, pop_outs):
        """Sets the pop_outs of this FieldingData.


        :param pop_outs: The pop_outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._pop_outs = pop_outs

    @property
    def line_outs(self):
        """Gets the line_outs of this FieldingData.  # noqa: E501


        :return: The line_outs of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._line_outs

    @line_outs.setter
    def line_outs(self, line_outs):
        """Sets the line_outs of this FieldingData.


        :param line_outs: The line_outs of this FieldingData.  # noqa: E501
        :type: int
        """

        self._line_outs = line_outs

    @property
    def fly_hits(self):
        """Gets the fly_hits of this FieldingData.  # noqa: E501


        :return: The fly_hits of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._fly_hits

    @fly_hits.setter
    def fly_hits(self, fly_hits):
        """Sets the fly_hits of this FieldingData.


        :param fly_hits: The fly_hits of this FieldingData.  # noqa: E501
        :type: int
        """

        self._fly_hits = fly_hits

    @property
    def pop_hits(self):
        """Gets the pop_hits of this FieldingData.  # noqa: E501


        :return: The pop_hits of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._pop_hits

    @pop_hits.setter
    def pop_hits(self, pop_hits):
        """Sets the pop_hits of this FieldingData.


        :param pop_hits: The pop_hits of this FieldingData.  # noqa: E501
        :type: int
        """

        self._pop_hits = pop_hits

    @property
    def line_hits(self):
        """Gets the line_hits of this FieldingData.  # noqa: E501


        :return: The line_hits of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._line_hits

    @line_hits.setter
    def line_hits(self, line_hits):
        """Sets the line_hits of this FieldingData.


        :param line_hits: The line_hits of this FieldingData.  # noqa: E501
        :type: int
        """

        self._line_hits = line_hits

    @property
    def ground_hits(self):
        """Gets the ground_hits of this FieldingData.  # noqa: E501


        :return: The ground_hits of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._ground_hits

    @ground_hits.setter
    def ground_hits(self, ground_hits):
        """Sets the ground_hits of this FieldingData.


        :param ground_hits: The ground_hits of this FieldingData.  # noqa: E501
        :type: int
        """

        self._ground_hits = ground_hits

    @property
    def games_played_on_both_teams(self):
        """Gets the games_played_on_both_teams of this FieldingData.  # noqa: E501


        :return: The games_played_on_both_teams of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._games_played_on_both_teams

    @games_played_on_both_teams.setter
    def games_played_on_both_teams(self, games_played_on_both_teams):
        """Sets the games_played_on_both_teams of this FieldingData.


        :param games_played_on_both_teams: The games_played_on_both_teams of this FieldingData.  # noqa: E501
        :type: int
        """

        self._games_played_on_both_teams = games_played_on_both_teams

    @property
    def outfield_assists(self):
        """Gets the outfield_assists of this FieldingData.  # noqa: E501


        :return: The outfield_assists of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._outfield_assists

    @outfield_assists.setter
    def outfield_assists(self, outfield_assists):
        """Sets the outfield_assists of this FieldingData.


        :param outfield_assists: The outfield_assists of this FieldingData.  # noqa: E501
        :type: int
        """

        self._outfield_assists = outfield_assists

    @property
    def errors(self):
        """Gets the errors of this FieldingData.  # noqa: E501


        :return: The errors of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this FieldingData.


        :param errors: The errors of this FieldingData.  # noqa: E501
        :type: int
        """

        self._errors = errors

    @property
    def fielding_percentage(self):
        """Gets the fielding_percentage of this FieldingData.  # noqa: E501


        :return: The fielding_percentage of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._fielding_percentage

    @fielding_percentage.setter
    def fielding_percentage(self, fielding_percentage):
        """Sets the fielding_percentage of this FieldingData.


        :param fielding_percentage: The fielding_percentage of this FieldingData.  # noqa: E501
        :type: str
        """

        self._fielding_percentage = fielding_percentage

    @property
    def range_factor_per_game(self):
        """Gets the range_factor_per_game of this FieldingData.  # noqa: E501


        :return: The range_factor_per_game of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._range_factor_per_game

    @range_factor_per_game.setter
    def range_factor_per_game(self, range_factor_per_game):
        """Sets the range_factor_per_game of this FieldingData.


        :param range_factor_per_game: The range_factor_per_game of this FieldingData.  # noqa: E501
        :type: str
        """

        self._range_factor_per_game = range_factor_per_game

    @property
    def range_factor_per9_inn(self):
        """Gets the range_factor_per9_inn of this FieldingData.  # noqa: E501


        :return: The range_factor_per9_inn of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._range_factor_per9_inn

    @range_factor_per9_inn.setter
    def range_factor_per9_inn(self, range_factor_per9_inn):
        """Sets the range_factor_per9_inn of this FieldingData.


        :param range_factor_per9_inn: The range_factor_per9_inn of this FieldingData.  # noqa: E501
        :type: str
        """

        self._range_factor_per9_inn = range_factor_per9_inn

    @property
    def innings(self):
        """Gets the innings of this FieldingData.  # noqa: E501


        :return: The innings of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._innings

    @innings.setter
    def innings(self, innings):
        """Sets the innings of this FieldingData.


        :param innings: The innings of this FieldingData.  # noqa: E501
        :type: str
        """

        self._innings = innings

    @property
    def passed_ball(self):
        """Gets the passed_ball of this FieldingData.  # noqa: E501


        :return: The passed_ball of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._passed_ball

    @passed_ball.setter
    def passed_ball(self, passed_ball):
        """Sets the passed_ball of this FieldingData.


        :param passed_ball: The passed_ball of this FieldingData.  # noqa: E501
        :type: int
        """

        self._passed_ball = passed_ball

    @property
    def double_plays(self):
        """Gets the double_plays of this FieldingData.  # noqa: E501


        :return: The double_plays of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._double_plays

    @double_plays.setter
    def double_plays(self, double_plays):
        """Sets the double_plays of this FieldingData.


        :param double_plays: The double_plays of this FieldingData.  # noqa: E501
        :type: int
        """

        self._double_plays = double_plays

    @property
    def triple_plays(self):
        """Gets the triple_plays of this FieldingData.  # noqa: E501


        :return: The triple_plays of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._triple_plays

    @triple_plays.setter
    def triple_plays(self, triple_plays):
        """Sets the triple_plays of this FieldingData.


        :param triple_plays: The triple_plays of this FieldingData.  # noqa: E501
        :type: int
        """

        self._triple_plays = triple_plays

    @property
    def catcher_era(self):
        """Gets the catcher_era of this FieldingData.  # noqa: E501


        :return: The catcher_era of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._catcher_era

    @catcher_era.setter
    def catcher_era(self, catcher_era):
        """Sets the catcher_era of this FieldingData.


        :param catcher_era: The catcher_era of this FieldingData.  # noqa: E501
        :type: str
        """

        self._catcher_era = catcher_era

    @property
    def throwing_errors(self):
        """Gets the throwing_errors of this FieldingData.  # noqa: E501


        :return: The throwing_errors of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._throwing_errors

    @throwing_errors.setter
    def throwing_errors(self, throwing_errors):
        """Sets the throwing_errors of this FieldingData.


        :param throwing_errors: The throwing_errors of this FieldingData.  # noqa: E501
        :type: int
        """

        self._throwing_errors = throwing_errors

    @property
    def uzr(self):
        """Gets the uzr of this FieldingData.  # noqa: E501


        :return: The uzr of this FieldingData.  # noqa: E501
        :rtype: float
        """
        return self._uzr

    @uzr.setter
    def uzr(self, uzr):
        """Sets the uzr of this FieldingData.


        :param uzr: The uzr of this FieldingData.  # noqa: E501
        :type: float
        """

        self._uzr = uzr

    @property
    def position(self):
        """Gets the position of this FieldingData.  # noqa: E501


        :return: The position of this FieldingData.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this FieldingData.


        :param position: The position of this FieldingData.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def plate_appearances(self):
        """Gets the plate_appearances of this FieldingData.  # noqa: E501


        :return: The plate_appearances of this FieldingData.  # noqa: E501
        :rtype: int
        """
        return self._plate_appearances

    @plate_appearances.setter
    def plate_appearances(self, plate_appearances):
        """Sets the plate_appearances of this FieldingData.


        :param plate_appearances: The plate_appearances of this FieldingData.  # noqa: E501
        :type: int
        """

        self._plate_appearances = plate_appearances

    @property
    def pitches_per_plate_appearance_str(self):
        """Gets the pitches_per_plate_appearance_str of this FieldingData.  # noqa: E501


        :return: The pitches_per_plate_appearance_str of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._pitches_per_plate_appearance_str

    @pitches_per_plate_appearance_str.setter
    def pitches_per_plate_appearance_str(self, pitches_per_plate_appearance_str):
        """Sets the pitches_per_plate_appearance_str of this FieldingData.


        :param pitches_per_plate_appearance_str: The pitches_per_plate_appearance_str of this FieldingData.  # noqa: E501
        :type: str
        """

        self._pitches_per_plate_appearance_str = pitches_per_plate_appearance_str

    @property
    def stolen_base_percentage_or_null(self):
        """Gets the stolen_base_percentage_or_null of this FieldingData.  # noqa: E501


        :return: The stolen_base_percentage_or_null of this FieldingData.  # noqa: E501
        :rtype: str
        """
        return self._stolen_base_percentage_or_null

    @stolen_base_percentage_or_null.setter
    def stolen_base_percentage_or_null(self, stolen_base_percentage_or_null):
        """Sets the stolen_base_percentage_or_null of this FieldingData.


        :param stolen_base_percentage_or_null: The stolen_base_percentage_or_null of this FieldingData.  # noqa: E501
        :type: str
        """

        self._stolen_base_percentage_or_null = stolen_base_percentage_or_null

    @property
    def user_privileges(self):
        """Gets the user_privileges of this FieldingData.  # noqa: E501


        :return: The user_privileges of this FieldingData.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this FieldingData.


        :param user_privileges: The user_privileges of this FieldingData.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
