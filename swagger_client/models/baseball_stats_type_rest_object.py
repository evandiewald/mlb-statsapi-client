# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballStatsTypeRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'lookup_param': 'str',
        'is_counting': 'bool',
        'label': 'str',
        'stat_groups': 'list[StatGroup]',
        'org_types': 'list[OrganizationType]',
        'high_low_types': 'list[HighLowTypeEnum]',
        'streak_levels': 'list[StreakLevelEnum]'
    }

    attribute_map = {
        'name': 'name',
        'lookup_param': 'lookupParam',
        'is_counting': 'isCounting',
        'label': 'label',
        'stat_groups': 'statGroups',
        'org_types': 'orgTypes',
        'high_low_types': 'highLowTypes',
        'streak_levels': 'streakLevels'
    }

    def __init__(self, name=None, lookup_param=None, is_counting=None, label=None, stat_groups=None, org_types=None, high_low_types=None, streak_levels=None):  # noqa: E501
        """BaseballStatsTypeRestObject - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._lookup_param = None
        self._is_counting = None
        self._label = None
        self._stat_groups = None
        self._org_types = None
        self._high_low_types = None
        self._streak_levels = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if lookup_param is not None:
            self.lookup_param = lookup_param
        if is_counting is not None:
            self.is_counting = is_counting
        if label is not None:
            self.label = label
        if stat_groups is not None:
            self.stat_groups = stat_groups
        if org_types is not None:
            self.org_types = org_types
        if high_low_types is not None:
            self.high_low_types = high_low_types
        if streak_levels is not None:
            self.streak_levels = streak_levels

    @property
    def name(self):
        """Gets the name of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The name of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseballStatsTypeRestObject.


        :param name: The name of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lookup_param(self):
        """Gets the lookup_param of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The lookup_param of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._lookup_param

    @lookup_param.setter
    def lookup_param(self, lookup_param):
        """Sets the lookup_param of this BaseballStatsTypeRestObject.


        :param lookup_param: The lookup_param of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: str
        """

        self._lookup_param = lookup_param

    @property
    def is_counting(self):
        """Gets the is_counting of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The is_counting of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_counting

    @is_counting.setter
    def is_counting(self, is_counting):
        """Sets the is_counting of this BaseballStatsTypeRestObject.


        :param is_counting: The is_counting of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: bool
        """

        self._is_counting = is_counting

    @property
    def label(self):
        """Gets the label of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The label of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BaseballStatsTypeRestObject.


        :param label: The label of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def stat_groups(self):
        """Gets the stat_groups of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The stat_groups of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: list[StatGroup]
        """
        return self._stat_groups

    @stat_groups.setter
    def stat_groups(self, stat_groups):
        """Sets the stat_groups of this BaseballStatsTypeRestObject.


        :param stat_groups: The stat_groups of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: list[StatGroup]
        """

        self._stat_groups = stat_groups

    @property
    def org_types(self):
        """Gets the org_types of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The org_types of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: list[OrganizationType]
        """
        return self._org_types

    @org_types.setter
    def org_types(self, org_types):
        """Sets the org_types of this BaseballStatsTypeRestObject.


        :param org_types: The org_types of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: list[OrganizationType]
        """

        self._org_types = org_types

    @property
    def high_low_types(self):
        """Gets the high_low_types of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The high_low_types of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: list[HighLowTypeEnum]
        """
        return self._high_low_types

    @high_low_types.setter
    def high_low_types(self, high_low_types):
        """Sets the high_low_types of this BaseballStatsTypeRestObject.


        :param high_low_types: The high_low_types of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: list[HighLowTypeEnum]
        """

        self._high_low_types = high_low_types

    @property
    def streak_levels(self):
        """Gets the streak_levels of this BaseballStatsTypeRestObject.  # noqa: E501


        :return: The streak_levels of this BaseballStatsTypeRestObject.  # noqa: E501
        :rtype: list[StreakLevelEnum]
        """
        return self._streak_levels

    @streak_levels.setter
    def streak_levels(self, streak_levels):
        """Sets the streak_levels of this BaseballStatsTypeRestObject.


        :param streak_levels: The streak_levels of this BaseballStatsTypeRestObject.  # noqa: E501
        :type: list[StreakLevelEnum]
        """

        self._streak_levels = streak_levels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballStatsTypeRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballStatsTypeRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
