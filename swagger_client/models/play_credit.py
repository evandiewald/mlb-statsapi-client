# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayCredit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'person': 'BaseballPerson',
        'credit': 'str',
        'position': 'BaseballPosition',
        'detail': 'GameEventDetailTO',
        'fielder_stat': 'FielderDetailType',
        'batter_stat': 'BatterDetailType',
        'pitcher_stat': 'PitcherDetailType',
        'runner_stat': 'RunnerDetailType'
    }

    attribute_map = {
        'person': 'person',
        'credit': 'credit',
        'position': 'position',
        'detail': 'detail',
        'fielder_stat': 'fielderStat',
        'batter_stat': 'batterStat',
        'pitcher_stat': 'pitcherStat',
        'runner_stat': 'runnerStat'
    }

    def __init__(self, person=None, credit=None, position=None, detail=None, fielder_stat=None, batter_stat=None, pitcher_stat=None, runner_stat=None):  # noqa: E501
        """PlayCredit - a model defined in Swagger"""  # noqa: E501
        self._person = None
        self._credit = None
        self._position = None
        self._detail = None
        self._fielder_stat = None
        self._batter_stat = None
        self._pitcher_stat = None
        self._runner_stat = None
        self.discriminator = None
        if person is not None:
            self.person = person
        if credit is not None:
            self.credit = credit
        if position is not None:
            self.position = position
        if detail is not None:
            self.detail = detail
        if fielder_stat is not None:
            self.fielder_stat = fielder_stat
        if batter_stat is not None:
            self.batter_stat = batter_stat
        if pitcher_stat is not None:
            self.pitcher_stat = pitcher_stat
        if runner_stat is not None:
            self.runner_stat = runner_stat

    @property
    def person(self):
        """Gets the person of this PlayCredit.  # noqa: E501


        :return: The person of this PlayCredit.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this PlayCredit.


        :param person: The person of this PlayCredit.  # noqa: E501
        :type: BaseballPerson
        """

        self._person = person

    @property
    def credit(self):
        """Gets the credit of this PlayCredit.  # noqa: E501


        :return: The credit of this PlayCredit.  # noqa: E501
        :rtype: str
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this PlayCredit.


        :param credit: The credit of this PlayCredit.  # noqa: E501
        :type: str
        """

        self._credit = credit

    @property
    def position(self):
        """Gets the position of this PlayCredit.  # noqa: E501


        :return: The position of this PlayCredit.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayCredit.


        :param position: The position of this PlayCredit.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def detail(self):
        """Gets the detail of this PlayCredit.  # noqa: E501


        :return: The detail of this PlayCredit.  # noqa: E501
        :rtype: GameEventDetailTO
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this PlayCredit.


        :param detail: The detail of this PlayCredit.  # noqa: E501
        :type: GameEventDetailTO
        """

        self._detail = detail

    @property
    def fielder_stat(self):
        """Gets the fielder_stat of this PlayCredit.  # noqa: E501


        :return: The fielder_stat of this PlayCredit.  # noqa: E501
        :rtype: FielderDetailType
        """
        return self._fielder_stat

    @fielder_stat.setter
    def fielder_stat(self, fielder_stat):
        """Sets the fielder_stat of this PlayCredit.


        :param fielder_stat: The fielder_stat of this PlayCredit.  # noqa: E501
        :type: FielderDetailType
        """

        self._fielder_stat = fielder_stat

    @property
    def batter_stat(self):
        """Gets the batter_stat of this PlayCredit.  # noqa: E501


        :return: The batter_stat of this PlayCredit.  # noqa: E501
        :rtype: BatterDetailType
        """
        return self._batter_stat

    @batter_stat.setter
    def batter_stat(self, batter_stat):
        """Sets the batter_stat of this PlayCredit.


        :param batter_stat: The batter_stat of this PlayCredit.  # noqa: E501
        :type: BatterDetailType
        """

        self._batter_stat = batter_stat

    @property
    def pitcher_stat(self):
        """Gets the pitcher_stat of this PlayCredit.  # noqa: E501


        :return: The pitcher_stat of this PlayCredit.  # noqa: E501
        :rtype: PitcherDetailType
        """
        return self._pitcher_stat

    @pitcher_stat.setter
    def pitcher_stat(self, pitcher_stat):
        """Sets the pitcher_stat of this PlayCredit.


        :param pitcher_stat: The pitcher_stat of this PlayCredit.  # noqa: E501
        :type: PitcherDetailType
        """

        self._pitcher_stat = pitcher_stat

    @property
    def runner_stat(self):
        """Gets the runner_stat of this PlayCredit.  # noqa: E501


        :return: The runner_stat of this PlayCredit.  # noqa: E501
        :rtype: RunnerDetailType
        """
        return self._runner_stat

    @runner_stat.setter
    def runner_stat(self, runner_stat):
        """Sets the runner_stat of this PlayCredit.


        :param runner_stat: The runner_stat of this PlayCredit.  # noqa: E501
        :type: RunnerDetailType
        """

        self._runner_stat = runner_stat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayCredit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayCredit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
