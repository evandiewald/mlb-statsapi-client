# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballDefenseRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'pitcher': 'BaseballPersonRestObject',
        'catcher': 'BaseballPersonRestObject',
        'first': 'BaseballPersonRestObject',
        'second': 'BaseballPersonRestObject',
        'third': 'BaseballPersonRestObject',
        'shortstop': 'BaseballPersonRestObject',
        'left': 'BaseballPersonRestObject',
        'center': 'BaseballPersonRestObject',
        'right': 'BaseballPersonRestObject',
        'batter': 'BaseballPersonRestObject',
        'on_deck': 'BaseballPersonRestObject',
        'in_hole': 'BaseballPersonRestObject',
        'batting_order': 'int',
        'team': 'BaseballTeamRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'pitcher': 'pitcher',
        'catcher': 'catcher',
        'first': 'first',
        'second': 'second',
        'third': 'third',
        'shortstop': 'shortstop',
        'left': 'left',
        'center': 'center',
        'right': 'right',
        'batter': 'batter',
        'on_deck': 'onDeck',
        'in_hole': 'inHole',
        'batting_order': 'battingOrder',
        'team': 'team'
    }

    def __init__(self, copyright=None, pitcher=None, catcher=None, first=None, second=None, third=None, shortstop=None, left=None, center=None, right=None, batter=None, on_deck=None, in_hole=None, batting_order=None, team=None):  # noqa: E501
        """BaseballDefenseRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._pitcher = None
        self._catcher = None
        self._first = None
        self._second = None
        self._third = None
        self._shortstop = None
        self._left = None
        self._center = None
        self._right = None
        self._batter = None
        self._on_deck = None
        self._in_hole = None
        self._batting_order = None
        self._team = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if pitcher is not None:
            self.pitcher = pitcher
        if catcher is not None:
            self.catcher = catcher
        if first is not None:
            self.first = first
        if second is not None:
            self.second = second
        if third is not None:
            self.third = third
        if shortstop is not None:
            self.shortstop = shortstop
        if left is not None:
            self.left = left
        if center is not None:
            self.center = center
        if right is not None:
            self.right = right
        if batter is not None:
            self.batter = batter
        if on_deck is not None:
            self.on_deck = on_deck
        if in_hole is not None:
            self.in_hole = in_hole
        if batting_order is not None:
            self.batting_order = batting_order
        if team is not None:
            self.team = team

    @property
    def copyright(self):
        """Gets the copyright of this BaseballDefenseRestObject.  # noqa: E501


        :return: The copyright of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballDefenseRestObject.


        :param copyright: The copyright of this BaseballDefenseRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def pitcher(self):
        """Gets the pitcher of this BaseballDefenseRestObject.  # noqa: E501


        :return: The pitcher of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this BaseballDefenseRestObject.


        :param pitcher: The pitcher of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._pitcher = pitcher

    @property
    def catcher(self):
        """Gets the catcher of this BaseballDefenseRestObject.  # noqa: E501


        :return: The catcher of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._catcher

    @catcher.setter
    def catcher(self, catcher):
        """Sets the catcher of this BaseballDefenseRestObject.


        :param catcher: The catcher of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._catcher = catcher

    @property
    def first(self):
        """Gets the first of this BaseballDefenseRestObject.  # noqa: E501


        :return: The first of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this BaseballDefenseRestObject.


        :param first: The first of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._first = first

    @property
    def second(self):
        """Gets the second of this BaseballDefenseRestObject.  # noqa: E501


        :return: The second of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this BaseballDefenseRestObject.


        :param second: The second of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._second = second

    @property
    def third(self):
        """Gets the third of this BaseballDefenseRestObject.  # noqa: E501


        :return: The third of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._third

    @third.setter
    def third(self, third):
        """Sets the third of this BaseballDefenseRestObject.


        :param third: The third of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._third = third

    @property
    def shortstop(self):
        """Gets the shortstop of this BaseballDefenseRestObject.  # noqa: E501


        :return: The shortstop of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._shortstop

    @shortstop.setter
    def shortstop(self, shortstop):
        """Sets the shortstop of this BaseballDefenseRestObject.


        :param shortstop: The shortstop of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._shortstop = shortstop

    @property
    def left(self):
        """Gets the left of this BaseballDefenseRestObject.  # noqa: E501


        :return: The left of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this BaseballDefenseRestObject.


        :param left: The left of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._left = left

    @property
    def center(self):
        """Gets the center of this BaseballDefenseRestObject.  # noqa: E501


        :return: The center of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this BaseballDefenseRestObject.


        :param center: The center of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._center = center

    @property
    def right(self):
        """Gets the right of this BaseballDefenseRestObject.  # noqa: E501


        :return: The right of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this BaseballDefenseRestObject.


        :param right: The right of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._right = right

    @property
    def batter(self):
        """Gets the batter of this BaseballDefenseRestObject.  # noqa: E501


        :return: The batter of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this BaseballDefenseRestObject.


        :param batter: The batter of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._batter = batter

    @property
    def on_deck(self):
        """Gets the on_deck of this BaseballDefenseRestObject.  # noqa: E501


        :return: The on_deck of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._on_deck

    @on_deck.setter
    def on_deck(self, on_deck):
        """Sets the on_deck of this BaseballDefenseRestObject.


        :param on_deck: The on_deck of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._on_deck = on_deck

    @property
    def in_hole(self):
        """Gets the in_hole of this BaseballDefenseRestObject.  # noqa: E501


        :return: The in_hole of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._in_hole

    @in_hole.setter
    def in_hole(self, in_hole):
        """Sets the in_hole of this BaseballDefenseRestObject.


        :param in_hole: The in_hole of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._in_hole = in_hole

    @property
    def batting_order(self):
        """Gets the batting_order of this BaseballDefenseRestObject.  # noqa: E501


        :return: The batting_order of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: int
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this BaseballDefenseRestObject.


        :param batting_order: The batting_order of this BaseballDefenseRestObject.  # noqa: E501
        :type: int
        """

        self._batting_order = batting_order

    @property
    def team(self):
        """Gets the team of this BaseballDefenseRestObject.  # noqa: E501


        :return: The team of this BaseballDefenseRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballDefenseRestObject.


        :param team: The team of this BaseballDefenseRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballDefenseRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballDefenseRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
