# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatSplits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'season': 'str',
        'stat': 'StatData',
        'stats': 'GroupedStatData',
        'game_type': 'GameTypeEnum',
        'team': 'BaseballTeam',
        'player': 'BaseballPerson',
        'home_team': 'BaseballTeam',
        'away_team': 'BaseballTeam',
        'num_teams': 'int',
        'num_occurrences': 'int',
        'rank': 'int',
        'league': 'League',
        'sport': 'Sport',
        'opponent': 'BaseballTeam',
        'venue': 'Venue',
        'game': 'BaseballScheduleItem',
        '_date': 'date',
        'last_date_played': 'date',
        'game_number': 'int',
        'split': 'DynamicLookupEnum',
        'game_pk': 'int',
        'day_of_the_week': 'int',
        'month': 'int',
        'opposing_division': 'Division',
        'opposing_conference': 'Conference',
        'is_home': 'bool',
        'is_win': 'bool',
        'type': 'StatType',
        'group': 'StatGroup',
        'position': 'BaseballPosition',
        'game_innings': 'int',
        'exemption': 'PlayerListPerson',
        'num_leagues': 'int',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'season': 'season',
        'stat': 'stat',
        'stats': 'stats',
        'game_type': 'gameType',
        'team': 'team',
        'player': 'player',
        'home_team': 'homeTeam',
        'away_team': 'awayTeam',
        'num_teams': 'numTeams',
        'num_occurrences': 'numOccurrences',
        'rank': 'rank',
        'league': 'league',
        'sport': 'sport',
        'opponent': 'opponent',
        'venue': 'venue',
        'game': 'game',
        '_date': 'date',
        'last_date_played': 'lastDatePlayed',
        'game_number': 'gameNumber',
        'split': 'split',
        'game_pk': 'gamePk',
        'day_of_the_week': 'dayOfTheWeek',
        'month': 'month',
        'opposing_division': 'opposingDivision',
        'opposing_conference': 'opposingConference',
        'is_home': 'isHome',
        'is_win': 'isWin',
        'type': 'type',
        'group': 'group',
        'position': 'position',
        'game_innings': 'gameInnings',
        'exemption': 'exemption',
        'num_leagues': 'numLeagues',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, season=None, stat=None, stats=None, game_type=None, team=None, player=None, home_team=None, away_team=None, num_teams=None, num_occurrences=None, rank=None, league=None, sport=None, opponent=None, venue=None, game=None, _date=None, last_date_played=None, game_number=None, split=None, game_pk=None, day_of_the_week=None, month=None, opposing_division=None, opposing_conference=None, is_home=None, is_win=None, type=None, group=None, position=None, game_innings=None, exemption=None, num_leagues=None, user_privileges=None):  # noqa: E501
        """StatSplits - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._season = None
        self._stat = None
        self._stats = None
        self._game_type = None
        self._team = None
        self._player = None
        self._home_team = None
        self._away_team = None
        self._num_teams = None
        self._num_occurrences = None
        self._rank = None
        self._league = None
        self._sport = None
        self._opponent = None
        self._venue = None
        self._game = None
        self.__date = None
        self._last_date_played = None
        self._game_number = None
        self._split = None
        self._game_pk = None
        self._day_of_the_week = None
        self._month = None
        self._opposing_division = None
        self._opposing_conference = None
        self._is_home = None
        self._is_win = None
        self._type = None
        self._group = None
        self._position = None
        self._game_innings = None
        self._exemption = None
        self._num_leagues = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if season is not None:
            self.season = season
        if stat is not None:
            self.stat = stat
        if stats is not None:
            self.stats = stats
        if game_type is not None:
            self.game_type = game_type
        if team is not None:
            self.team = team
        if player is not None:
            self.player = player
        if home_team is not None:
            self.home_team = home_team
        if away_team is not None:
            self.away_team = away_team
        if num_teams is not None:
            self.num_teams = num_teams
        if num_occurrences is not None:
            self.num_occurrences = num_occurrences
        if rank is not None:
            self.rank = rank
        if league is not None:
            self.league = league
        if sport is not None:
            self.sport = sport
        if opponent is not None:
            self.opponent = opponent
        if venue is not None:
            self.venue = venue
        if game is not None:
            self.game = game
        if _date is not None:
            self._date = _date
        if last_date_played is not None:
            self.last_date_played = last_date_played
        if game_number is not None:
            self.game_number = game_number
        if split is not None:
            self.split = split
        if game_pk is not None:
            self.game_pk = game_pk
        if day_of_the_week is not None:
            self.day_of_the_week = day_of_the_week
        if month is not None:
            self.month = month
        if opposing_division is not None:
            self.opposing_division = opposing_division
        if opposing_conference is not None:
            self.opposing_conference = opposing_conference
        if is_home is not None:
            self.is_home = is_home
        if is_win is not None:
            self.is_win = is_win
        if type is not None:
            self.type = type
        if group is not None:
            self.group = group
        if position is not None:
            self.position = position
        if game_innings is not None:
            self.game_innings = game_innings
        if exemption is not None:
            self.exemption = exemption
        if num_leagues is not None:
            self.num_leagues = num_leagues
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this StatSplits.  # noqa: E501


        :return: The requesting_user_role of this StatSplits.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this StatSplits.


        :param requesting_user_role: The requesting_user_role of this StatSplits.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def season(self):
        """Gets the season of this StatSplits.  # noqa: E501


        :return: The season of this StatSplits.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this StatSplits.


        :param season: The season of this StatSplits.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def stat(self):
        """Gets the stat of this StatSplits.  # noqa: E501


        :return: The stat of this StatSplits.  # noqa: E501
        :rtype: StatData
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this StatSplits.


        :param stat: The stat of this StatSplits.  # noqa: E501
        :type: StatData
        """

        self._stat = stat

    @property
    def stats(self):
        """Gets the stats of this StatSplits.  # noqa: E501


        :return: The stats of this StatSplits.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this StatSplits.


        :param stats: The stats of this StatSplits.  # noqa: E501
        :type: GroupedStatData
        """

        self._stats = stats

    @property
    def game_type(self):
        """Gets the game_type of this StatSplits.  # noqa: E501


        :return: The game_type of this StatSplits.  # noqa: E501
        :rtype: GameTypeEnum
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this StatSplits.


        :param game_type: The game_type of this StatSplits.  # noqa: E501
        :type: GameTypeEnum
        """

        self._game_type = game_type

    @property
    def team(self):
        """Gets the team of this StatSplits.  # noqa: E501


        :return: The team of this StatSplits.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this StatSplits.


        :param team: The team of this StatSplits.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def player(self):
        """Gets the player of this StatSplits.  # noqa: E501


        :return: The player of this StatSplits.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this StatSplits.


        :param player: The player of this StatSplits.  # noqa: E501
        :type: BaseballPerson
        """

        self._player = player

    @property
    def home_team(self):
        """Gets the home_team of this StatSplits.  # noqa: E501


        :return: The home_team of this StatSplits.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this StatSplits.


        :param home_team: The home_team of this StatSplits.  # noqa: E501
        :type: BaseballTeam
        """

        self._home_team = home_team

    @property
    def away_team(self):
        """Gets the away_team of this StatSplits.  # noqa: E501


        :return: The away_team of this StatSplits.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this StatSplits.


        :param away_team: The away_team of this StatSplits.  # noqa: E501
        :type: BaseballTeam
        """

        self._away_team = away_team

    @property
    def num_teams(self):
        """Gets the num_teams of this StatSplits.  # noqa: E501


        :return: The num_teams of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._num_teams

    @num_teams.setter
    def num_teams(self, num_teams):
        """Sets the num_teams of this StatSplits.


        :param num_teams: The num_teams of this StatSplits.  # noqa: E501
        :type: int
        """

        self._num_teams = num_teams

    @property
    def num_occurrences(self):
        """Gets the num_occurrences of this StatSplits.  # noqa: E501


        :return: The num_occurrences of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._num_occurrences

    @num_occurrences.setter
    def num_occurrences(self, num_occurrences):
        """Sets the num_occurrences of this StatSplits.


        :param num_occurrences: The num_occurrences of this StatSplits.  # noqa: E501
        :type: int
        """

        self._num_occurrences = num_occurrences

    @property
    def rank(self):
        """Gets the rank of this StatSplits.  # noqa: E501


        :return: The rank of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this StatSplits.


        :param rank: The rank of this StatSplits.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def league(self):
        """Gets the league of this StatSplits.  # noqa: E501


        :return: The league of this StatSplits.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this StatSplits.


        :param league: The league of this StatSplits.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def sport(self):
        """Gets the sport of this StatSplits.  # noqa: E501


        :return: The sport of this StatSplits.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this StatSplits.


        :param sport: The sport of this StatSplits.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def opponent(self):
        """Gets the opponent of this StatSplits.  # noqa: E501


        :return: The opponent of this StatSplits.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this StatSplits.


        :param opponent: The opponent of this StatSplits.  # noqa: E501
        :type: BaseballTeam
        """

        self._opponent = opponent

    @property
    def venue(self):
        """Gets the venue of this StatSplits.  # noqa: E501


        :return: The venue of this StatSplits.  # noqa: E501
        :rtype: Venue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this StatSplits.


        :param venue: The venue of this StatSplits.  # noqa: E501
        :type: Venue
        """

        self._venue = venue

    @property
    def game(self):
        """Gets the game of this StatSplits.  # noqa: E501


        :return: The game of this StatSplits.  # noqa: E501
        :rtype: BaseballScheduleItem
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this StatSplits.


        :param game: The game of this StatSplits.  # noqa: E501
        :type: BaseballScheduleItem
        """

        self._game = game

    @property
    def _date(self):
        """Gets the _date of this StatSplits.  # noqa: E501


        :return: The _date of this StatSplits.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StatSplits.


        :param _date: The _date of this StatSplits.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def last_date_played(self):
        """Gets the last_date_played of this StatSplits.  # noqa: E501


        :return: The last_date_played of this StatSplits.  # noqa: E501
        :rtype: date
        """
        return self._last_date_played

    @last_date_played.setter
    def last_date_played(self, last_date_played):
        """Sets the last_date_played of this StatSplits.


        :param last_date_played: The last_date_played of this StatSplits.  # noqa: E501
        :type: date
        """

        self._last_date_played = last_date_played

    @property
    def game_number(self):
        """Gets the game_number of this StatSplits.  # noqa: E501


        :return: The game_number of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._game_number

    @game_number.setter
    def game_number(self, game_number):
        """Sets the game_number of this StatSplits.


        :param game_number: The game_number of this StatSplits.  # noqa: E501
        :type: int
        """

        self._game_number = game_number

    @property
    def split(self):
        """Gets the split of this StatSplits.  # noqa: E501


        :return: The split of this StatSplits.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this StatSplits.


        :param split: The split of this StatSplits.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._split = split

    @property
    def game_pk(self):
        """Gets the game_pk of this StatSplits.  # noqa: E501


        :return: The game_pk of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this StatSplits.


        :param game_pk: The game_pk of this StatSplits.  # noqa: E501
        :type: int
        """

        self._game_pk = game_pk

    @property
    def day_of_the_week(self):
        """Gets the day_of_the_week of this StatSplits.  # noqa: E501


        :return: The day_of_the_week of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._day_of_the_week

    @day_of_the_week.setter
    def day_of_the_week(self, day_of_the_week):
        """Sets the day_of_the_week of this StatSplits.


        :param day_of_the_week: The day_of_the_week of this StatSplits.  # noqa: E501
        :type: int
        """

        self._day_of_the_week = day_of_the_week

    @property
    def month(self):
        """Gets the month of this StatSplits.  # noqa: E501


        :return: The month of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this StatSplits.


        :param month: The month of this StatSplits.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def opposing_division(self):
        """Gets the opposing_division of this StatSplits.  # noqa: E501


        :return: The opposing_division of this StatSplits.  # noqa: E501
        :rtype: Division
        """
        return self._opposing_division

    @opposing_division.setter
    def opposing_division(self, opposing_division):
        """Sets the opposing_division of this StatSplits.


        :param opposing_division: The opposing_division of this StatSplits.  # noqa: E501
        :type: Division
        """

        self._opposing_division = opposing_division

    @property
    def opposing_conference(self):
        """Gets the opposing_conference of this StatSplits.  # noqa: E501


        :return: The opposing_conference of this StatSplits.  # noqa: E501
        :rtype: Conference
        """
        return self._opposing_conference

    @opposing_conference.setter
    def opposing_conference(self, opposing_conference):
        """Sets the opposing_conference of this StatSplits.


        :param opposing_conference: The opposing_conference of this StatSplits.  # noqa: E501
        :type: Conference
        """

        self._opposing_conference = opposing_conference

    @property
    def is_home(self):
        """Gets the is_home of this StatSplits.  # noqa: E501


        :return: The is_home of this StatSplits.  # noqa: E501
        :rtype: bool
        """
        return self._is_home

    @is_home.setter
    def is_home(self, is_home):
        """Sets the is_home of this StatSplits.


        :param is_home: The is_home of this StatSplits.  # noqa: E501
        :type: bool
        """

        self._is_home = is_home

    @property
    def is_win(self):
        """Gets the is_win of this StatSplits.  # noqa: E501


        :return: The is_win of this StatSplits.  # noqa: E501
        :rtype: bool
        """
        return self._is_win

    @is_win.setter
    def is_win(self, is_win):
        """Sets the is_win of this StatSplits.


        :param is_win: The is_win of this StatSplits.  # noqa: E501
        :type: bool
        """

        self._is_win = is_win

    @property
    def type(self):
        """Gets the type of this StatSplits.  # noqa: E501


        :return: The type of this StatSplits.  # noqa: E501
        :rtype: StatType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatSplits.


        :param type: The type of this StatSplits.  # noqa: E501
        :type: StatType
        """

        self._type = type

    @property
    def group(self):
        """Gets the group of this StatSplits.  # noqa: E501


        :return: The group of this StatSplits.  # noqa: E501
        :rtype: StatGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this StatSplits.


        :param group: The group of this StatSplits.  # noqa: E501
        :type: StatGroup
        """

        self._group = group

    @property
    def position(self):
        """Gets the position of this StatSplits.  # noqa: E501


        :return: The position of this StatSplits.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StatSplits.


        :param position: The position of this StatSplits.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def game_innings(self):
        """Gets the game_innings of this StatSplits.  # noqa: E501


        :return: The game_innings of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._game_innings

    @game_innings.setter
    def game_innings(self, game_innings):
        """Sets the game_innings of this StatSplits.


        :param game_innings: The game_innings of this StatSplits.  # noqa: E501
        :type: int
        """

        self._game_innings = game_innings

    @property
    def exemption(self):
        """Gets the exemption of this StatSplits.  # noqa: E501


        :return: The exemption of this StatSplits.  # noqa: E501
        :rtype: PlayerListPerson
        """
        return self._exemption

    @exemption.setter
    def exemption(self, exemption):
        """Sets the exemption of this StatSplits.


        :param exemption: The exemption of this StatSplits.  # noqa: E501
        :type: PlayerListPerson
        """

        self._exemption = exemption

    @property
    def num_leagues(self):
        """Gets the num_leagues of this StatSplits.  # noqa: E501


        :return: The num_leagues of this StatSplits.  # noqa: E501
        :rtype: int
        """
        return self._num_leagues

    @num_leagues.setter
    def num_leagues(self, num_leagues):
        """Sets the num_leagues of this StatSplits.


        :param num_leagues: The num_leagues of this StatSplits.  # noqa: E501
        :type: int
        """

        self._num_leagues = num_leagues

    @property
    def user_privileges(self):
        """Gets the user_privileges of this StatSplits.  # noqa: E501


        :return: The user_privileges of this StatSplits.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this StatSplits.


        :param user_privileges: The user_privileges of this StatSplits.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatSplits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatSplits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
