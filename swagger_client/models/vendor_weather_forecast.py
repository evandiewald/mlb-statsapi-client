# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VendorWeatherForecast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_id': 'int',
        'forecast_timestamp': 'datetime',
        'adjusted_precipitation_probability': 'int',
        'cloud_cover_percentage': 'int',
        'description': 'str',
        'dewpoint': 'float',
        'temperature_feels_like': 'float',
        'sky_condition_icon_id': 'int',
        'precipitation_id': 'int',
        'precipitation_probability': 'int',
        'precipitation_rate': 'float',
        'relative_humidity': 'int',
        'temperature': 'float',
        'thunderstorm_probability': 'int',
        'wind_direction_degrees': 'int',
        'wind_speed': 'float',
        'surface_pressure': 'float',
        'snow_rate': 'float',
        'wet_bulb_globe_temperature': 'float',
        'wet_bulb_temperature': 'float'
    }

    attribute_map = {
        'game_id': 'gameId',
        'forecast_timestamp': 'forecastTimestamp',
        'adjusted_precipitation_probability': 'adjustedPrecipitationProbability',
        'cloud_cover_percentage': 'cloudCoverPercentage',
        'description': 'description',
        'dewpoint': 'dewpoint',
        'temperature_feels_like': 'temperatureFeelsLike',
        'sky_condition_icon_id': 'skyConditionIconId',
        'precipitation_id': 'precipitationId',
        'precipitation_probability': 'precipitationProbability',
        'precipitation_rate': 'precipitationRate',
        'relative_humidity': 'relativeHumidity',
        'temperature': 'temperature',
        'thunderstorm_probability': 'thunderstormProbability',
        'wind_direction_degrees': 'windDirectionDegrees',
        'wind_speed': 'windSpeed',
        'surface_pressure': 'surfacePressure',
        'snow_rate': 'snowRate',
        'wet_bulb_globe_temperature': 'wetBulbGlobeTemperature',
        'wet_bulb_temperature': 'wetBulbTemperature'
    }

    def __init__(self, game_id=None, forecast_timestamp=None, adjusted_precipitation_probability=None, cloud_cover_percentage=None, description=None, dewpoint=None, temperature_feels_like=None, sky_condition_icon_id=None, precipitation_id=None, precipitation_probability=None, precipitation_rate=None, relative_humidity=None, temperature=None, thunderstorm_probability=None, wind_direction_degrees=None, wind_speed=None, surface_pressure=None, snow_rate=None, wet_bulb_globe_temperature=None, wet_bulb_temperature=None):  # noqa: E501
        """VendorWeatherForecast - a model defined in Swagger"""  # noqa: E501
        self._game_id = None
        self._forecast_timestamp = None
        self._adjusted_precipitation_probability = None
        self._cloud_cover_percentage = None
        self._description = None
        self._dewpoint = None
        self._temperature_feels_like = None
        self._sky_condition_icon_id = None
        self._precipitation_id = None
        self._precipitation_probability = None
        self._precipitation_rate = None
        self._relative_humidity = None
        self._temperature = None
        self._thunderstorm_probability = None
        self._wind_direction_degrees = None
        self._wind_speed = None
        self._surface_pressure = None
        self._snow_rate = None
        self._wet_bulb_globe_temperature = None
        self._wet_bulb_temperature = None
        self.discriminator = None
        if game_id is not None:
            self.game_id = game_id
        if forecast_timestamp is not None:
            self.forecast_timestamp = forecast_timestamp
        if adjusted_precipitation_probability is not None:
            self.adjusted_precipitation_probability = adjusted_precipitation_probability
        if cloud_cover_percentage is not None:
            self.cloud_cover_percentage = cloud_cover_percentage
        if description is not None:
            self.description = description
        if dewpoint is not None:
            self.dewpoint = dewpoint
        if temperature_feels_like is not None:
            self.temperature_feels_like = temperature_feels_like
        if sky_condition_icon_id is not None:
            self.sky_condition_icon_id = sky_condition_icon_id
        if precipitation_id is not None:
            self.precipitation_id = precipitation_id
        if precipitation_probability is not None:
            self.precipitation_probability = precipitation_probability
        if precipitation_rate is not None:
            self.precipitation_rate = precipitation_rate
        if relative_humidity is not None:
            self.relative_humidity = relative_humidity
        if temperature is not None:
            self.temperature = temperature
        if thunderstorm_probability is not None:
            self.thunderstorm_probability = thunderstorm_probability
        if wind_direction_degrees is not None:
            self.wind_direction_degrees = wind_direction_degrees
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if surface_pressure is not None:
            self.surface_pressure = surface_pressure
        if snow_rate is not None:
            self.snow_rate = snow_rate
        if wet_bulb_globe_temperature is not None:
            self.wet_bulb_globe_temperature = wet_bulb_globe_temperature
        if wet_bulb_temperature is not None:
            self.wet_bulb_temperature = wet_bulb_temperature

    @property
    def game_id(self):
        """Gets the game_id of this VendorWeatherForecast.  # noqa: E501


        :return: The game_id of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this VendorWeatherForecast.


        :param game_id: The game_id of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def forecast_timestamp(self):
        """Gets the forecast_timestamp of this VendorWeatherForecast.  # noqa: E501


        :return: The forecast_timestamp of this VendorWeatherForecast.  # noqa: E501
        :rtype: datetime
        """
        return self._forecast_timestamp

    @forecast_timestamp.setter
    def forecast_timestamp(self, forecast_timestamp):
        """Sets the forecast_timestamp of this VendorWeatherForecast.


        :param forecast_timestamp: The forecast_timestamp of this VendorWeatherForecast.  # noqa: E501
        :type: datetime
        """

        self._forecast_timestamp = forecast_timestamp

    @property
    def adjusted_precipitation_probability(self):
        """Gets the adjusted_precipitation_probability of this VendorWeatherForecast.  # noqa: E501


        :return: The adjusted_precipitation_probability of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._adjusted_precipitation_probability

    @adjusted_precipitation_probability.setter
    def adjusted_precipitation_probability(self, adjusted_precipitation_probability):
        """Sets the adjusted_precipitation_probability of this VendorWeatherForecast.


        :param adjusted_precipitation_probability: The adjusted_precipitation_probability of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._adjusted_precipitation_probability = adjusted_precipitation_probability

    @property
    def cloud_cover_percentage(self):
        """Gets the cloud_cover_percentage of this VendorWeatherForecast.  # noqa: E501


        :return: The cloud_cover_percentage of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._cloud_cover_percentage

    @cloud_cover_percentage.setter
    def cloud_cover_percentage(self, cloud_cover_percentage):
        """Sets the cloud_cover_percentage of this VendorWeatherForecast.


        :param cloud_cover_percentage: The cloud_cover_percentage of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._cloud_cover_percentage = cloud_cover_percentage

    @property
    def description(self):
        """Gets the description of this VendorWeatherForecast.  # noqa: E501


        :return: The description of this VendorWeatherForecast.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VendorWeatherForecast.


        :param description: The description of this VendorWeatherForecast.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dewpoint(self):
        """Gets the dewpoint of this VendorWeatherForecast.  # noqa: E501


        :return: The dewpoint of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._dewpoint

    @dewpoint.setter
    def dewpoint(self, dewpoint):
        """Sets the dewpoint of this VendorWeatherForecast.


        :param dewpoint: The dewpoint of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._dewpoint = dewpoint

    @property
    def temperature_feels_like(self):
        """Gets the temperature_feels_like of this VendorWeatherForecast.  # noqa: E501


        :return: The temperature_feels_like of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._temperature_feels_like

    @temperature_feels_like.setter
    def temperature_feels_like(self, temperature_feels_like):
        """Sets the temperature_feels_like of this VendorWeatherForecast.


        :param temperature_feels_like: The temperature_feels_like of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._temperature_feels_like = temperature_feels_like

    @property
    def sky_condition_icon_id(self):
        """Gets the sky_condition_icon_id of this VendorWeatherForecast.  # noqa: E501


        :return: The sky_condition_icon_id of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._sky_condition_icon_id

    @sky_condition_icon_id.setter
    def sky_condition_icon_id(self, sky_condition_icon_id):
        """Sets the sky_condition_icon_id of this VendorWeatherForecast.


        :param sky_condition_icon_id: The sky_condition_icon_id of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._sky_condition_icon_id = sky_condition_icon_id

    @property
    def precipitation_id(self):
        """Gets the precipitation_id of this VendorWeatherForecast.  # noqa: E501


        :return: The precipitation_id of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._precipitation_id

    @precipitation_id.setter
    def precipitation_id(self, precipitation_id):
        """Sets the precipitation_id of this VendorWeatherForecast.


        :param precipitation_id: The precipitation_id of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._precipitation_id = precipitation_id

    @property
    def precipitation_probability(self):
        """Gets the precipitation_probability of this VendorWeatherForecast.  # noqa: E501


        :return: The precipitation_probability of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._precipitation_probability

    @precipitation_probability.setter
    def precipitation_probability(self, precipitation_probability):
        """Sets the precipitation_probability of this VendorWeatherForecast.


        :param precipitation_probability: The precipitation_probability of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._precipitation_probability = precipitation_probability

    @property
    def precipitation_rate(self):
        """Gets the precipitation_rate of this VendorWeatherForecast.  # noqa: E501


        :return: The precipitation_rate of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._precipitation_rate

    @precipitation_rate.setter
    def precipitation_rate(self, precipitation_rate):
        """Sets the precipitation_rate of this VendorWeatherForecast.


        :param precipitation_rate: The precipitation_rate of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._precipitation_rate = precipitation_rate

    @property
    def relative_humidity(self):
        """Gets the relative_humidity of this VendorWeatherForecast.  # noqa: E501


        :return: The relative_humidity of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._relative_humidity

    @relative_humidity.setter
    def relative_humidity(self, relative_humidity):
        """Sets the relative_humidity of this VendorWeatherForecast.


        :param relative_humidity: The relative_humidity of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._relative_humidity = relative_humidity

    @property
    def temperature(self):
        """Gets the temperature of this VendorWeatherForecast.  # noqa: E501


        :return: The temperature of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this VendorWeatherForecast.


        :param temperature: The temperature of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def thunderstorm_probability(self):
        """Gets the thunderstorm_probability of this VendorWeatherForecast.  # noqa: E501


        :return: The thunderstorm_probability of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._thunderstorm_probability

    @thunderstorm_probability.setter
    def thunderstorm_probability(self, thunderstorm_probability):
        """Sets the thunderstorm_probability of this VendorWeatherForecast.


        :param thunderstorm_probability: The thunderstorm_probability of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._thunderstorm_probability = thunderstorm_probability

    @property
    def wind_direction_degrees(self):
        """Gets the wind_direction_degrees of this VendorWeatherForecast.  # noqa: E501


        :return: The wind_direction_degrees of this VendorWeatherForecast.  # noqa: E501
        :rtype: int
        """
        return self._wind_direction_degrees

    @wind_direction_degrees.setter
    def wind_direction_degrees(self, wind_direction_degrees):
        """Sets the wind_direction_degrees of this VendorWeatherForecast.


        :param wind_direction_degrees: The wind_direction_degrees of this VendorWeatherForecast.  # noqa: E501
        :type: int
        """

        self._wind_direction_degrees = wind_direction_degrees

    @property
    def wind_speed(self):
        """Gets the wind_speed of this VendorWeatherForecast.  # noqa: E501


        :return: The wind_speed of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this VendorWeatherForecast.


        :param wind_speed: The wind_speed of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._wind_speed = wind_speed

    @property
    def surface_pressure(self):
        """Gets the surface_pressure of this VendorWeatherForecast.  # noqa: E501


        :return: The surface_pressure of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._surface_pressure

    @surface_pressure.setter
    def surface_pressure(self, surface_pressure):
        """Sets the surface_pressure of this VendorWeatherForecast.


        :param surface_pressure: The surface_pressure of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._surface_pressure = surface_pressure

    @property
    def snow_rate(self):
        """Gets the snow_rate of this VendorWeatherForecast.  # noqa: E501


        :return: The snow_rate of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._snow_rate

    @snow_rate.setter
    def snow_rate(self, snow_rate):
        """Sets the snow_rate of this VendorWeatherForecast.


        :param snow_rate: The snow_rate of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._snow_rate = snow_rate

    @property
    def wet_bulb_globe_temperature(self):
        """Gets the wet_bulb_globe_temperature of this VendorWeatherForecast.  # noqa: E501


        :return: The wet_bulb_globe_temperature of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._wet_bulb_globe_temperature

    @wet_bulb_globe_temperature.setter
    def wet_bulb_globe_temperature(self, wet_bulb_globe_temperature):
        """Sets the wet_bulb_globe_temperature of this VendorWeatherForecast.


        :param wet_bulb_globe_temperature: The wet_bulb_globe_temperature of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._wet_bulb_globe_temperature = wet_bulb_globe_temperature

    @property
    def wet_bulb_temperature(self):
        """Gets the wet_bulb_temperature of this VendorWeatherForecast.  # noqa: E501


        :return: The wet_bulb_temperature of this VendorWeatherForecast.  # noqa: E501
        :rtype: float
        """
        return self._wet_bulb_temperature

    @wet_bulb_temperature.setter
    def wet_bulb_temperature(self, wet_bulb_temperature):
        """Sets the wet_bulb_temperature of this VendorWeatherForecast.


        :param wet_bulb_temperature: The wet_bulb_temperature of this VendorWeatherForecast.  # noqa: E501
        :type: float
        """

        self._wet_bulb_temperature = wet_bulb_temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorWeatherForecast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorWeatherForecast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
