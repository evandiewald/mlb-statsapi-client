# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballLinescoreRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'note': 'str',
        'current_inning': 'int',
        'current_inning_ordinal': 'str',
        'inning_state': 'str',
        'inning_half': 'str',
        'is_top_inning': 'bool',
        'scheduled_innings': 'int',
        'innings': 'list[InningRestObject]',
        'teams': 'BaseballLinescoreTeamInfoRestObject',
        'defense': 'BaseballDefenseRestObject',
        'offense': 'BaseballOffenseRestObject',
        'balls': 'int',
        'strikes': 'int',
        'outs': 'int',
        'tie': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'note': 'note',
        'current_inning': 'currentInning',
        'current_inning_ordinal': 'currentInningOrdinal',
        'inning_state': 'inningState',
        'inning_half': 'inningHalf',
        'is_top_inning': 'isTopInning',
        'scheduled_innings': 'scheduledInnings',
        'innings': 'innings',
        'teams': 'teams',
        'defense': 'defense',
        'offense': 'offense',
        'balls': 'balls',
        'strikes': 'strikes',
        'outs': 'outs',
        'tie': 'tie'
    }

    def __init__(self, copyright=None, note=None, current_inning=None, current_inning_ordinal=None, inning_state=None, inning_half=None, is_top_inning=None, scheduled_innings=None, innings=None, teams=None, defense=None, offense=None, balls=None, strikes=None, outs=None, tie=None):  # noqa: E501
        """BaseballLinescoreRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._note = None
        self._current_inning = None
        self._current_inning_ordinal = None
        self._inning_state = None
        self._inning_half = None
        self._is_top_inning = None
        self._scheduled_innings = None
        self._innings = None
        self._teams = None
        self._defense = None
        self._offense = None
        self._balls = None
        self._strikes = None
        self._outs = None
        self._tie = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if note is not None:
            self.note = note
        if current_inning is not None:
            self.current_inning = current_inning
        if current_inning_ordinal is not None:
            self.current_inning_ordinal = current_inning_ordinal
        if inning_state is not None:
            self.inning_state = inning_state
        if inning_half is not None:
            self.inning_half = inning_half
        if is_top_inning is not None:
            self.is_top_inning = is_top_inning
        if scheduled_innings is not None:
            self.scheduled_innings = scheduled_innings
        if innings is not None:
            self.innings = innings
        if teams is not None:
            self.teams = teams
        if defense is not None:
            self.defense = defense
        if offense is not None:
            self.offense = offense
        if balls is not None:
            self.balls = balls
        if strikes is not None:
            self.strikes = strikes
        if outs is not None:
            self.outs = outs
        if tie is not None:
            self.tie = tie

    @property
    def copyright(self):
        """Gets the copyright of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The copyright of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballLinescoreRestObject.


        :param copyright: The copyright of this BaseballLinescoreRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def note(self):
        """Gets the note of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The note of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BaseballLinescoreRestObject.


        :param note: The note of this BaseballLinescoreRestObject.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def current_inning(self):
        """Gets the current_inning of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The current_inning of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: int
        """
        return self._current_inning

    @current_inning.setter
    def current_inning(self, current_inning):
        """Sets the current_inning of this BaseballLinescoreRestObject.


        :param current_inning: The current_inning of this BaseballLinescoreRestObject.  # noqa: E501
        :type: int
        """

        self._current_inning = current_inning

    @property
    def current_inning_ordinal(self):
        """Gets the current_inning_ordinal of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The current_inning_ordinal of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: str
        """
        return self._current_inning_ordinal

    @current_inning_ordinal.setter
    def current_inning_ordinal(self, current_inning_ordinal):
        """Sets the current_inning_ordinal of this BaseballLinescoreRestObject.


        :param current_inning_ordinal: The current_inning_ordinal of this BaseballLinescoreRestObject.  # noqa: E501
        :type: str
        """

        self._current_inning_ordinal = current_inning_ordinal

    @property
    def inning_state(self):
        """Gets the inning_state of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The inning_state of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: str
        """
        return self._inning_state

    @inning_state.setter
    def inning_state(self, inning_state):
        """Sets the inning_state of this BaseballLinescoreRestObject.


        :param inning_state: The inning_state of this BaseballLinescoreRestObject.  # noqa: E501
        :type: str
        """

        self._inning_state = inning_state

    @property
    def inning_half(self):
        """Gets the inning_half of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The inning_half of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: str
        """
        return self._inning_half

    @inning_half.setter
    def inning_half(self, inning_half):
        """Sets the inning_half of this BaseballLinescoreRestObject.


        :param inning_half: The inning_half of this BaseballLinescoreRestObject.  # noqa: E501
        :type: str
        """

        self._inning_half = inning_half

    @property
    def is_top_inning(self):
        """Gets the is_top_inning of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The is_top_inning of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_inning

    @is_top_inning.setter
    def is_top_inning(self, is_top_inning):
        """Sets the is_top_inning of this BaseballLinescoreRestObject.


        :param is_top_inning: The is_top_inning of this BaseballLinescoreRestObject.  # noqa: E501
        :type: bool
        """

        self._is_top_inning = is_top_inning

    @property
    def scheduled_innings(self):
        """Gets the scheduled_innings of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The scheduled_innings of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_innings

    @scheduled_innings.setter
    def scheduled_innings(self, scheduled_innings):
        """Sets the scheduled_innings of this BaseballLinescoreRestObject.


        :param scheduled_innings: The scheduled_innings of this BaseballLinescoreRestObject.  # noqa: E501
        :type: int
        """

        self._scheduled_innings = scheduled_innings

    @property
    def innings(self):
        """Gets the innings of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The innings of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: list[InningRestObject]
        """
        return self._innings

    @innings.setter
    def innings(self, innings):
        """Sets the innings of this BaseballLinescoreRestObject.


        :param innings: The innings of this BaseballLinescoreRestObject.  # noqa: E501
        :type: list[InningRestObject]
        """

        self._innings = innings

    @property
    def teams(self):
        """Gets the teams of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The teams of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: BaseballLinescoreTeamInfoRestObject
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this BaseballLinescoreRestObject.


        :param teams: The teams of this BaseballLinescoreRestObject.  # noqa: E501
        :type: BaseballLinescoreTeamInfoRestObject
        """

        self._teams = teams

    @property
    def defense(self):
        """Gets the defense of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The defense of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: BaseballDefenseRestObject
        """
        return self._defense

    @defense.setter
    def defense(self, defense):
        """Sets the defense of this BaseballLinescoreRestObject.


        :param defense: The defense of this BaseballLinescoreRestObject.  # noqa: E501
        :type: BaseballDefenseRestObject
        """

        self._defense = defense

    @property
    def offense(self):
        """Gets the offense of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The offense of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: BaseballOffenseRestObject
        """
        return self._offense

    @offense.setter
    def offense(self, offense):
        """Sets the offense of this BaseballLinescoreRestObject.


        :param offense: The offense of this BaseballLinescoreRestObject.  # noqa: E501
        :type: BaseballOffenseRestObject
        """

        self._offense = offense

    @property
    def balls(self):
        """Gets the balls of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The balls of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this BaseballLinescoreRestObject.


        :param balls: The balls of this BaseballLinescoreRestObject.  # noqa: E501
        :type: int
        """

        self._balls = balls

    @property
    def strikes(self):
        """Gets the strikes of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The strikes of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this BaseballLinescoreRestObject.


        :param strikes: The strikes of this BaseballLinescoreRestObject.  # noqa: E501
        :type: int
        """

        self._strikes = strikes

    @property
    def outs(self):
        """Gets the outs of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The outs of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this BaseballLinescoreRestObject.


        :param outs: The outs of this BaseballLinescoreRestObject.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def tie(self):
        """Gets the tie of this BaseballLinescoreRestObject.  # noqa: E501


        :return: The tie of this BaseballLinescoreRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._tie

    @tie.setter
    def tie(self, tie):
        """Sets the tie of this BaseballLinescoreRestObject.


        :param tie: The tie of this BaseballLinescoreRestObject.  # noqa: E501
        :type: bool
        """

        self._tie = tie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballLinescoreRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballLinescoreRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
