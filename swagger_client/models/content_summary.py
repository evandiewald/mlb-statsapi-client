# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_preview_article': 'bool',
        'has_recap_article': 'bool',
        'has_wrap_article': 'bool',
        'has_highlights_video': 'bool',
        'featured_media': 'FeaturedMedia'
    }

    attribute_map = {
        'has_preview_article': 'hasPreviewArticle',
        'has_recap_article': 'hasRecapArticle',
        'has_wrap_article': 'hasWrapArticle',
        'has_highlights_video': 'hasHighlightsVideo',
        'featured_media': 'featuredMedia'
    }

    def __init__(self, has_preview_article=None, has_recap_article=None, has_wrap_article=None, has_highlights_video=None, featured_media=None):  # noqa: E501
        """ContentSummary - a model defined in Swagger"""  # noqa: E501
        self._has_preview_article = None
        self._has_recap_article = None
        self._has_wrap_article = None
        self._has_highlights_video = None
        self._featured_media = None
        self.discriminator = None
        if has_preview_article is not None:
            self.has_preview_article = has_preview_article
        if has_recap_article is not None:
            self.has_recap_article = has_recap_article
        if has_wrap_article is not None:
            self.has_wrap_article = has_wrap_article
        if has_highlights_video is not None:
            self.has_highlights_video = has_highlights_video
        if featured_media is not None:
            self.featured_media = featured_media

    @property
    def has_preview_article(self):
        """Gets the has_preview_article of this ContentSummary.  # noqa: E501


        :return: The has_preview_article of this ContentSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_preview_article

    @has_preview_article.setter
    def has_preview_article(self, has_preview_article):
        """Sets the has_preview_article of this ContentSummary.


        :param has_preview_article: The has_preview_article of this ContentSummary.  # noqa: E501
        :type: bool
        """

        self._has_preview_article = has_preview_article

    @property
    def has_recap_article(self):
        """Gets the has_recap_article of this ContentSummary.  # noqa: E501


        :return: The has_recap_article of this ContentSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_recap_article

    @has_recap_article.setter
    def has_recap_article(self, has_recap_article):
        """Sets the has_recap_article of this ContentSummary.


        :param has_recap_article: The has_recap_article of this ContentSummary.  # noqa: E501
        :type: bool
        """

        self._has_recap_article = has_recap_article

    @property
    def has_wrap_article(self):
        """Gets the has_wrap_article of this ContentSummary.  # noqa: E501


        :return: The has_wrap_article of this ContentSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_wrap_article

    @has_wrap_article.setter
    def has_wrap_article(self, has_wrap_article):
        """Sets the has_wrap_article of this ContentSummary.


        :param has_wrap_article: The has_wrap_article of this ContentSummary.  # noqa: E501
        :type: bool
        """

        self._has_wrap_article = has_wrap_article

    @property
    def has_highlights_video(self):
        """Gets the has_highlights_video of this ContentSummary.  # noqa: E501


        :return: The has_highlights_video of this ContentSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_highlights_video

    @has_highlights_video.setter
    def has_highlights_video(self, has_highlights_video):
        """Sets the has_highlights_video of this ContentSummary.


        :param has_highlights_video: The has_highlights_video of this ContentSummary.  # noqa: E501
        :type: bool
        """

        self._has_highlights_video = has_highlights_video

    @property
    def featured_media(self):
        """Gets the featured_media of this ContentSummary.  # noqa: E501


        :return: The featured_media of this ContentSummary.  # noqa: E501
        :rtype: FeaturedMedia
        """
        return self._featured_media

    @featured_media.setter
    def featured_media(self, featured_media):
        """Sets the featured_media of this ContentSummary.


        :param featured_media: The featured_media of this ContentSummary.  # noqa: E501
        :type: FeaturedMedia
        """

        self._featured_media = featured_media

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
