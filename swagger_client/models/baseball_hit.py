# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballHit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'launch_data': 'LaunchData',
        'trajectory_data': 'HitTrajectoryData',
        'landing_data': 'StartEndData',
        'last_measured_data': 'StartEndData',
        'reduced_confidence': 'list[str]',
        'team': 'BaseballTeam',
        'inning': 'int',
        'pitcher': 'BaseballPerson',
        'batter': 'BaseballPerson',
        'coord_x': 'float',
        'coord_y': 'float',
        'landing_pos_x': 'float',
        'landing_pos_y': 'float',
        'type': 'str',
        'description': 'str',
        'launch_speed': 'float',
        'total_distance': 'float',
        'launch_angle': 'float',
        'trajectory': 'str',
        'hardness': 'str',
        'location': 'str',
        'is_barrel': 'bool',
        'hit_probability': 'float',
        'bat_speed': 'float',
        'is_sword_swing': 'bool',
        'descriptions': 'dict(str, str)'
    }

    attribute_map = {
        'launch_data': 'launchData',
        'trajectory_data': 'trajectoryData',
        'landing_data': 'landingData',
        'last_measured_data': 'lastMeasuredData',
        'reduced_confidence': 'reducedConfidence',
        'team': 'team',
        'inning': 'inning',
        'pitcher': 'pitcher',
        'batter': 'batter',
        'coord_x': 'coordX',
        'coord_y': 'coordY',
        'landing_pos_x': 'landingPosX',
        'landing_pos_y': 'landingPosY',
        'type': 'type',
        'description': 'description',
        'launch_speed': 'launchSpeed',
        'total_distance': 'totalDistance',
        'launch_angle': 'launchAngle',
        'trajectory': 'trajectory',
        'hardness': 'hardness',
        'location': 'location',
        'is_barrel': 'isBarrel',
        'hit_probability': 'hitProbability',
        'bat_speed': 'batSpeed',
        'is_sword_swing': 'isSwordSwing',
        'descriptions': 'descriptions'
    }

    def __init__(self, launch_data=None, trajectory_data=None, landing_data=None, last_measured_data=None, reduced_confidence=None, team=None, inning=None, pitcher=None, batter=None, coord_x=None, coord_y=None, landing_pos_x=None, landing_pos_y=None, type=None, description=None, launch_speed=None, total_distance=None, launch_angle=None, trajectory=None, hardness=None, location=None, is_barrel=None, hit_probability=None, bat_speed=None, is_sword_swing=None, descriptions=None):  # noqa: E501
        """BaseballHit - a model defined in Swagger"""  # noqa: E501
        self._launch_data = None
        self._trajectory_data = None
        self._landing_data = None
        self._last_measured_data = None
        self._reduced_confidence = None
        self._team = None
        self._inning = None
        self._pitcher = None
        self._batter = None
        self._coord_x = None
        self._coord_y = None
        self._landing_pos_x = None
        self._landing_pos_y = None
        self._type = None
        self._description = None
        self._launch_speed = None
        self._total_distance = None
        self._launch_angle = None
        self._trajectory = None
        self._hardness = None
        self._location = None
        self._is_barrel = None
        self._hit_probability = None
        self._bat_speed = None
        self._is_sword_swing = None
        self._descriptions = None
        self.discriminator = None
        if launch_data is not None:
            self.launch_data = launch_data
        if trajectory_data is not None:
            self.trajectory_data = trajectory_data
        if landing_data is not None:
            self.landing_data = landing_data
        if last_measured_data is not None:
            self.last_measured_data = last_measured_data
        if reduced_confidence is not None:
            self.reduced_confidence = reduced_confidence
        if team is not None:
            self.team = team
        if inning is not None:
            self.inning = inning
        if pitcher is not None:
            self.pitcher = pitcher
        if batter is not None:
            self.batter = batter
        if coord_x is not None:
            self.coord_x = coord_x
        if coord_y is not None:
            self.coord_y = coord_y
        if landing_pos_x is not None:
            self.landing_pos_x = landing_pos_x
        if landing_pos_y is not None:
            self.landing_pos_y = landing_pos_y
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if launch_speed is not None:
            self.launch_speed = launch_speed
        if total_distance is not None:
            self.total_distance = total_distance
        if launch_angle is not None:
            self.launch_angle = launch_angle
        if trajectory is not None:
            self.trajectory = trajectory
        if hardness is not None:
            self.hardness = hardness
        if location is not None:
            self.location = location
        if is_barrel is not None:
            self.is_barrel = is_barrel
        if hit_probability is not None:
            self.hit_probability = hit_probability
        if bat_speed is not None:
            self.bat_speed = bat_speed
        if is_sword_swing is not None:
            self.is_sword_swing = is_sword_swing
        if descriptions is not None:
            self.descriptions = descriptions

    @property
    def launch_data(self):
        """Gets the launch_data of this BaseballHit.  # noqa: E501


        :return: The launch_data of this BaseballHit.  # noqa: E501
        :rtype: LaunchData
        """
        return self._launch_data

    @launch_data.setter
    def launch_data(self, launch_data):
        """Sets the launch_data of this BaseballHit.


        :param launch_data: The launch_data of this BaseballHit.  # noqa: E501
        :type: LaunchData
        """

        self._launch_data = launch_data

    @property
    def trajectory_data(self):
        """Gets the trajectory_data of this BaseballHit.  # noqa: E501


        :return: The trajectory_data of this BaseballHit.  # noqa: E501
        :rtype: HitTrajectoryData
        """
        return self._trajectory_data

    @trajectory_data.setter
    def trajectory_data(self, trajectory_data):
        """Sets the trajectory_data of this BaseballHit.


        :param trajectory_data: The trajectory_data of this BaseballHit.  # noqa: E501
        :type: HitTrajectoryData
        """

        self._trajectory_data = trajectory_data

    @property
    def landing_data(self):
        """Gets the landing_data of this BaseballHit.  # noqa: E501


        :return: The landing_data of this BaseballHit.  # noqa: E501
        :rtype: StartEndData
        """
        return self._landing_data

    @landing_data.setter
    def landing_data(self, landing_data):
        """Sets the landing_data of this BaseballHit.


        :param landing_data: The landing_data of this BaseballHit.  # noqa: E501
        :type: StartEndData
        """

        self._landing_data = landing_data

    @property
    def last_measured_data(self):
        """Gets the last_measured_data of this BaseballHit.  # noqa: E501


        :return: The last_measured_data of this BaseballHit.  # noqa: E501
        :rtype: StartEndData
        """
        return self._last_measured_data

    @last_measured_data.setter
    def last_measured_data(self, last_measured_data):
        """Sets the last_measured_data of this BaseballHit.


        :param last_measured_data: The last_measured_data of this BaseballHit.  # noqa: E501
        :type: StartEndData
        """

        self._last_measured_data = last_measured_data

    @property
    def reduced_confidence(self):
        """Gets the reduced_confidence of this BaseballHit.  # noqa: E501


        :return: The reduced_confidence of this BaseballHit.  # noqa: E501
        :rtype: list[str]
        """
        return self._reduced_confidence

    @reduced_confidence.setter
    def reduced_confidence(self, reduced_confidence):
        """Sets the reduced_confidence of this BaseballHit.


        :param reduced_confidence: The reduced_confidence of this BaseballHit.  # noqa: E501
        :type: list[str]
        """

        self._reduced_confidence = reduced_confidence

    @property
    def team(self):
        """Gets the team of this BaseballHit.  # noqa: E501


        :return: The team of this BaseballHit.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballHit.


        :param team: The team of this BaseballHit.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def inning(self):
        """Gets the inning of this BaseballHit.  # noqa: E501


        :return: The inning of this BaseballHit.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this BaseballHit.


        :param inning: The inning of this BaseballHit.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def pitcher(self):
        """Gets the pitcher of this BaseballHit.  # noqa: E501


        :return: The pitcher of this BaseballHit.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this BaseballHit.


        :param pitcher: The pitcher of this BaseballHit.  # noqa: E501
        :type: BaseballPerson
        """

        self._pitcher = pitcher

    @property
    def batter(self):
        """Gets the batter of this BaseballHit.  # noqa: E501


        :return: The batter of this BaseballHit.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this BaseballHit.


        :param batter: The batter of this BaseballHit.  # noqa: E501
        :type: BaseballPerson
        """

        self._batter = batter

    @property
    def coord_x(self):
        """Gets the coord_x of this BaseballHit.  # noqa: E501


        :return: The coord_x of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._coord_x

    @coord_x.setter
    def coord_x(self, coord_x):
        """Sets the coord_x of this BaseballHit.


        :param coord_x: The coord_x of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._coord_x = coord_x

    @property
    def coord_y(self):
        """Gets the coord_y of this BaseballHit.  # noqa: E501


        :return: The coord_y of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._coord_y

    @coord_y.setter
    def coord_y(self, coord_y):
        """Sets the coord_y of this BaseballHit.


        :param coord_y: The coord_y of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._coord_y = coord_y

    @property
    def landing_pos_x(self):
        """Gets the landing_pos_x of this BaseballHit.  # noqa: E501


        :return: The landing_pos_x of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._landing_pos_x

    @landing_pos_x.setter
    def landing_pos_x(self, landing_pos_x):
        """Sets the landing_pos_x of this BaseballHit.


        :param landing_pos_x: The landing_pos_x of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._landing_pos_x = landing_pos_x

    @property
    def landing_pos_y(self):
        """Gets the landing_pos_y of this BaseballHit.  # noqa: E501


        :return: The landing_pos_y of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._landing_pos_y

    @landing_pos_y.setter
    def landing_pos_y(self, landing_pos_y):
        """Sets the landing_pos_y of this BaseballHit.


        :param landing_pos_y: The landing_pos_y of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._landing_pos_y = landing_pos_y

    @property
    def type(self):
        """Gets the type of this BaseballHit.  # noqa: E501


        :return: The type of this BaseballHit.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseballHit.


        :param type: The type of this BaseballHit.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this BaseballHit.  # noqa: E501


        :return: The description of this BaseballHit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseballHit.


        :param description: The description of this BaseballHit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def launch_speed(self):
        """Gets the launch_speed of this BaseballHit.  # noqa: E501


        :return: The launch_speed of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._launch_speed

    @launch_speed.setter
    def launch_speed(self, launch_speed):
        """Sets the launch_speed of this BaseballHit.


        :param launch_speed: The launch_speed of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._launch_speed = launch_speed

    @property
    def total_distance(self):
        """Gets the total_distance of this BaseballHit.  # noqa: E501


        :return: The total_distance of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._total_distance

    @total_distance.setter
    def total_distance(self, total_distance):
        """Sets the total_distance of this BaseballHit.


        :param total_distance: The total_distance of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._total_distance = total_distance

    @property
    def launch_angle(self):
        """Gets the launch_angle of this BaseballHit.  # noqa: E501


        :return: The launch_angle of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._launch_angle

    @launch_angle.setter
    def launch_angle(self, launch_angle):
        """Sets the launch_angle of this BaseballHit.


        :param launch_angle: The launch_angle of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._launch_angle = launch_angle

    @property
    def trajectory(self):
        """Gets the trajectory of this BaseballHit.  # noqa: E501


        :return: The trajectory of this BaseballHit.  # noqa: E501
        :rtype: str
        """
        return self._trajectory

    @trajectory.setter
    def trajectory(self, trajectory):
        """Sets the trajectory of this BaseballHit.


        :param trajectory: The trajectory of this BaseballHit.  # noqa: E501
        :type: str
        """

        self._trajectory = trajectory

    @property
    def hardness(self):
        """Gets the hardness of this BaseballHit.  # noqa: E501


        :return: The hardness of this BaseballHit.  # noqa: E501
        :rtype: str
        """
        return self._hardness

    @hardness.setter
    def hardness(self, hardness):
        """Sets the hardness of this BaseballHit.


        :param hardness: The hardness of this BaseballHit.  # noqa: E501
        :type: str
        """

        self._hardness = hardness

    @property
    def location(self):
        """Gets the location of this BaseballHit.  # noqa: E501


        :return: The location of this BaseballHit.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BaseballHit.


        :param location: The location of this BaseballHit.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def is_barrel(self):
        """Gets the is_barrel of this BaseballHit.  # noqa: E501


        :return: The is_barrel of this BaseballHit.  # noqa: E501
        :rtype: bool
        """
        return self._is_barrel

    @is_barrel.setter
    def is_barrel(self, is_barrel):
        """Sets the is_barrel of this BaseballHit.


        :param is_barrel: The is_barrel of this BaseballHit.  # noqa: E501
        :type: bool
        """

        self._is_barrel = is_barrel

    @property
    def hit_probability(self):
        """Gets the hit_probability of this BaseballHit.  # noqa: E501


        :return: The hit_probability of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._hit_probability

    @hit_probability.setter
    def hit_probability(self, hit_probability):
        """Sets the hit_probability of this BaseballHit.


        :param hit_probability: The hit_probability of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._hit_probability = hit_probability

    @property
    def bat_speed(self):
        """Gets the bat_speed of this BaseballHit.  # noqa: E501


        :return: The bat_speed of this BaseballHit.  # noqa: E501
        :rtype: float
        """
        return self._bat_speed

    @bat_speed.setter
    def bat_speed(self, bat_speed):
        """Sets the bat_speed of this BaseballHit.


        :param bat_speed: The bat_speed of this BaseballHit.  # noqa: E501
        :type: float
        """

        self._bat_speed = bat_speed

    @property
    def is_sword_swing(self):
        """Gets the is_sword_swing of this BaseballHit.  # noqa: E501


        :return: The is_sword_swing of this BaseballHit.  # noqa: E501
        :rtype: bool
        """
        return self._is_sword_swing

    @is_sword_swing.setter
    def is_sword_swing(self, is_sword_swing):
        """Sets the is_sword_swing of this BaseballHit.


        :param is_sword_swing: The is_sword_swing of this BaseballHit.  # noqa: E501
        :type: bool
        """

        self._is_sword_swing = is_sword_swing

    @property
    def descriptions(self):
        """Gets the descriptions of this BaseballHit.  # noqa: E501


        :return: The descriptions of this BaseballHit.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this BaseballHit.


        :param descriptions: The descriptions of this BaseballHit.  # noqa: E501
        :type: dict(str, str)
        """

        self._descriptions = descriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballHit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballHit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
