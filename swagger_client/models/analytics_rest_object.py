# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hydrations': 'list[str]',
        'strike_zone_info': 'JsonNode',
        'meta_data': 'StatSplitsRestObject',
        'play_result': 'PlayResultRestObject',
        'target_positions': 'list[PositionalMapRestObject]',
        'ball_segments': 'BallPositionalDataRestObject',
        'tracked_events': 'list[PlayEventRestObject]',
        'calculated_metrics': 'CalculatedMetricContainerRestObject',
        'position_map': 'dict(str, BaseballPersonRestObject)',
        'diagram': 'str',
        'context_metrics': 'list[CalculatedMetricRestObject]',
        'context_averages': 'list[CalculatedMetricRestObject]',
        'video': 'IFeedRestObject',
        'calibration_data': 'CalibrationContainerRestObject',
        'bat': 'BatTrackingRestObject',
        'weather': 'WeatherWrapperRestObject',
        'software_versions': 'JsonNode'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'strike_zone_info': 'strikeZoneInfo',
        'meta_data': 'metaData',
        'play_result': 'playResult',
        'target_positions': 'targetPositions',
        'ball_segments': 'ballSegments',
        'tracked_events': 'trackedEvents',
        'calculated_metrics': 'calculatedMetrics',
        'position_map': 'positionMap',
        'diagram': 'diagram',
        'context_metrics': 'contextMetrics',
        'context_averages': 'contextAverages',
        'video': 'video',
        'calibration_data': 'calibrationData',
        'bat': 'bat',
        'weather': 'weather',
        'software_versions': 'softwareVersions'
    }

    def __init__(self, copyright=None, hydrations=None, strike_zone_info=None, meta_data=None, play_result=None, target_positions=None, ball_segments=None, tracked_events=None, calculated_metrics=None, position_map=None, diagram=None, context_metrics=None, context_averages=None, video=None, calibration_data=None, bat=None, weather=None, software_versions=None):  # noqa: E501
        """AnalyticsRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hydrations = None
        self._strike_zone_info = None
        self._meta_data = None
        self._play_result = None
        self._target_positions = None
        self._ball_segments = None
        self._tracked_events = None
        self._calculated_metrics = None
        self._position_map = None
        self._diagram = None
        self._context_metrics = None
        self._context_averages = None
        self._video = None
        self._calibration_data = None
        self._bat = None
        self._weather = None
        self._software_versions = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if strike_zone_info is not None:
            self.strike_zone_info = strike_zone_info
        if meta_data is not None:
            self.meta_data = meta_data
        if play_result is not None:
            self.play_result = play_result
        if target_positions is not None:
            self.target_positions = target_positions
        if ball_segments is not None:
            self.ball_segments = ball_segments
        if tracked_events is not None:
            self.tracked_events = tracked_events
        if calculated_metrics is not None:
            self.calculated_metrics = calculated_metrics
        if position_map is not None:
            self.position_map = position_map
        if diagram is not None:
            self.diagram = diagram
        if context_metrics is not None:
            self.context_metrics = context_metrics
        if context_averages is not None:
            self.context_averages = context_averages
        if video is not None:
            self.video = video
        if calibration_data is not None:
            self.calibration_data = calibration_data
        if bat is not None:
            self.bat = bat
        if weather is not None:
            self.weather = weather
        if software_versions is not None:
            self.software_versions = software_versions

    @property
    def copyright(self):
        """Gets the copyright of this AnalyticsRestObject.  # noqa: E501


        :return: The copyright of this AnalyticsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this AnalyticsRestObject.


        :param copyright: The copyright of this AnalyticsRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this AnalyticsRestObject.  # noqa: E501


        :return: The hydrations of this AnalyticsRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this AnalyticsRestObject.


        :param hydrations: The hydrations of this AnalyticsRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def strike_zone_info(self):
        """Gets the strike_zone_info of this AnalyticsRestObject.  # noqa: E501


        :return: The strike_zone_info of this AnalyticsRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._strike_zone_info

    @strike_zone_info.setter
    def strike_zone_info(self, strike_zone_info):
        """Sets the strike_zone_info of this AnalyticsRestObject.


        :param strike_zone_info: The strike_zone_info of this AnalyticsRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._strike_zone_info = strike_zone_info

    @property
    def meta_data(self):
        """Gets the meta_data of this AnalyticsRestObject.  # noqa: E501


        :return: The meta_data of this AnalyticsRestObject.  # noqa: E501
        :rtype: StatSplitsRestObject
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this AnalyticsRestObject.


        :param meta_data: The meta_data of this AnalyticsRestObject.  # noqa: E501
        :type: StatSplitsRestObject
        """

        self._meta_data = meta_data

    @property
    def play_result(self):
        """Gets the play_result of this AnalyticsRestObject.  # noqa: E501


        :return: The play_result of this AnalyticsRestObject.  # noqa: E501
        :rtype: PlayResultRestObject
        """
        return self._play_result

    @play_result.setter
    def play_result(self, play_result):
        """Sets the play_result of this AnalyticsRestObject.


        :param play_result: The play_result of this AnalyticsRestObject.  # noqa: E501
        :type: PlayResultRestObject
        """

        self._play_result = play_result

    @property
    def target_positions(self):
        """Gets the target_positions of this AnalyticsRestObject.  # noqa: E501


        :return: The target_positions of this AnalyticsRestObject.  # noqa: E501
        :rtype: list[PositionalMapRestObject]
        """
        return self._target_positions

    @target_positions.setter
    def target_positions(self, target_positions):
        """Sets the target_positions of this AnalyticsRestObject.


        :param target_positions: The target_positions of this AnalyticsRestObject.  # noqa: E501
        :type: list[PositionalMapRestObject]
        """

        self._target_positions = target_positions

    @property
    def ball_segments(self):
        """Gets the ball_segments of this AnalyticsRestObject.  # noqa: E501


        :return: The ball_segments of this AnalyticsRestObject.  # noqa: E501
        :rtype: BallPositionalDataRestObject
        """
        return self._ball_segments

    @ball_segments.setter
    def ball_segments(self, ball_segments):
        """Sets the ball_segments of this AnalyticsRestObject.


        :param ball_segments: The ball_segments of this AnalyticsRestObject.  # noqa: E501
        :type: BallPositionalDataRestObject
        """

        self._ball_segments = ball_segments

    @property
    def tracked_events(self):
        """Gets the tracked_events of this AnalyticsRestObject.  # noqa: E501


        :return: The tracked_events of this AnalyticsRestObject.  # noqa: E501
        :rtype: list[PlayEventRestObject]
        """
        return self._tracked_events

    @tracked_events.setter
    def tracked_events(self, tracked_events):
        """Sets the tracked_events of this AnalyticsRestObject.


        :param tracked_events: The tracked_events of this AnalyticsRestObject.  # noqa: E501
        :type: list[PlayEventRestObject]
        """

        self._tracked_events = tracked_events

    @property
    def calculated_metrics(self):
        """Gets the calculated_metrics of this AnalyticsRestObject.  # noqa: E501


        :return: The calculated_metrics of this AnalyticsRestObject.  # noqa: E501
        :rtype: CalculatedMetricContainerRestObject
        """
        return self._calculated_metrics

    @calculated_metrics.setter
    def calculated_metrics(self, calculated_metrics):
        """Sets the calculated_metrics of this AnalyticsRestObject.


        :param calculated_metrics: The calculated_metrics of this AnalyticsRestObject.  # noqa: E501
        :type: CalculatedMetricContainerRestObject
        """

        self._calculated_metrics = calculated_metrics

    @property
    def position_map(self):
        """Gets the position_map of this AnalyticsRestObject.  # noqa: E501


        :return: The position_map of this AnalyticsRestObject.  # noqa: E501
        :rtype: dict(str, BaseballPersonRestObject)
        """
        return self._position_map

    @position_map.setter
    def position_map(self, position_map):
        """Sets the position_map of this AnalyticsRestObject.


        :param position_map: The position_map of this AnalyticsRestObject.  # noqa: E501
        :type: dict(str, BaseballPersonRestObject)
        """

        self._position_map = position_map

    @property
    def diagram(self):
        """Gets the diagram of this AnalyticsRestObject.  # noqa: E501


        :return: The diagram of this AnalyticsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._diagram

    @diagram.setter
    def diagram(self, diagram):
        """Sets the diagram of this AnalyticsRestObject.


        :param diagram: The diagram of this AnalyticsRestObject.  # noqa: E501
        :type: str
        """

        self._diagram = diagram

    @property
    def context_metrics(self):
        """Gets the context_metrics of this AnalyticsRestObject.  # noqa: E501


        :return: The context_metrics of this AnalyticsRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._context_metrics

    @context_metrics.setter
    def context_metrics(self, context_metrics):
        """Sets the context_metrics of this AnalyticsRestObject.


        :param context_metrics: The context_metrics of this AnalyticsRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._context_metrics = context_metrics

    @property
    def context_averages(self):
        """Gets the context_averages of this AnalyticsRestObject.  # noqa: E501


        :return: The context_averages of this AnalyticsRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._context_averages

    @context_averages.setter
    def context_averages(self, context_averages):
        """Sets the context_averages of this AnalyticsRestObject.


        :param context_averages: The context_averages of this AnalyticsRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._context_averages = context_averages

    @property
    def video(self):
        """Gets the video of this AnalyticsRestObject.  # noqa: E501


        :return: The video of this AnalyticsRestObject.  # noqa: E501
        :rtype: IFeedRestObject
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this AnalyticsRestObject.


        :param video: The video of this AnalyticsRestObject.  # noqa: E501
        :type: IFeedRestObject
        """

        self._video = video

    @property
    def calibration_data(self):
        """Gets the calibration_data of this AnalyticsRestObject.  # noqa: E501


        :return: The calibration_data of this AnalyticsRestObject.  # noqa: E501
        :rtype: CalibrationContainerRestObject
        """
        return self._calibration_data

    @calibration_data.setter
    def calibration_data(self, calibration_data):
        """Sets the calibration_data of this AnalyticsRestObject.


        :param calibration_data: The calibration_data of this AnalyticsRestObject.  # noqa: E501
        :type: CalibrationContainerRestObject
        """

        self._calibration_data = calibration_data

    @property
    def bat(self):
        """Gets the bat of this AnalyticsRestObject.  # noqa: E501


        :return: The bat of this AnalyticsRestObject.  # noqa: E501
        :rtype: BatTrackingRestObject
        """
        return self._bat

    @bat.setter
    def bat(self, bat):
        """Sets the bat of this AnalyticsRestObject.


        :param bat: The bat of this AnalyticsRestObject.  # noqa: E501
        :type: BatTrackingRestObject
        """

        self._bat = bat

    @property
    def weather(self):
        """Gets the weather of this AnalyticsRestObject.  # noqa: E501


        :return: The weather of this AnalyticsRestObject.  # noqa: E501
        :rtype: WeatherWrapperRestObject
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this AnalyticsRestObject.


        :param weather: The weather of this AnalyticsRestObject.  # noqa: E501
        :type: WeatherWrapperRestObject
        """

        self._weather = weather

    @property
    def software_versions(self):
        """Gets the software_versions of this AnalyticsRestObject.  # noqa: E501


        :return: The software_versions of this AnalyticsRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._software_versions

    @software_versions.setter
    def software_versions(self, software_versions):
        """Sets the software_versions of this AnalyticsRestObject.


        :param software_versions: The software_versions of this AnalyticsRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._software_versions = software_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
