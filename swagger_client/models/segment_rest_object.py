# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SegmentRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'segment_type': 'str',
        'end_data': 'StartEndDataRestObject',
        'last_measured_data': 'MeasuredDataRestObject',
        'first_measured_data': 'MeasuredDataRestObject',
        'landing_data': 'MeasuredDataRestObject',
        'reduced_confidence': 'list[str]',
        'start_data': 'StartEndDataRestObject',
        'trajectory_polynomial_x': 'list[float]',
        'trajectory_polynomial_y': 'list[float]',
        'trajectory_polynomial_z': 'list[float]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'segment_type': 'segmentType',
        'end_data': 'endData',
        'last_measured_data': 'lastMeasuredData',
        'first_measured_data': 'firstMeasuredData',
        'landing_data': 'landingData',
        'reduced_confidence': 'reducedConfidence',
        'start_data': 'startData',
        'trajectory_polynomial_x': 'trajectoryPolynomialX',
        'trajectory_polynomial_y': 'trajectoryPolynomialY',
        'trajectory_polynomial_z': 'trajectoryPolynomialZ'
    }

    def __init__(self, copyright=None, segment_type=None, end_data=None, last_measured_data=None, first_measured_data=None, landing_data=None, reduced_confidence=None, start_data=None, trajectory_polynomial_x=None, trajectory_polynomial_y=None, trajectory_polynomial_z=None):  # noqa: E501
        """SegmentRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._segment_type = None
        self._end_data = None
        self._last_measured_data = None
        self._first_measured_data = None
        self._landing_data = None
        self._reduced_confidence = None
        self._start_data = None
        self._trajectory_polynomial_x = None
        self._trajectory_polynomial_y = None
        self._trajectory_polynomial_z = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if segment_type is not None:
            self.segment_type = segment_type
        if end_data is not None:
            self.end_data = end_data
        if last_measured_data is not None:
            self.last_measured_data = last_measured_data
        if first_measured_data is not None:
            self.first_measured_data = first_measured_data
        if landing_data is not None:
            self.landing_data = landing_data
        if reduced_confidence is not None:
            self.reduced_confidence = reduced_confidence
        if start_data is not None:
            self.start_data = start_data
        if trajectory_polynomial_x is not None:
            self.trajectory_polynomial_x = trajectory_polynomial_x
        if trajectory_polynomial_y is not None:
            self.trajectory_polynomial_y = trajectory_polynomial_y
        if trajectory_polynomial_z is not None:
            self.trajectory_polynomial_z = trajectory_polynomial_z

    @property
    def copyright(self):
        """Gets the copyright of this SegmentRestObject.  # noqa: E501


        :return: The copyright of this SegmentRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this SegmentRestObject.


        :param copyright: The copyright of this SegmentRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def segment_type(self):
        """Gets the segment_type of this SegmentRestObject.  # noqa: E501


        :return: The segment_type of this SegmentRestObject.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this SegmentRestObject.


        :param segment_type: The segment_type of this SegmentRestObject.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def end_data(self):
        """Gets the end_data of this SegmentRestObject.  # noqa: E501


        :return: The end_data of this SegmentRestObject.  # noqa: E501
        :rtype: StartEndDataRestObject
        """
        return self._end_data

    @end_data.setter
    def end_data(self, end_data):
        """Sets the end_data of this SegmentRestObject.


        :param end_data: The end_data of this SegmentRestObject.  # noqa: E501
        :type: StartEndDataRestObject
        """

        self._end_data = end_data

    @property
    def last_measured_data(self):
        """Gets the last_measured_data of this SegmentRestObject.  # noqa: E501


        :return: The last_measured_data of this SegmentRestObject.  # noqa: E501
        :rtype: MeasuredDataRestObject
        """
        return self._last_measured_data

    @last_measured_data.setter
    def last_measured_data(self, last_measured_data):
        """Sets the last_measured_data of this SegmentRestObject.


        :param last_measured_data: The last_measured_data of this SegmentRestObject.  # noqa: E501
        :type: MeasuredDataRestObject
        """

        self._last_measured_data = last_measured_data

    @property
    def first_measured_data(self):
        """Gets the first_measured_data of this SegmentRestObject.  # noqa: E501


        :return: The first_measured_data of this SegmentRestObject.  # noqa: E501
        :rtype: MeasuredDataRestObject
        """
        return self._first_measured_data

    @first_measured_data.setter
    def first_measured_data(self, first_measured_data):
        """Sets the first_measured_data of this SegmentRestObject.


        :param first_measured_data: The first_measured_data of this SegmentRestObject.  # noqa: E501
        :type: MeasuredDataRestObject
        """

        self._first_measured_data = first_measured_data

    @property
    def landing_data(self):
        """Gets the landing_data of this SegmentRestObject.  # noqa: E501


        :return: The landing_data of this SegmentRestObject.  # noqa: E501
        :rtype: MeasuredDataRestObject
        """
        return self._landing_data

    @landing_data.setter
    def landing_data(self, landing_data):
        """Sets the landing_data of this SegmentRestObject.


        :param landing_data: The landing_data of this SegmentRestObject.  # noqa: E501
        :type: MeasuredDataRestObject
        """

        self._landing_data = landing_data

    @property
    def reduced_confidence(self):
        """Gets the reduced_confidence of this SegmentRestObject.  # noqa: E501


        :return: The reduced_confidence of this SegmentRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._reduced_confidence

    @reduced_confidence.setter
    def reduced_confidence(self, reduced_confidence):
        """Sets the reduced_confidence of this SegmentRestObject.


        :param reduced_confidence: The reduced_confidence of this SegmentRestObject.  # noqa: E501
        :type: list[str]
        """

        self._reduced_confidence = reduced_confidence

    @property
    def start_data(self):
        """Gets the start_data of this SegmentRestObject.  # noqa: E501


        :return: The start_data of this SegmentRestObject.  # noqa: E501
        :rtype: StartEndDataRestObject
        """
        return self._start_data

    @start_data.setter
    def start_data(self, start_data):
        """Sets the start_data of this SegmentRestObject.


        :param start_data: The start_data of this SegmentRestObject.  # noqa: E501
        :type: StartEndDataRestObject
        """

        self._start_data = start_data

    @property
    def trajectory_polynomial_x(self):
        """Gets the trajectory_polynomial_x of this SegmentRestObject.  # noqa: E501


        :return: The trajectory_polynomial_x of this SegmentRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_x

    @trajectory_polynomial_x.setter
    def trajectory_polynomial_x(self, trajectory_polynomial_x):
        """Sets the trajectory_polynomial_x of this SegmentRestObject.


        :param trajectory_polynomial_x: The trajectory_polynomial_x of this SegmentRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_x = trajectory_polynomial_x

    @property
    def trajectory_polynomial_y(self):
        """Gets the trajectory_polynomial_y of this SegmentRestObject.  # noqa: E501


        :return: The trajectory_polynomial_y of this SegmentRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_y

    @trajectory_polynomial_y.setter
    def trajectory_polynomial_y(self, trajectory_polynomial_y):
        """Sets the trajectory_polynomial_y of this SegmentRestObject.


        :param trajectory_polynomial_y: The trajectory_polynomial_y of this SegmentRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_y = trajectory_polynomial_y

    @property
    def trajectory_polynomial_z(self):
        """Gets the trajectory_polynomial_z of this SegmentRestObject.  # noqa: E501


        :return: The trajectory_polynomial_z of this SegmentRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_z

    @trajectory_polynomial_z.setter
    def trajectory_polynomial_z(self, trajectory_polynomial_z):
        """Sets the trajectory_polynomial_z of this SegmentRestObject.


        :param trajectory_polynomial_z: The trajectory_polynomial_z of this SegmentRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_z = trajectory_polynomial_z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
