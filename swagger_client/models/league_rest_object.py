# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeagueRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'id': 'int',
        'name': 'str',
        'link': 'str',
        'abbreviation': 'str',
        'name_short': 'str',
        'season_state': 'str',
        'has_wild_card': 'bool',
        'has_split_season': 'bool',
        'num_games': 'int',
        'has_playoff_points': 'bool',
        'num_teams': 'int',
        'num_wildcard_teams': 'int',
        'season_date_info': 'SeasonRestObject',
        'season': 'str',
        'org_code': 'str',
        'conferences_in_use': 'bool',
        'divisions_in_use': 'bool',
        'sport': 'SportRestObject',
        'time_zone': 'TimeZoneRestObject',
        'sort_order': 'int',
        'active': 'bool',
        'is_affiliated': 'bool',
        'rule_settings': 'list[RuleSettingsRestObject]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'id': 'id',
        'name': 'name',
        'link': 'link',
        'abbreviation': 'abbreviation',
        'name_short': 'nameShort',
        'season_state': 'seasonState',
        'has_wild_card': 'hasWildCard',
        'has_split_season': 'hasSplitSeason',
        'num_games': 'numGames',
        'has_playoff_points': 'hasPlayoffPoints',
        'num_teams': 'numTeams',
        'num_wildcard_teams': 'numWildcardTeams',
        'season_date_info': 'seasonDateInfo',
        'season': 'season',
        'org_code': 'orgCode',
        'conferences_in_use': 'conferencesInUse',
        'divisions_in_use': 'divisionsInUse',
        'sport': 'sport',
        'time_zone': 'timeZone',
        'sort_order': 'sortOrder',
        'active': 'active',
        'is_affiliated': 'isAffiliated',
        'rule_settings': 'ruleSettings'
    }

    def __init__(self, copyright=None, id=None, name=None, link=None, abbreviation=None, name_short=None, season_state=None, has_wild_card=None, has_split_season=None, num_games=None, has_playoff_points=None, num_teams=None, num_wildcard_teams=None, season_date_info=None, season=None, org_code=None, conferences_in_use=None, divisions_in_use=None, sport=None, time_zone=None, sort_order=None, active=None, is_affiliated=None, rule_settings=None):  # noqa: E501
        """LeagueRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._id = None
        self._name = None
        self._link = None
        self._abbreviation = None
        self._name_short = None
        self._season_state = None
        self._has_wild_card = None
        self._has_split_season = None
        self._num_games = None
        self._has_playoff_points = None
        self._num_teams = None
        self._num_wildcard_teams = None
        self._season_date_info = None
        self._season = None
        self._org_code = None
        self._conferences_in_use = None
        self._divisions_in_use = None
        self._sport = None
        self._time_zone = None
        self._sort_order = None
        self._active = None
        self._is_affiliated = None
        self._rule_settings = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if link is not None:
            self.link = link
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if name_short is not None:
            self.name_short = name_short
        if season_state is not None:
            self.season_state = season_state
        if has_wild_card is not None:
            self.has_wild_card = has_wild_card
        if has_split_season is not None:
            self.has_split_season = has_split_season
        if num_games is not None:
            self.num_games = num_games
        if has_playoff_points is not None:
            self.has_playoff_points = has_playoff_points
        if num_teams is not None:
            self.num_teams = num_teams
        if num_wildcard_teams is not None:
            self.num_wildcard_teams = num_wildcard_teams
        if season_date_info is not None:
            self.season_date_info = season_date_info
        if season is not None:
            self.season = season
        if org_code is not None:
            self.org_code = org_code
        if conferences_in_use is not None:
            self.conferences_in_use = conferences_in_use
        if divisions_in_use is not None:
            self.divisions_in_use = divisions_in_use
        if sport is not None:
            self.sport = sport
        if time_zone is not None:
            self.time_zone = time_zone
        if sort_order is not None:
            self.sort_order = sort_order
        if active is not None:
            self.active = active
        if is_affiliated is not None:
            self.is_affiliated = is_affiliated
        if rule_settings is not None:
            self.rule_settings = rule_settings

    @property
    def copyright(self):
        """Gets the copyright of this LeagueRestObject.  # noqa: E501


        :return: The copyright of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this LeagueRestObject.


        :param copyright: The copyright of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def id(self):
        """Gets the id of this LeagueRestObject.  # noqa: E501


        :return: The id of this LeagueRestObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeagueRestObject.


        :param id: The id of this LeagueRestObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LeagueRestObject.  # noqa: E501


        :return: The name of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeagueRestObject.


        :param name: The name of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def link(self):
        """Gets the link of this LeagueRestObject.  # noqa: E501


        :return: The link of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this LeagueRestObject.


        :param link: The link of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def abbreviation(self):
        """Gets the abbreviation of this LeagueRestObject.  # noqa: E501


        :return: The abbreviation of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this LeagueRestObject.


        :param abbreviation: The abbreviation of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def name_short(self):
        """Gets the name_short of this LeagueRestObject.  # noqa: E501


        :return: The name_short of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name_short

    @name_short.setter
    def name_short(self, name_short):
        """Sets the name_short of this LeagueRestObject.


        :param name_short: The name_short of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._name_short = name_short

    @property
    def season_state(self):
        """Gets the season_state of this LeagueRestObject.  # noqa: E501


        :return: The season_state of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season_state

    @season_state.setter
    def season_state(self, season_state):
        """Sets the season_state of this LeagueRestObject.


        :param season_state: The season_state of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._season_state = season_state

    @property
    def has_wild_card(self):
        """Gets the has_wild_card of this LeagueRestObject.  # noqa: E501


        :return: The has_wild_card of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_wild_card

    @has_wild_card.setter
    def has_wild_card(self, has_wild_card):
        """Sets the has_wild_card of this LeagueRestObject.


        :param has_wild_card: The has_wild_card of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._has_wild_card = has_wild_card

    @property
    def has_split_season(self):
        """Gets the has_split_season of this LeagueRestObject.  # noqa: E501


        :return: The has_split_season of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_split_season

    @has_split_season.setter
    def has_split_season(self, has_split_season):
        """Sets the has_split_season of this LeagueRestObject.


        :param has_split_season: The has_split_season of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._has_split_season = has_split_season

    @property
    def num_games(self):
        """Gets the num_games of this LeagueRestObject.  # noqa: E501


        :return: The num_games of this LeagueRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_games

    @num_games.setter
    def num_games(self, num_games):
        """Sets the num_games of this LeagueRestObject.


        :param num_games: The num_games of this LeagueRestObject.  # noqa: E501
        :type: int
        """

        self._num_games = num_games

    @property
    def has_playoff_points(self):
        """Gets the has_playoff_points of this LeagueRestObject.  # noqa: E501


        :return: The has_playoff_points of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_playoff_points

    @has_playoff_points.setter
    def has_playoff_points(self, has_playoff_points):
        """Sets the has_playoff_points of this LeagueRestObject.


        :param has_playoff_points: The has_playoff_points of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._has_playoff_points = has_playoff_points

    @property
    def num_teams(self):
        """Gets the num_teams of this LeagueRestObject.  # noqa: E501


        :return: The num_teams of this LeagueRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_teams

    @num_teams.setter
    def num_teams(self, num_teams):
        """Sets the num_teams of this LeagueRestObject.


        :param num_teams: The num_teams of this LeagueRestObject.  # noqa: E501
        :type: int
        """

        self._num_teams = num_teams

    @property
    def num_wildcard_teams(self):
        """Gets the num_wildcard_teams of this LeagueRestObject.  # noqa: E501


        :return: The num_wildcard_teams of this LeagueRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_wildcard_teams

    @num_wildcard_teams.setter
    def num_wildcard_teams(self, num_wildcard_teams):
        """Sets the num_wildcard_teams of this LeagueRestObject.


        :param num_wildcard_teams: The num_wildcard_teams of this LeagueRestObject.  # noqa: E501
        :type: int
        """

        self._num_wildcard_teams = num_wildcard_teams

    @property
    def season_date_info(self):
        """Gets the season_date_info of this LeagueRestObject.  # noqa: E501


        :return: The season_date_info of this LeagueRestObject.  # noqa: E501
        :rtype: SeasonRestObject
        """
        return self._season_date_info

    @season_date_info.setter
    def season_date_info(self, season_date_info):
        """Sets the season_date_info of this LeagueRestObject.


        :param season_date_info: The season_date_info of this LeagueRestObject.  # noqa: E501
        :type: SeasonRestObject
        """

        self._season_date_info = season_date_info

    @property
    def season(self):
        """Gets the season of this LeagueRestObject.  # noqa: E501


        :return: The season of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this LeagueRestObject.


        :param season: The season of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def org_code(self):
        """Gets the org_code of this LeagueRestObject.  # noqa: E501


        :return: The org_code of this LeagueRestObject.  # noqa: E501
        :rtype: str
        """
        return self._org_code

    @org_code.setter
    def org_code(self, org_code):
        """Sets the org_code of this LeagueRestObject.


        :param org_code: The org_code of this LeagueRestObject.  # noqa: E501
        :type: str
        """

        self._org_code = org_code

    @property
    def conferences_in_use(self):
        """Gets the conferences_in_use of this LeagueRestObject.  # noqa: E501


        :return: The conferences_in_use of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._conferences_in_use

    @conferences_in_use.setter
    def conferences_in_use(self, conferences_in_use):
        """Sets the conferences_in_use of this LeagueRestObject.


        :param conferences_in_use: The conferences_in_use of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._conferences_in_use = conferences_in_use

    @property
    def divisions_in_use(self):
        """Gets the divisions_in_use of this LeagueRestObject.  # noqa: E501


        :return: The divisions_in_use of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._divisions_in_use

    @divisions_in_use.setter
    def divisions_in_use(self, divisions_in_use):
        """Sets the divisions_in_use of this LeagueRestObject.


        :param divisions_in_use: The divisions_in_use of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._divisions_in_use = divisions_in_use

    @property
    def sport(self):
        """Gets the sport of this LeagueRestObject.  # noqa: E501


        :return: The sport of this LeagueRestObject.  # noqa: E501
        :rtype: SportRestObject
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this LeagueRestObject.


        :param sport: The sport of this LeagueRestObject.  # noqa: E501
        :type: SportRestObject
        """

        self._sport = sport

    @property
    def time_zone(self):
        """Gets the time_zone of this LeagueRestObject.  # noqa: E501


        :return: The time_zone of this LeagueRestObject.  # noqa: E501
        :rtype: TimeZoneRestObject
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this LeagueRestObject.


        :param time_zone: The time_zone of this LeagueRestObject.  # noqa: E501
        :type: TimeZoneRestObject
        """

        self._time_zone = time_zone

    @property
    def sort_order(self):
        """Gets the sort_order of this LeagueRestObject.  # noqa: E501


        :return: The sort_order of this LeagueRestObject.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this LeagueRestObject.


        :param sort_order: The sort_order of this LeagueRestObject.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def active(self):
        """Gets the active of this LeagueRestObject.  # noqa: E501


        :return: The active of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LeagueRestObject.


        :param active: The active of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def is_affiliated(self):
        """Gets the is_affiliated of this LeagueRestObject.  # noqa: E501


        :return: The is_affiliated of this LeagueRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_affiliated

    @is_affiliated.setter
    def is_affiliated(self, is_affiliated):
        """Sets the is_affiliated of this LeagueRestObject.


        :param is_affiliated: The is_affiliated of this LeagueRestObject.  # noqa: E501
        :type: bool
        """

        self._is_affiliated = is_affiliated

    @property
    def rule_settings(self):
        """Gets the rule_settings of this LeagueRestObject.  # noqa: E501


        :return: The rule_settings of this LeagueRestObject.  # noqa: E501
        :rtype: list[RuleSettingsRestObject]
        """
        return self._rule_settings

    @rule_settings.setter
    def rule_settings(self, rule_settings):
        """Sets the rule_settings of this LeagueRestObject.


        :param rule_settings: The rule_settings of this LeagueRestObject.  # noqa: E501
        :type: list[RuleSettingsRestObject]
        """

        self._rule_settings = rule_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
