# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatContainerRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'disclaimers': 'list[str]',
        'parameters': 'dict(str, object)',
        'type': 'StatType',
        'group': 'StatGroup',
        'total_splits': 'int',
        'exemptions': 'list[StatExemptionRestObject]',
        'splits': 'list[StatSplitsRestObject]',
        'stats': 'StatDataRestObject',
        'splits_tied_with_offset': 'list[StatSplitsRestObject]',
        'splits_tied_with_limit': 'list[StatSplitsRestObject]',
        'player': 'BaseballPersonRestObject',
        'team': 'BaseballTeamRestObject',
        'sport': 'SportRestObject',
        'season': 'str',
        'game_type': 'GameTypeEnum',
        'player_pool': 'PlayerPoolEnum'
    }

    attribute_map = {
        'copyright': 'copyright',
        'disclaimers': 'disclaimers',
        'parameters': 'parameters',
        'type': 'type',
        'group': 'group',
        'total_splits': 'totalSplits',
        'exemptions': 'exemptions',
        'splits': 'splits',
        'stats': 'stats',
        'splits_tied_with_offset': 'splitsTiedWithOffset',
        'splits_tied_with_limit': 'splitsTiedWithLimit',
        'player': 'player',
        'team': 'team',
        'sport': 'sport',
        'season': 'season',
        'game_type': 'gameType',
        'player_pool': 'playerPool'
    }

    def __init__(self, copyright=None, disclaimers=None, parameters=None, type=None, group=None, total_splits=None, exemptions=None, splits=None, stats=None, splits_tied_with_offset=None, splits_tied_with_limit=None, player=None, team=None, sport=None, season=None, game_type=None, player_pool=None):  # noqa: E501
        """StatContainerRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._disclaimers = None
        self._parameters = None
        self._type = None
        self._group = None
        self._total_splits = None
        self._exemptions = None
        self._splits = None
        self._stats = None
        self._splits_tied_with_offset = None
        self._splits_tied_with_limit = None
        self._player = None
        self._team = None
        self._sport = None
        self._season = None
        self._game_type = None
        self._player_pool = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if disclaimers is not None:
            self.disclaimers = disclaimers
        if parameters is not None:
            self.parameters = parameters
        if type is not None:
            self.type = type
        if group is not None:
            self.group = group
        if total_splits is not None:
            self.total_splits = total_splits
        if exemptions is not None:
            self.exemptions = exemptions
        if splits is not None:
            self.splits = splits
        if stats is not None:
            self.stats = stats
        if splits_tied_with_offset is not None:
            self.splits_tied_with_offset = splits_tied_with_offset
        if splits_tied_with_limit is not None:
            self.splits_tied_with_limit = splits_tied_with_limit
        if player is not None:
            self.player = player
        if team is not None:
            self.team = team
        if sport is not None:
            self.sport = sport
        if season is not None:
            self.season = season
        if game_type is not None:
            self.game_type = game_type
        if player_pool is not None:
            self.player_pool = player_pool

    @property
    def copyright(self):
        """Gets the copyright of this StatContainerRestObject.  # noqa: E501


        :return: The copyright of this StatContainerRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this StatContainerRestObject.


        :param copyright: The copyright of this StatContainerRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def disclaimers(self):
        """Gets the disclaimers of this StatContainerRestObject.  # noqa: E501


        :return: The disclaimers of this StatContainerRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._disclaimers

    @disclaimers.setter
    def disclaimers(self, disclaimers):
        """Sets the disclaimers of this StatContainerRestObject.


        :param disclaimers: The disclaimers of this StatContainerRestObject.  # noqa: E501
        :type: list[str]
        """

        self._disclaimers = disclaimers

    @property
    def parameters(self):
        """Gets the parameters of this StatContainerRestObject.  # noqa: E501


        :return: The parameters of this StatContainerRestObject.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StatContainerRestObject.


        :param parameters: The parameters of this StatContainerRestObject.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this StatContainerRestObject.  # noqa: E501


        :return: The type of this StatContainerRestObject.  # noqa: E501
        :rtype: StatType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatContainerRestObject.


        :param type: The type of this StatContainerRestObject.  # noqa: E501
        :type: StatType
        """

        self._type = type

    @property
    def group(self):
        """Gets the group of this StatContainerRestObject.  # noqa: E501


        :return: The group of this StatContainerRestObject.  # noqa: E501
        :rtype: StatGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this StatContainerRestObject.


        :param group: The group of this StatContainerRestObject.  # noqa: E501
        :type: StatGroup
        """

        self._group = group

    @property
    def total_splits(self):
        """Gets the total_splits of this StatContainerRestObject.  # noqa: E501


        :return: The total_splits of this StatContainerRestObject.  # noqa: E501
        :rtype: int
        """
        return self._total_splits

    @total_splits.setter
    def total_splits(self, total_splits):
        """Sets the total_splits of this StatContainerRestObject.


        :param total_splits: The total_splits of this StatContainerRestObject.  # noqa: E501
        :type: int
        """

        self._total_splits = total_splits

    @property
    def exemptions(self):
        """Gets the exemptions of this StatContainerRestObject.  # noqa: E501


        :return: The exemptions of this StatContainerRestObject.  # noqa: E501
        :rtype: list[StatExemptionRestObject]
        """
        return self._exemptions

    @exemptions.setter
    def exemptions(self, exemptions):
        """Sets the exemptions of this StatContainerRestObject.


        :param exemptions: The exemptions of this StatContainerRestObject.  # noqa: E501
        :type: list[StatExemptionRestObject]
        """

        self._exemptions = exemptions

    @property
    def splits(self):
        """Gets the splits of this StatContainerRestObject.  # noqa: E501


        :return: The splits of this StatContainerRestObject.  # noqa: E501
        :rtype: list[StatSplitsRestObject]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this StatContainerRestObject.


        :param splits: The splits of this StatContainerRestObject.  # noqa: E501
        :type: list[StatSplitsRestObject]
        """

        self._splits = splits

    @property
    def stats(self):
        """Gets the stats of this StatContainerRestObject.  # noqa: E501


        :return: The stats of this StatContainerRestObject.  # noqa: E501
        :rtype: StatDataRestObject
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this StatContainerRestObject.


        :param stats: The stats of this StatContainerRestObject.  # noqa: E501
        :type: StatDataRestObject
        """

        self._stats = stats

    @property
    def splits_tied_with_offset(self):
        """Gets the splits_tied_with_offset of this StatContainerRestObject.  # noqa: E501


        :return: The splits_tied_with_offset of this StatContainerRestObject.  # noqa: E501
        :rtype: list[StatSplitsRestObject]
        """
        return self._splits_tied_with_offset

    @splits_tied_with_offset.setter
    def splits_tied_with_offset(self, splits_tied_with_offset):
        """Sets the splits_tied_with_offset of this StatContainerRestObject.


        :param splits_tied_with_offset: The splits_tied_with_offset of this StatContainerRestObject.  # noqa: E501
        :type: list[StatSplitsRestObject]
        """

        self._splits_tied_with_offset = splits_tied_with_offset

    @property
    def splits_tied_with_limit(self):
        """Gets the splits_tied_with_limit of this StatContainerRestObject.  # noqa: E501


        :return: The splits_tied_with_limit of this StatContainerRestObject.  # noqa: E501
        :rtype: list[StatSplitsRestObject]
        """
        return self._splits_tied_with_limit

    @splits_tied_with_limit.setter
    def splits_tied_with_limit(self, splits_tied_with_limit):
        """Sets the splits_tied_with_limit of this StatContainerRestObject.


        :param splits_tied_with_limit: The splits_tied_with_limit of this StatContainerRestObject.  # noqa: E501
        :type: list[StatSplitsRestObject]
        """

        self._splits_tied_with_limit = splits_tied_with_limit

    @property
    def player(self):
        """Gets the player of this StatContainerRestObject.  # noqa: E501


        :return: The player of this StatContainerRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this StatContainerRestObject.


        :param player: The player of this StatContainerRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def team(self):
        """Gets the team of this StatContainerRestObject.  # noqa: E501


        :return: The team of this StatContainerRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this StatContainerRestObject.


        :param team: The team of this StatContainerRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def sport(self):
        """Gets the sport of this StatContainerRestObject.  # noqa: E501


        :return: The sport of this StatContainerRestObject.  # noqa: E501
        :rtype: SportRestObject
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this StatContainerRestObject.


        :param sport: The sport of this StatContainerRestObject.  # noqa: E501
        :type: SportRestObject
        """

        self._sport = sport

    @property
    def season(self):
        """Gets the season of this StatContainerRestObject.  # noqa: E501


        :return: The season of this StatContainerRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this StatContainerRestObject.


        :param season: The season of this StatContainerRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def game_type(self):
        """Gets the game_type of this StatContainerRestObject.  # noqa: E501


        :return: The game_type of this StatContainerRestObject.  # noqa: E501
        :rtype: GameTypeEnum
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this StatContainerRestObject.


        :param game_type: The game_type of this StatContainerRestObject.  # noqa: E501
        :type: GameTypeEnum
        """

        self._game_type = game_type

    @property
    def player_pool(self):
        """Gets the player_pool of this StatContainerRestObject.  # noqa: E501


        :return: The player_pool of this StatContainerRestObject.  # noqa: E501
        :rtype: PlayerPoolEnum
        """
        return self._player_pool

    @player_pool.setter
    def player_pool(self, player_pool):
        """Sets the player_pool of this StatContainerRestObject.


        :param player_pool: The player_pool of this StatContainerRestObject.  # noqa: E501
        :type: PlayerPoolEnum
        """

        self._player_pool = player_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatContainerRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatContainerRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
