# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballRunnerMovement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_base': 'str',
        'end_base': 'str',
        'event_type': 'str',
        'event_type_enum': 'EventType',
        'runner': 'BaseballPerson',
        'responsible_pitcher': 'BaseballPerson',
        'is_scoring_event': 'bool',
        'is_rbi': 'bool',
        'is_earned': 'bool',
        'play_index': 'int',
        'sequence': 'int',
        'out_number': 'int',
        'out_base': 'str',
        'movement_reason': 'str',
        'movement_reason_enum': 'RunnerDetailType',
        'credits': 'list[PlayCredit]',
        'origin_base': 'int',
        'start_base_int': 'int',
        'end_base_int': 'int',
        'out': 'bool',
        'scoring_event': 'bool',
        'team_unearned': 'bool',
        'events': 'dict(str, str)',
        'rbi': 'bool',
        'earned': 'bool'
    }

    attribute_map = {
        'start_base': 'startBase',
        'end_base': 'endBase',
        'event_type': 'eventType',
        'event_type_enum': 'eventTypeEnum',
        'runner': 'runner',
        'responsible_pitcher': 'responsiblePitcher',
        'is_scoring_event': 'isScoringEvent',
        'is_rbi': 'isRbi',
        'is_earned': 'isEarned',
        'play_index': 'playIndex',
        'sequence': 'sequence',
        'out_number': 'outNumber',
        'out_base': 'outBase',
        'movement_reason': 'movementReason',
        'movement_reason_enum': 'movementReasonEnum',
        'credits': 'credits',
        'origin_base': 'originBase',
        'start_base_int': 'startBaseInt',
        'end_base_int': 'endBaseInt',
        'out': 'out',
        'scoring_event': 'scoringEvent',
        'team_unearned': 'teamUnearned',
        'events': 'events',
        'rbi': 'rbi',
        'earned': 'earned'
    }

    def __init__(self, start_base=None, end_base=None, event_type=None, event_type_enum=None, runner=None, responsible_pitcher=None, is_scoring_event=None, is_rbi=None, is_earned=None, play_index=None, sequence=None, out_number=None, out_base=None, movement_reason=None, movement_reason_enum=None, credits=None, origin_base=None, start_base_int=None, end_base_int=None, out=None, scoring_event=None, team_unearned=None, events=None, rbi=None, earned=None):  # noqa: E501
        """BaseballRunnerMovement - a model defined in Swagger"""  # noqa: E501
        self._start_base = None
        self._end_base = None
        self._event_type = None
        self._event_type_enum = None
        self._runner = None
        self._responsible_pitcher = None
        self._is_scoring_event = None
        self._is_rbi = None
        self._is_earned = None
        self._play_index = None
        self._sequence = None
        self._out_number = None
        self._out_base = None
        self._movement_reason = None
        self._movement_reason_enum = None
        self._credits = None
        self._origin_base = None
        self._start_base_int = None
        self._end_base_int = None
        self._out = None
        self._scoring_event = None
        self._team_unearned = None
        self._events = None
        self._rbi = None
        self._earned = None
        self.discriminator = None
        if start_base is not None:
            self.start_base = start_base
        if end_base is not None:
            self.end_base = end_base
        if event_type is not None:
            self.event_type = event_type
        if event_type_enum is not None:
            self.event_type_enum = event_type_enum
        if runner is not None:
            self.runner = runner
        if responsible_pitcher is not None:
            self.responsible_pitcher = responsible_pitcher
        if is_scoring_event is not None:
            self.is_scoring_event = is_scoring_event
        if is_rbi is not None:
            self.is_rbi = is_rbi
        if is_earned is not None:
            self.is_earned = is_earned
        if play_index is not None:
            self.play_index = play_index
        if sequence is not None:
            self.sequence = sequence
        if out_number is not None:
            self.out_number = out_number
        if out_base is not None:
            self.out_base = out_base
        if movement_reason is not None:
            self.movement_reason = movement_reason
        if movement_reason_enum is not None:
            self.movement_reason_enum = movement_reason_enum
        if credits is not None:
            self.credits = credits
        if origin_base is not None:
            self.origin_base = origin_base
        if start_base_int is not None:
            self.start_base_int = start_base_int
        if end_base_int is not None:
            self.end_base_int = end_base_int
        if out is not None:
            self.out = out
        if scoring_event is not None:
            self.scoring_event = scoring_event
        if team_unearned is not None:
            self.team_unearned = team_unearned
        if events is not None:
            self.events = events
        if rbi is not None:
            self.rbi = rbi
        if earned is not None:
            self.earned = earned

    @property
    def start_base(self):
        """Gets the start_base of this BaseballRunnerMovement.  # noqa: E501


        :return: The start_base of this BaseballRunnerMovement.  # noqa: E501
        :rtype: str
        """
        return self._start_base

    @start_base.setter
    def start_base(self, start_base):
        """Sets the start_base of this BaseballRunnerMovement.


        :param start_base: The start_base of this BaseballRunnerMovement.  # noqa: E501
        :type: str
        """

        self._start_base = start_base

    @property
    def end_base(self):
        """Gets the end_base of this BaseballRunnerMovement.  # noqa: E501


        :return: The end_base of this BaseballRunnerMovement.  # noqa: E501
        :rtype: str
        """
        return self._end_base

    @end_base.setter
    def end_base(self, end_base):
        """Sets the end_base of this BaseballRunnerMovement.


        :param end_base: The end_base of this BaseballRunnerMovement.  # noqa: E501
        :type: str
        """

        self._end_base = end_base

    @property
    def event_type(self):
        """Gets the event_type of this BaseballRunnerMovement.  # noqa: E501


        :return: The event_type of this BaseballRunnerMovement.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this BaseballRunnerMovement.


        :param event_type: The event_type of this BaseballRunnerMovement.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def event_type_enum(self):
        """Gets the event_type_enum of this BaseballRunnerMovement.  # noqa: E501


        :return: The event_type_enum of this BaseballRunnerMovement.  # noqa: E501
        :rtype: EventType
        """
        return self._event_type_enum

    @event_type_enum.setter
    def event_type_enum(self, event_type_enum):
        """Sets the event_type_enum of this BaseballRunnerMovement.


        :param event_type_enum: The event_type_enum of this BaseballRunnerMovement.  # noqa: E501
        :type: EventType
        """

        self._event_type_enum = event_type_enum

    @property
    def runner(self):
        """Gets the runner of this BaseballRunnerMovement.  # noqa: E501


        :return: The runner of this BaseballRunnerMovement.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this BaseballRunnerMovement.


        :param runner: The runner of this BaseballRunnerMovement.  # noqa: E501
        :type: BaseballPerson
        """

        self._runner = runner

    @property
    def responsible_pitcher(self):
        """Gets the responsible_pitcher of this BaseballRunnerMovement.  # noqa: E501


        :return: The responsible_pitcher of this BaseballRunnerMovement.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._responsible_pitcher

    @responsible_pitcher.setter
    def responsible_pitcher(self, responsible_pitcher):
        """Sets the responsible_pitcher of this BaseballRunnerMovement.


        :param responsible_pitcher: The responsible_pitcher of this BaseballRunnerMovement.  # noqa: E501
        :type: BaseballPerson
        """

        self._responsible_pitcher = responsible_pitcher

    @property
    def is_scoring_event(self):
        """Gets the is_scoring_event of this BaseballRunnerMovement.  # noqa: E501


        :return: The is_scoring_event of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._is_scoring_event

    @is_scoring_event.setter
    def is_scoring_event(self, is_scoring_event):
        """Sets the is_scoring_event of this BaseballRunnerMovement.


        :param is_scoring_event: The is_scoring_event of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._is_scoring_event = is_scoring_event

    @property
    def is_rbi(self):
        """Gets the is_rbi of this BaseballRunnerMovement.  # noqa: E501


        :return: The is_rbi of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._is_rbi

    @is_rbi.setter
    def is_rbi(self, is_rbi):
        """Sets the is_rbi of this BaseballRunnerMovement.


        :param is_rbi: The is_rbi of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._is_rbi = is_rbi

    @property
    def is_earned(self):
        """Gets the is_earned of this BaseballRunnerMovement.  # noqa: E501


        :return: The is_earned of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._is_earned

    @is_earned.setter
    def is_earned(self, is_earned):
        """Sets the is_earned of this BaseballRunnerMovement.


        :param is_earned: The is_earned of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._is_earned = is_earned

    @property
    def play_index(self):
        """Gets the play_index of this BaseballRunnerMovement.  # noqa: E501


        :return: The play_index of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._play_index

    @play_index.setter
    def play_index(self, play_index):
        """Sets the play_index of this BaseballRunnerMovement.


        :param play_index: The play_index of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._play_index = play_index

    @property
    def sequence(self):
        """Gets the sequence of this BaseballRunnerMovement.  # noqa: E501


        :return: The sequence of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this BaseballRunnerMovement.


        :param sequence: The sequence of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def out_number(self):
        """Gets the out_number of this BaseballRunnerMovement.  # noqa: E501


        :return: The out_number of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._out_number

    @out_number.setter
    def out_number(self, out_number):
        """Sets the out_number of this BaseballRunnerMovement.


        :param out_number: The out_number of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._out_number = out_number

    @property
    def out_base(self):
        """Gets the out_base of this BaseballRunnerMovement.  # noqa: E501


        :return: The out_base of this BaseballRunnerMovement.  # noqa: E501
        :rtype: str
        """
        return self._out_base

    @out_base.setter
    def out_base(self, out_base):
        """Sets the out_base of this BaseballRunnerMovement.


        :param out_base: The out_base of this BaseballRunnerMovement.  # noqa: E501
        :type: str
        """

        self._out_base = out_base

    @property
    def movement_reason(self):
        """Gets the movement_reason of this BaseballRunnerMovement.  # noqa: E501


        :return: The movement_reason of this BaseballRunnerMovement.  # noqa: E501
        :rtype: str
        """
        return self._movement_reason

    @movement_reason.setter
    def movement_reason(self, movement_reason):
        """Sets the movement_reason of this BaseballRunnerMovement.


        :param movement_reason: The movement_reason of this BaseballRunnerMovement.  # noqa: E501
        :type: str
        """

        self._movement_reason = movement_reason

    @property
    def movement_reason_enum(self):
        """Gets the movement_reason_enum of this BaseballRunnerMovement.  # noqa: E501


        :return: The movement_reason_enum of this BaseballRunnerMovement.  # noqa: E501
        :rtype: RunnerDetailType
        """
        return self._movement_reason_enum

    @movement_reason_enum.setter
    def movement_reason_enum(self, movement_reason_enum):
        """Sets the movement_reason_enum of this BaseballRunnerMovement.


        :param movement_reason_enum: The movement_reason_enum of this BaseballRunnerMovement.  # noqa: E501
        :type: RunnerDetailType
        """

        self._movement_reason_enum = movement_reason_enum

    @property
    def credits(self):
        """Gets the credits of this BaseballRunnerMovement.  # noqa: E501


        :return: The credits of this BaseballRunnerMovement.  # noqa: E501
        :rtype: list[PlayCredit]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this BaseballRunnerMovement.


        :param credits: The credits of this BaseballRunnerMovement.  # noqa: E501
        :type: list[PlayCredit]
        """

        self._credits = credits

    @property
    def origin_base(self):
        """Gets the origin_base of this BaseballRunnerMovement.  # noqa: E501


        :return: The origin_base of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._origin_base

    @origin_base.setter
    def origin_base(self, origin_base):
        """Sets the origin_base of this BaseballRunnerMovement.


        :param origin_base: The origin_base of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._origin_base = origin_base

    @property
    def start_base_int(self):
        """Gets the start_base_int of this BaseballRunnerMovement.  # noqa: E501


        :return: The start_base_int of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._start_base_int

    @start_base_int.setter
    def start_base_int(self, start_base_int):
        """Sets the start_base_int of this BaseballRunnerMovement.


        :param start_base_int: The start_base_int of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._start_base_int = start_base_int

    @property
    def end_base_int(self):
        """Gets the end_base_int of this BaseballRunnerMovement.  # noqa: E501


        :return: The end_base_int of this BaseballRunnerMovement.  # noqa: E501
        :rtype: int
        """
        return self._end_base_int

    @end_base_int.setter
    def end_base_int(self, end_base_int):
        """Sets the end_base_int of this BaseballRunnerMovement.


        :param end_base_int: The end_base_int of this BaseballRunnerMovement.  # noqa: E501
        :type: int
        """

        self._end_base_int = end_base_int

    @property
    def out(self):
        """Gets the out of this BaseballRunnerMovement.  # noqa: E501


        :return: The out of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this BaseballRunnerMovement.


        :param out: The out of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._out = out

    @property
    def scoring_event(self):
        """Gets the scoring_event of this BaseballRunnerMovement.  # noqa: E501


        :return: The scoring_event of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._scoring_event

    @scoring_event.setter
    def scoring_event(self, scoring_event):
        """Sets the scoring_event of this BaseballRunnerMovement.


        :param scoring_event: The scoring_event of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._scoring_event = scoring_event

    @property
    def team_unearned(self):
        """Gets the team_unearned of this BaseballRunnerMovement.  # noqa: E501


        :return: The team_unearned of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._team_unearned

    @team_unearned.setter
    def team_unearned(self, team_unearned):
        """Sets the team_unearned of this BaseballRunnerMovement.


        :param team_unearned: The team_unearned of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._team_unearned = team_unearned

    @property
    def events(self):
        """Gets the events of this BaseballRunnerMovement.  # noqa: E501


        :return: The events of this BaseballRunnerMovement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this BaseballRunnerMovement.


        :param events: The events of this BaseballRunnerMovement.  # noqa: E501
        :type: dict(str, str)
        """

        self._events = events

    @property
    def rbi(self):
        """Gets the rbi of this BaseballRunnerMovement.  # noqa: E501


        :return: The rbi of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._rbi

    @rbi.setter
    def rbi(self, rbi):
        """Sets the rbi of this BaseballRunnerMovement.


        :param rbi: The rbi of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._rbi = rbi

    @property
    def earned(self):
        """Gets the earned of this BaseballRunnerMovement.  # noqa: E501


        :return: The earned of this BaseballRunnerMovement.  # noqa: E501
        :rtype: bool
        """
        return self._earned

    @earned.setter
    def earned(self, earned):
        """Sets the earned of this BaseballRunnerMovement.


        :param earned: The earned of this BaseballRunnerMovement.  # noqa: E501
        :type: bool
        """

        self._earned = earned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballRunnerMovement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballRunnerMovement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
