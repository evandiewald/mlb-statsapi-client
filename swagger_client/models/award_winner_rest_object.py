# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AwardWinnerRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rank': 'str',
        'team': 'BaseballTeamRestObject',
        'player': 'BaseballPersonRestObject',
        'coach': 'BaseballPersonRestObject',
        'copyright': 'str'
    }

    attribute_map = {
        'rank': 'rank',
        'team': 'team',
        'player': 'player',
        'coach': 'coach',
        'copyright': 'copyright'
    }

    def __init__(self, rank=None, team=None, player=None, coach=None, copyright=None):  # noqa: E501
        """AwardWinnerRestObject - a model defined in Swagger"""  # noqa: E501
        self._rank = None
        self._team = None
        self._player = None
        self._coach = None
        self._copyright = None
        self.discriminator = None
        if rank is not None:
            self.rank = rank
        if team is not None:
            self.team = team
        if player is not None:
            self.player = player
        if coach is not None:
            self.coach = coach
        if copyright is not None:
            self.copyright = copyright

    @property
    def rank(self):
        """Gets the rank of this AwardWinnerRestObject.  # noqa: E501


        :return: The rank of this AwardWinnerRestObject.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this AwardWinnerRestObject.


        :param rank: The rank of this AwardWinnerRestObject.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def team(self):
        """Gets the team of this AwardWinnerRestObject.  # noqa: E501


        :return: The team of this AwardWinnerRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AwardWinnerRestObject.


        :param team: The team of this AwardWinnerRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def player(self):
        """Gets the player of this AwardWinnerRestObject.  # noqa: E501


        :return: The player of this AwardWinnerRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this AwardWinnerRestObject.


        :param player: The player of this AwardWinnerRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def coach(self):
        """Gets the coach of this AwardWinnerRestObject.  # noqa: E501


        :return: The coach of this AwardWinnerRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this AwardWinnerRestObject.


        :param coach: The coach of this AwardWinnerRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._coach = coach

    @property
    def copyright(self):
        """Gets the copyright of this AwardWinnerRestObject.  # noqa: E501


        :return: The copyright of this AwardWinnerRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this AwardWinnerRestObject.


        :param copyright: The copyright of this AwardWinnerRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwardWinnerRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwardWinnerRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
