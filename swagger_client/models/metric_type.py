# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NONE = "NONE"
    SPIN_RATE = "SPIN_RATE"
    EXTENSION = "EXTENSION"
    PITCH_SPEED = "PITCH_SPEED"
    PERCEIVED_PITCH_SPEED = "PERCEIVED_PITCH_SPEED"
    PRIMARY_LEAD = "PRIMARY_LEAD"
    LAUNCH_SPEED = "LAUNCH_SPEED"
    LAUNCH_ANGLE = "LAUNCH_ANGLE"
    SECONDARY_LEAD = "SECONDARY_LEAD"
    TOP_SPEED = "TOP_SPEED"
    ACCELERATION = "ACCELERATION"
    TOP_ACCELERATION = "TOP_ACCELERATION"
    HOME_TO_FIRST = "HOME_TO_FIRST"
    HOME_TO_SECOND = "HOME_TO_SECOND"
    HOME_TO_THIRD = "HOME_TO_THIRD"
    HOME_TO_HOME = "HOME_TO_HOME"
    FIRST_TO_SECOND = "FIRST_TO_SECOND"
    STEAL_FIRST_TO_SECOND = "STEAL_FIRST_TO_SECOND"
    TAG_FIRST_TO_SECOND = "TAG_FIRST_TO_SECOND"
    FIRST_TO_SECOND_ALL = "FIRST_TO_SECOND_ALL"
    FIRST_TO_THIRD = "FIRST_TO_THIRD"
    FIRST_TO_HOME = "FIRST_TO_HOME"
    SECOND_TO_THIRD = "SECOND_TO_THIRD"
    STEAL_SECOND_TO_THIRD = "STEAL_SECOND_TO_THIRD"
    TAG_SECOND_TO_THIRD = "TAG_SECOND_TO_THIRD"
    SECOND_TO_THIRD_ALL = "SECOND_TO_THIRD_ALL"
    SECOND_TO_HOME = "SECOND_TO_HOME"
    THIRD_TO_HOME = "THIRD_TO_HOME"
    STEAL_THIRD_TO_HOME = "STEAL_THIRD_TO_HOME"
    TAG_THIRD_TO_HOME = "TAG_THIRD_TO_HOME"
    THIRD_TO_HOME_ALL = "THIRD_TO_HOME_ALL"
    FIRST_STEP = "FIRST_STEP"
    FIRST_STEP_STEALING = "FIRST_STEP_STEALING"
    FIRST_STEP_TAG = "FIRST_STEP_TAG"
    FIRST_STEP_ALL = "FIRST_STEP_ALL"
    FIRST_STEP_EFFICIENCY = "FIRST_STEP_EFFICIENCY"
    POP_TIME = "POP_TIME"
    POP_TIME_1B = "POP_TIME_1B"
    POP_TIME_2B = "POP_TIME_2B"
    POP_TIME_3B = "POP_TIME_3B"
    POSITIONING = "POSITIONING"
    ROUTE_EFFICIENCY = "ROUTE_EFFICIENCY"
    EXCHANGE = "EXCHANGE"
    EXCHANGE_1B = "EXCHANGE_1B"
    EXCHANGE_2B = "EXCHANGE_2B"
    EXCHANGE_3B = "EXCHANGE_3B"
    CATCHER_EXCHANGE = "CATCHER_EXCHANGE"
    ARM_STRENGTH = "ARM_STRENGTH"
    ARM_STRENGTH_1B = "ARM_STRENGTH_1B"
    ARM_STRENGTH_2B = "ARM_STRENGTH_2B"
    ARM_STRENGTH_3B = "ARM_STRENGTH_3B"
    ARM_STRENGTH_HP = "ARM_STRENGTH_HP"
    THROWING_ACCURACY = "THROWING_ACCURACY"
    THROW_ANGLE = "THROW_ANGLE"
    THROW_DISTANCE = "THROW_DISTANCE"
    DISTANCE_COVERED = "DISTANCE_COVERED"
    PITCHER_RELEASE = "PITCHER_RELEASE"
    RELEASE_BACKSPIN_RATE = "RELEASE_BACKSPIN_RATE"
    RELEASE_SIDESPIN_RATE = "RELEASE_SIDESPIN_RATE"
    GENERATED_SPEED = "GENERATED_SPEED"
    ESTIMATED_SWING_SPEED = "ESTIMATED_SWING_SPEED"
    PITCHER_POSITION = "PITCHER_POSITION"
    DISTANCE_FROM_BALL_LANDING = "DISTANCE_FROM_BALL_LANDING"
    PROJECTED_DISTANCE_FROM_BALL_LANDING = "PROJECTED_DISTANCE_FROM_BALL_LANDING"
    ANGLE_TO_BALL_LANDING = "ANGLE_TO_BALL_LANDING"
    ANGLE_TO_BALL_CAUGHT = "ANGLE_TO_BALL_CAUGHT"
    MAX_HEIGHT = "MAX_HEIGHT"
    HIT_TRAVEL_TIME = "HIT_TRAVEL_TIME"
    HANG_TIME = "HANG_TIME"
    OPPORTUNITY_TIME_GROUND = "OPPORTUNITY_TIME_GROUND"
    HIT_DISTANCE = "HIT_DISTANCE"
    HIT_TRAVEL_DISTANCE = "HIT_TRAVEL_DISTANCE"
    HOME_RUN_DISTANCE = "HOME_RUN_DISTANCE"
    HIT_TRAJECTORY = "HIT_TRAJECTORY"
    START_PLAYER_POSITION = "START_PLAYER_POSITION"
    END_PLAYER_POSITION = "END_PLAYER_POSITION"
    START_PLAYER_ANGLE = "START_PLAYER_ANGLE"
    END_PLAYER_ANGLE = "END_PLAYER_ANGLE"
    LAUNCH_SPIN_RATE = "LAUNCH_SPIN_RATE"
    GYROSPIN_RATE = "GYROSPIN_RATE"
    FIELDING_ZONE = "FIELDING_ZONE"
    BARRELED_BALL = "BARRELED_BALL"
    SPIN_AXIS_OCTANTS = "SPIN_AXIS_OCTANTS"
    SHIFT_CLASSIFICATION = "SHIFT_CLASSIFICATION"
    OUTFIELDER_DISTANCE_TO_FENCE = "OUTFIELDER_DISTANCE_TO_FENCE"
    BALL_PROJ_DISTANCE_FROM_FENCE = "BALL_PROJ_DISTANCE_FROM_FENCE"
    DISTANCE_FROM_BASE_ON_THROW = "DISTANCE_FROM_BASE_ON_THROW"
    INFIELD_OUT_OF_POSITION_CODE = "INFIELD_OUT_OF_POSITION_CODE"
    OUTFIELD_OUT_OF_POSITION_CODE = "OUTFIELD_OUT_OF_POSITION_CODE"
    SPRINT_SPEED = "SPRINT_SPEED"
    STARTUP_TIME = "STARTUP_TIME"
    ROUTE_TO_SPRINT_SPEED = "ROUTE_TO_SPRINT_SPEED"
    VERTICAL_BREAK = "VERTICAL_BREAK"
    VERTICAL_BREAK_INDUCED = "VERTICAL_BREAK_INDUCED"
    HORIZONTAL_BREAK = "HORIZONTAL_BREAK"
    TIME_OUT_OF_BOX = "TIME_OUT_OF_BOX"
    WALL_BALL_CLASSIFICATION = "WALL_BALL_CLASSIFICATION"
    FIELDER_BURST_DISTANCE = "FIELDER_BURST_DISTANCE"
    FIELDER_REACTION_DISTANCE = "FIELDER_REACTION_DISTANCE"
    FIELDER_ROUTING_DISTANCE = "FIELDER_ROUTING_DISTANCE"
    INTERCEPT = "INTERCEPT"
    GAMEDAY_ZONE = "GAMEDAY_ZONE"
    DELIVERY_TIME = "DELIVERY_TIME"
    LIMB_APEX_SKELETAL = "LIMB_APEX_SKELETAL"
    DISTANCE_TO_CATCHERS_MITT_SKELETAL = "DISTANCE_TO_CATCHERS_MITT_SKELETAL"
    PLATE_LOCATION_X = "PLATE_LOCATION_X"
    PLATE_LOCATION_Z = "PLATE_LOCATION_Z"
    HIT_BEARING_ANGLE = "HIT_BEARING_ANGLE"
    ACTIVE_SPIN_ANGLE = "ACTIVE_SPIN_ANGLE"
    BACKSPIN = "BACKSPIN"
    SIDESPIN = "SIDESPIN"
    GYROSPIN = "GYROSPIN"
    CATCH_PROBABILITY = "CATCH_PROBABILITY"
    HIT_PROBABILITY = "HIT_PROBABILITY"
    INTENDED_PLATE_X = "INTENDED_PLATE_X"
    BALLPARK_HOME_RUN_COUNT = "BALLPARK_HOME_RUN_COUNT"
    JUMP_DISTANCE = "JUMP_DISTANCE"
    EXPECTED_SLUGGING = "EXPECTED_SLUGGING"
    EXPECTED_WOBA = "EXPECTED_WOBA"
    OUTS_ABOVE_AVERAGE = "OUTS_ABOVE_AVERAGE"
    FIELDING_RUNS_PREVENTED = "FIELDING_RUNS_PREVENTED"
    STOLEN_BASE_PROBABILITY = "STOLEN_BASE_PROBABILITY"
    WIN_PROBABILITY_ADDED = "WIN_PROBABILITY_ADDED"
    SAC_FLY_PROBABILITY = "SAC_FLY_PROBABILITY"
    ATTACK_ANGLE = "ATTACK_ANGLE"
    BAT_SPEED = "BAT_SPEED"
    HOME_RUN_X_BALLPARKS = "HOME_RUN_X_BALLPARKS"
    PLAYER_TRACKING = "PLAYER_TRACKING"
    BALL_TRACKING = "BALL_TRACKING"
    LAUNCH_VECTOR = "LAUNCH_VECTOR"
    SPIN_ANGLE = "SPIN_ANGLE"
    HIT_SPIN_ANGLE = "HIT_SPIN_ANGLE"
    ESTIMATED_FIRST_STEP_TEMPORARY = "ESTIMATED_FIRST_STEP_TEMPORARY"
    ESTIMATED_EXIT_VELOCITY_TEMPORARY = "ESTIMATED_EXIT_VELOCITY_TEMPORARY"
    HIT_DISTANCE_AT_8_FEET = "HIT_DISTANCE_AT_8_FEET"
    HANG_TIME_AT_8_FEET = "HANG_TIME_AT_8_FEET"
    DISTANCE_COVERED_BREAKDOWN = "DISTANCE_COVERED_BREAKDOWN"
    HIT_TRAJECTORY_NOT_TYPE = "HIT_TRAJECTORY_NOT_TYPE"
    BASERUNNER_MARKERS = "BASERUNNER_MARKERS"
    SPEED_IN_THE_LAST_SECONDS = "SPEED_IN_THE_LAST_SECONDS"
    TOTAL_DISTANCE_COVERED = "TOTAL_DISTANCE_COVERED"
    BATTED_BALL_TRAVEL_TIME_Z0 = "BATTED_BALL_TRAVEL_TIME_Z0"
    BATTED_BALL_TRAVEL_TIME_Z8 = "BATTED_BALL_TRAVEL_TIME_Z8"
    BATTED_BALL_TRAVEL_TIME_ZI = "BATTED_BALL_TRAVEL_TIME_ZI"
    BATTED_BALL_TRAVEL_TIME_ZF = "BATTED_BALL_TRAVEL_TIME_ZF"
    OPPORTUNITY_TIME_Z8 = "OPPORTUNITY_TIME_Z8"
    OPPORTUNITY_TIME_ZI = "OPPORTUNITY_TIME_ZI"
    PLATE_TIME_Y0 = "PLATE_TIME_Y0"
    PLATE_TIME_Y17 = "PLATE_TIME_Y17"
    PLATE_TIME_YI = "PLATE_TIME_YI"
    PROJECTED_LANDING_POSITION = "PROJECTED_LANDING_POSITION"
    DISTANCE_TO_CATCHERS_MITT = "DISTANCE_TO_CATCHERS_MITT"
    BATTED_BALL_TRAVEL_DISTANCE_Z0 = "BATTED_BALL_TRAVEL_DISTANCE_Z0"
    BATTED_BALL_TRAVEL_DISTANCE_Z8 = "BATTED_BALL_TRAVEL_DISTANCE_Z8"
    BATTED_BALL_TRAVEL_DISTANCE_ZI = "BATTED_BALL_TRAVEL_DISTANCE_ZI"
    BATTED_BALL_TRAVEL_DISTANCE_ZF = "BATTED_BALL_TRAVEL_DISTANCE_ZF"
    SACRIFICE_FLY = "SACRIFICE_FLY"
    EXCHANGE_DISTANCE = "EXCHANGE_DISTANCE"
    PLATE_SPEED = "PLATE_SPEED"
    PITCH_LAUNCH_DIRECTION = "PITCH_LAUNCH_DIRECTION"
    PITCH_LAUNCH_ANGLE = "PITCH_LAUNCH_ANGLE"
    HIT_LAUNCH_DIRECTION = "HIT_LAUNCH_DIRECTION"
    BALL_HEIGHT_AT_THE_FENCE = "BALL_HEIGHT_AT_THE_FENCE"
    PROJECTED_DISTANCE_OF_BALL_FROM_FENCE = "PROJECTED_DISTANCE_OF_BALL_FROM_FENCE"
    FIELDER_ENGAGEMENT = "FIELDER_ENGAGEMENT"
    KEY_STEP = "KEY_STEP"
    BURST = "BURST"
    REVOLUTIONS_HAND_TO_PLATE = "REVOLUTIONS_HAND_TO_PLATE"
    INFERRED_BACKSPIN_RATE = "INFERRED_BACKSPIN_RATE"
    INFERRED_SIDESPIN_RATE = "INFERRED_SIDESPIN_RATE"
    INFERRED_GYROSPIN_RATE = "INFERRED_GYROSPIN_RATE"
    RELATIVE_STRIKE_ZONE_LOCATION = "RELATIVE_STRIKE_ZONE_LOCATION"
    RELATIVE_STRIKE_ZONE_LOCATION_X = "RELATIVE_STRIKE_ZONE_LOCATION_X"
    RELATIVE_STRIKE_ZONE_LOCATION_Z = "RELATIVE_STRIKE_ZONE_LOCATION_Z"
    ATTACK_ZONES = "ATTACK_ZONES"
    THROW_DISTANCE_WITH_BOUNCES = "THROW_DISTANCE_WITH_BOUNCES"
    HIT_TRACKING_PCT = "HIT_TRACKING_PCT"
    FIELDER_JUMP_DISTANCE = "FIELDER_JUMP_DISTANCE"
    BALL_LOCATION_AT_300_FEET = "BALL_LOCATION_AT_300_FEET"
    SPIN_RATE_PER_MPH = "SPIN_RATE_PER_MPH"
    SCOOP_RADIUS = "SCOOP_RADIUS"
    BLOCK_RADIUS = "BLOCK_RADIUS"
    CATCHER_GLOVE_POSITION = "CATCHER_GLOVE_POSITION"
    BATTER_BIOMECHANICS = "BATTER_BIOMECHANICS"
    PITCHER_BIOMECHANICS = "PITCHER_BIOMECHANICS"
    DISTANCE_FROM_SWEET_SPOT = "DISTANCE_FROM_SWEET_SPOT"
    POSE_TRACKING_COMPLETENESS = "POSE_TRACKING_COMPLETENESS"
    PLAYER_TRACKING_COMPLETENESS = "PLAYER_TRACKING_COMPLETENESS"
    SWORD_SWING = "SWORD_SWING"
    SWING_LENGTH = "SWING_LENGTH"
    PITCHING_POSITION_TESTING = "PITCHING_POSITION_TESTING"
    OUTS_ABOVE_AVERAGE_TESTING = "OUTS_ABOVE_AVERAGE_TESTING"
    FIELDING_RUNS_PREVENTED_TESTING = "FIELDING_RUNS_PREVENTED_TESTING"
    RUN_VALUE_ADDED = "RUN_VALUE_ADDED"
    STRIKE_PROBABILITY = "STRIKE_PROBABILITY"
    STRIKE_VALUE_ADDED = "STRIKE_VALUE_ADDED"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """MetricType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
