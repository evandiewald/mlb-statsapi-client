# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhotoRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'photo_type': 'str',
        'default_res': 'str',
        'double_res': 'str',
        'triple_res': 'str',
        'low_res': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'photo_type': 'photoType',
        'default_res': 'defaultRes',
        'double_res': 'doubleRes',
        'triple_res': 'tripleRes',
        'low_res': 'lowRes'
    }

    def __init__(self, copyright=None, photo_type=None, default_res=None, double_res=None, triple_res=None, low_res=None):  # noqa: E501
        """PhotoRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._photo_type = None
        self._default_res = None
        self._double_res = None
        self._triple_res = None
        self._low_res = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if photo_type is not None:
            self.photo_type = photo_type
        if default_res is not None:
            self.default_res = default_res
        if double_res is not None:
            self.double_res = double_res
        if triple_res is not None:
            self.triple_res = triple_res
        if low_res is not None:
            self.low_res = low_res

    @property
    def copyright(self):
        """Gets the copyright of this PhotoRestObject.  # noqa: E501


        :return: The copyright of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PhotoRestObject.


        :param copyright: The copyright of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def photo_type(self):
        """Gets the photo_type of this PhotoRestObject.  # noqa: E501


        :return: The photo_type of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._photo_type

    @photo_type.setter
    def photo_type(self, photo_type):
        """Sets the photo_type of this PhotoRestObject.


        :param photo_type: The photo_type of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._photo_type = photo_type

    @property
    def default_res(self):
        """Gets the default_res of this PhotoRestObject.  # noqa: E501


        :return: The default_res of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._default_res

    @default_res.setter
    def default_res(self, default_res):
        """Sets the default_res of this PhotoRestObject.


        :param default_res: The default_res of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._default_res = default_res

    @property
    def double_res(self):
        """Gets the double_res of this PhotoRestObject.  # noqa: E501


        :return: The double_res of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._double_res

    @double_res.setter
    def double_res(self, double_res):
        """Sets the double_res of this PhotoRestObject.


        :param double_res: The double_res of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._double_res = double_res

    @property
    def triple_res(self):
        """Gets the triple_res of this PhotoRestObject.  # noqa: E501


        :return: The triple_res of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._triple_res

    @triple_res.setter
    def triple_res(self, triple_res):
        """Sets the triple_res of this PhotoRestObject.


        :param triple_res: The triple_res of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._triple_res = triple_res

    @property
    def low_res(self):
        """Gets the low_res of this PhotoRestObject.  # noqa: E501


        :return: The low_res of this PhotoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._low_res

    @low_res.setter
    def low_res(self, low_res):
        """Sets the low_res of this PhotoRestObject.


        :param low_res: The low_res of this PhotoRestObject.  # noqa: E501
        :type: str
        """

        self._low_res = low_res

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhotoRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhotoRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
