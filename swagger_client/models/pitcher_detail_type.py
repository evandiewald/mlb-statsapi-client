# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PitcherDetailType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AT_BAT = "AT_BAT"
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"
    TRIPLE = "TRIPLE"
    HOME_RUN = "HOME_RUN"
    STRIKEOUT = "STRIKEOUT"
    GAME = "GAME"
    COMPLETE_GAME = "COMPLETE_GAME"
    GAME_STARTED = "GAME_STARTED"
    GAME_FINISHED = "GAME_FINISHED"
    SHUTOUT = "SHUTOUT"
    WALK = "WALK"
    INTENT_WALK = "INTENT_WALK"
    RUN = "RUN"
    WIN = "WIN"
    RBI = "RBI"
    SAVE = "SAVE"
    BLOWN_SAVE = "BLOWN_SAVE"
    HOLD = "HOLD"
    LOSS = "LOSS"
    SAC_BUNT = "SAC_BUNT"
    SAC_FLY = "SAC_FLY"
    REACHED_ON_INTERFERENCE = "REACHED_ON_INTERFERENCE"
    CATCHER_INTERFERENCE = "CATCHER_INTERFERENCE"
    HIT_BY_PITCH = "HIT_BY_PITCH"
    OUT = "OUT"
    TEAM_OUT = "TEAM_OUT"
    BALL = "BALL"
    BALL_BLOCKED = "BALL_BLOCKED"
    BUNT_FOUL_TIP = "BUNT_FOUL_TIP"
    CALLED_STRIKE = "CALLED_STRIKE"
    FOUL = "FOUL"
    FOUL_BUNT = "FOUL_BUNT"
    FOUL_TIP = "FOUL_TIP"
    PITCHOUT = "PITCHOUT"
    FOUL_PITCHOUT = "FOUL_PITCHOUT"
    HIT_INTO_PLAY = "HIT_INTO_PLAY"
    PITCHOUT_HIT_INTO_PLAY = "PITCHOUT_HIT_INTO_PLAY"
    INTENT_BALL = "INTENT_BALL"
    WILD_PITCH = "WILD_PITCH"
    BALK = "BALK"
    INHERITED_RUNNER = "INHERITED_RUNNER"
    INHERITED_RUNNER_SCORED = "INHERITED_RUNNER_SCORED"
    MISSED_BUNT = "MISSED_BUNT"
    EARNED_RUN = "EARNED_RUN"
    UNEARNED_RUN = "UNEARNED_RUN"
    GROUNDOUT = "GROUNDOUT"
    FLYOUT = "FLYOUT"
    POPOUT = "POPOUT"
    LINEOUT = "LINEOUT"
    TEAM_EARNED_RUN = "TEAM_EARNED_RUN"
    TEAM_UNEARNED_RUN = "TEAM_UNEARNED_RUN"
    SWINGING_PITCHOUT = "SWINGING_PITCHOUT"
    SWINGING_STRIKE = "SWINGING_STRIKE"
    SWINGING_STRIKE_BLOCKED = "SWINGING_STRIKE_BLOCKED"
    RELIEF_NO_OUT = "RELIEF_NO_OUT"
    PICKOFF_1B = "PICKOFF_1B"
    PICKOFF_2B = "PICKOFF_2B"
    PICKOFF_3B = "PICKOFF_3B"
    UNKNOWN_STRIKE = "UNKNOWN_STRIKE"
    STOLEN_BASE_2B = "STOLEN_BASE_2B"
    STOLEN_BASE_3B = "STOLEN_BASE_3B"
    STOLEN_BASE_HP = "STOLEN_BASE_HP"
    CAUGHT_STEALING_2B = "CAUGHT_STEALING_2B"
    CAUGHT_STEALING_3B = "CAUGHT_STEALING_3B"
    CAUGHT_STEALING_HP = "CAUGHT_STEALING_HP"
    PLATE_APPEARANCE = "PLATE_APPEARANCE"
    UNKNOWN = "UNKNOWN"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """PitcherDetailType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitcherDetailType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitcherDetailType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
