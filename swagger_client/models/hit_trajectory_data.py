# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HitTrajectoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trajectory_polynomial_x': 'list[float]',
        'trajectory_polynomial_y': 'list[float]',
        'trajectory_polynomial_z': 'list[float]',
        'valid_time_interval': 'list[float]',
        'measured_time_interval': 'list[float]',
        'reduced_confidence': 'list[str]',
        'max_height_position': 'Coordinates',
        'hit_position_at110_feet': 'Coordinates'
    }

    attribute_map = {
        'trajectory_polynomial_x': 'trajectoryPolynomialX',
        'trajectory_polynomial_y': 'trajectoryPolynomialY',
        'trajectory_polynomial_z': 'trajectoryPolynomialZ',
        'valid_time_interval': 'validTimeInterval',
        'measured_time_interval': 'measuredTimeInterval',
        'reduced_confidence': 'reducedConfidence',
        'max_height_position': 'maxHeightPosition',
        'hit_position_at110_feet': 'hitPositionAt110Feet'
    }

    def __init__(self, trajectory_polynomial_x=None, trajectory_polynomial_y=None, trajectory_polynomial_z=None, valid_time_interval=None, measured_time_interval=None, reduced_confidence=None, max_height_position=None, hit_position_at110_feet=None):  # noqa: E501
        """HitTrajectoryData - a model defined in Swagger"""  # noqa: E501
        self._trajectory_polynomial_x = None
        self._trajectory_polynomial_y = None
        self._trajectory_polynomial_z = None
        self._valid_time_interval = None
        self._measured_time_interval = None
        self._reduced_confidence = None
        self._max_height_position = None
        self._hit_position_at110_feet = None
        self.discriminator = None
        if trajectory_polynomial_x is not None:
            self.trajectory_polynomial_x = trajectory_polynomial_x
        if trajectory_polynomial_y is not None:
            self.trajectory_polynomial_y = trajectory_polynomial_y
        if trajectory_polynomial_z is not None:
            self.trajectory_polynomial_z = trajectory_polynomial_z
        if valid_time_interval is not None:
            self.valid_time_interval = valid_time_interval
        if measured_time_interval is not None:
            self.measured_time_interval = measured_time_interval
        if reduced_confidence is not None:
            self.reduced_confidence = reduced_confidence
        if max_height_position is not None:
            self.max_height_position = max_height_position
        if hit_position_at110_feet is not None:
            self.hit_position_at110_feet = hit_position_at110_feet

    @property
    def trajectory_polynomial_x(self):
        """Gets the trajectory_polynomial_x of this HitTrajectoryData.  # noqa: E501


        :return: The trajectory_polynomial_x of this HitTrajectoryData.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_x

    @trajectory_polynomial_x.setter
    def trajectory_polynomial_x(self, trajectory_polynomial_x):
        """Sets the trajectory_polynomial_x of this HitTrajectoryData.


        :param trajectory_polynomial_x: The trajectory_polynomial_x of this HitTrajectoryData.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_x = trajectory_polynomial_x

    @property
    def trajectory_polynomial_y(self):
        """Gets the trajectory_polynomial_y of this HitTrajectoryData.  # noqa: E501


        :return: The trajectory_polynomial_y of this HitTrajectoryData.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_y

    @trajectory_polynomial_y.setter
    def trajectory_polynomial_y(self, trajectory_polynomial_y):
        """Sets the trajectory_polynomial_y of this HitTrajectoryData.


        :param trajectory_polynomial_y: The trajectory_polynomial_y of this HitTrajectoryData.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_y = trajectory_polynomial_y

    @property
    def trajectory_polynomial_z(self):
        """Gets the trajectory_polynomial_z of this HitTrajectoryData.  # noqa: E501


        :return: The trajectory_polynomial_z of this HitTrajectoryData.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_z

    @trajectory_polynomial_z.setter
    def trajectory_polynomial_z(self, trajectory_polynomial_z):
        """Sets the trajectory_polynomial_z of this HitTrajectoryData.


        :param trajectory_polynomial_z: The trajectory_polynomial_z of this HitTrajectoryData.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_z = trajectory_polynomial_z

    @property
    def valid_time_interval(self):
        """Gets the valid_time_interval of this HitTrajectoryData.  # noqa: E501


        :return: The valid_time_interval of this HitTrajectoryData.  # noqa: E501
        :rtype: list[float]
        """
        return self._valid_time_interval

    @valid_time_interval.setter
    def valid_time_interval(self, valid_time_interval):
        """Sets the valid_time_interval of this HitTrajectoryData.


        :param valid_time_interval: The valid_time_interval of this HitTrajectoryData.  # noqa: E501
        :type: list[float]
        """

        self._valid_time_interval = valid_time_interval

    @property
    def measured_time_interval(self):
        """Gets the measured_time_interval of this HitTrajectoryData.  # noqa: E501


        :return: The measured_time_interval of this HitTrajectoryData.  # noqa: E501
        :rtype: list[float]
        """
        return self._measured_time_interval

    @measured_time_interval.setter
    def measured_time_interval(self, measured_time_interval):
        """Sets the measured_time_interval of this HitTrajectoryData.


        :param measured_time_interval: The measured_time_interval of this HitTrajectoryData.  # noqa: E501
        :type: list[float]
        """

        self._measured_time_interval = measured_time_interval

    @property
    def reduced_confidence(self):
        """Gets the reduced_confidence of this HitTrajectoryData.  # noqa: E501


        :return: The reduced_confidence of this HitTrajectoryData.  # noqa: E501
        :rtype: list[str]
        """
        return self._reduced_confidence

    @reduced_confidence.setter
    def reduced_confidence(self, reduced_confidence):
        """Sets the reduced_confidence of this HitTrajectoryData.


        :param reduced_confidence: The reduced_confidence of this HitTrajectoryData.  # noqa: E501
        :type: list[str]
        """

        self._reduced_confidence = reduced_confidence

    @property
    def max_height_position(self):
        """Gets the max_height_position of this HitTrajectoryData.  # noqa: E501


        :return: The max_height_position of this HitTrajectoryData.  # noqa: E501
        :rtype: Coordinates
        """
        return self._max_height_position

    @max_height_position.setter
    def max_height_position(self, max_height_position):
        """Sets the max_height_position of this HitTrajectoryData.


        :param max_height_position: The max_height_position of this HitTrajectoryData.  # noqa: E501
        :type: Coordinates
        """

        self._max_height_position = max_height_position

    @property
    def hit_position_at110_feet(self):
        """Gets the hit_position_at110_feet of this HitTrajectoryData.  # noqa: E501


        :return: The hit_position_at110_feet of this HitTrajectoryData.  # noqa: E501
        :rtype: Coordinates
        """
        return self._hit_position_at110_feet

    @hit_position_at110_feet.setter
    def hit_position_at110_feet(self, hit_position_at110_feet):
        """Sets the hit_position_at110_feet of this HitTrajectoryData.


        :param hit_position_at110_feet: The hit_position_at110_feet of this HitTrajectoryData.  # noqa: E501
        :type: Coordinates
        """

        self._hit_position_at110_feet = hit_position_at110_feet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HitTrajectoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HitTrajectoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
