# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MilestoneAchievementStatusRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'achievement_status_id': 'int',
        'achievement_status_code': 'str',
        'achievement_status_desc': 'str',
        'achievement_status_text': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'achievement_status_id': 'achievementStatusId',
        'achievement_status_code': 'achievementStatusCode',
        'achievement_status_desc': 'achievementStatusDesc',
        'achievement_status_text': 'achievementStatusText'
    }

    def __init__(self, copyright=None, achievement_status_id=None, achievement_status_code=None, achievement_status_desc=None, achievement_status_text=None):  # noqa: E501
        """MilestoneAchievementStatusRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._achievement_status_id = None
        self._achievement_status_code = None
        self._achievement_status_desc = None
        self._achievement_status_text = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if achievement_status_id is not None:
            self.achievement_status_id = achievement_status_id
        if achievement_status_code is not None:
            self.achievement_status_code = achievement_status_code
        if achievement_status_desc is not None:
            self.achievement_status_desc = achievement_status_desc
        if achievement_status_text is not None:
            self.achievement_status_text = achievement_status_text

    @property
    def copyright(self):
        """Gets the copyright of this MilestoneAchievementStatusRestObject.  # noqa: E501


        :return: The copyright of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this MilestoneAchievementStatusRestObject.


        :param copyright: The copyright of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def achievement_status_id(self):
        """Gets the achievement_status_id of this MilestoneAchievementStatusRestObject.  # noqa: E501


        :return: The achievement_status_id of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._achievement_status_id

    @achievement_status_id.setter
    def achievement_status_id(self, achievement_status_id):
        """Sets the achievement_status_id of this MilestoneAchievementStatusRestObject.


        :param achievement_status_id: The achievement_status_id of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :type: int
        """

        self._achievement_status_id = achievement_status_id

    @property
    def achievement_status_code(self):
        """Gets the achievement_status_code of this MilestoneAchievementStatusRestObject.  # noqa: E501


        :return: The achievement_status_code of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._achievement_status_code

    @achievement_status_code.setter
    def achievement_status_code(self, achievement_status_code):
        """Sets the achievement_status_code of this MilestoneAchievementStatusRestObject.


        :param achievement_status_code: The achievement_status_code of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :type: str
        """

        self._achievement_status_code = achievement_status_code

    @property
    def achievement_status_desc(self):
        """Gets the achievement_status_desc of this MilestoneAchievementStatusRestObject.  # noqa: E501


        :return: The achievement_status_desc of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._achievement_status_desc

    @achievement_status_desc.setter
    def achievement_status_desc(self, achievement_status_desc):
        """Sets the achievement_status_desc of this MilestoneAchievementStatusRestObject.


        :param achievement_status_desc: The achievement_status_desc of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :type: str
        """

        self._achievement_status_desc = achievement_status_desc

    @property
    def achievement_status_text(self):
        """Gets the achievement_status_text of this MilestoneAchievementStatusRestObject.  # noqa: E501


        :return: The achievement_status_text of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._achievement_status_text

    @achievement_status_text.setter
    def achievement_status_text(self, achievement_status_text):
        """Sets the achievement_status_text of this MilestoneAchievementStatusRestObject.


        :param achievement_status_text: The achievement_status_text of this MilestoneAchievementStatusRestObject.  # noqa: E501
        :type: str
        """

        self._achievement_status_text = achievement_status_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MilestoneAchievementStatusRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MilestoneAchievementStatusRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
