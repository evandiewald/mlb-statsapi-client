# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballRosterEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'person': 'BaseballPerson',
        'jersey_number': 'str',
        'position': 'BaseballPosition',
        'stats': 'BaseballStats',
        'season_stats': 'BaseballStats',
        'captain': 'bool',
        'alternate_captain': 'bool',
        'note': 'str',
        'status': 'DynamicLookupEnum',
        'job': 'str',
        'job_id': 'str',
        'title': 'str',
        'parent_team_id': 'int',
        'team': 'BaseballTeam',
        'is_active': 'bool',
        'is_active_forty_man': 'bool',
        'start_date': 'date',
        'end_date': 'date',
        'status_date': 'date',
        'all_positions': 'list[BaseballPosition]',
        'batting_order': 'str',
        'pitching_order': 'int',
        'is_current_batter': 'bool',
        'is_current_pitcher': 'bool',
        'is_on_bench': 'bool',
        'is_substitute': 'bool',
        'class_id': 'int',
        'sport_id': 'int',
        'season': 'str',
        'qualified_for_game_pitched': 'bool',
        'stat_container': 'list[StatContainer]',
        'hydrated_roster_entries_team': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'person': 'person',
        'jersey_number': 'jerseyNumber',
        'position': 'position',
        'stats': 'stats',
        'season_stats': 'seasonStats',
        'captain': 'captain',
        'alternate_captain': 'alternateCaptain',
        'note': 'note',
        'status': 'status',
        'job': 'job',
        'job_id': 'jobId',
        'title': 'title',
        'parent_team_id': 'parentTeamId',
        'team': 'team',
        'is_active': 'isActive',
        'is_active_forty_man': 'isActiveFortyMan',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'status_date': 'statusDate',
        'all_positions': 'allPositions',
        'batting_order': 'battingOrder',
        'pitching_order': 'pitchingOrder',
        'is_current_batter': 'isCurrentBatter',
        'is_current_pitcher': 'isCurrentPitcher',
        'is_on_bench': 'isOnBench',
        'is_substitute': 'isSubstitute',
        'class_id': 'classId',
        'sport_id': 'sportId',
        'season': 'season',
        'qualified_for_game_pitched': 'qualifiedForGamePitched',
        'stat_container': 'statContainer',
        'hydrated_roster_entries_team': 'hydratedRosterEntriesTeam',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, person=None, jersey_number=None, position=None, stats=None, season_stats=None, captain=None, alternate_captain=None, note=None, status=None, job=None, job_id=None, title=None, parent_team_id=None, team=None, is_active=None, is_active_forty_man=None, start_date=None, end_date=None, status_date=None, all_positions=None, batting_order=None, pitching_order=None, is_current_batter=None, is_current_pitcher=None, is_on_bench=None, is_substitute=None, class_id=None, sport_id=None, season=None, qualified_for_game_pitched=None, stat_container=None, hydrated_roster_entries_team=None, user_privileges=None):  # noqa: E501
        """BaseballRosterEntry - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._person = None
        self._jersey_number = None
        self._position = None
        self._stats = None
        self._season_stats = None
        self._captain = None
        self._alternate_captain = None
        self._note = None
        self._status = None
        self._job = None
        self._job_id = None
        self._title = None
        self._parent_team_id = None
        self._team = None
        self._is_active = None
        self._is_active_forty_man = None
        self._start_date = None
        self._end_date = None
        self._status_date = None
        self._all_positions = None
        self._batting_order = None
        self._pitching_order = None
        self._is_current_batter = None
        self._is_current_pitcher = None
        self._is_on_bench = None
        self._is_substitute = None
        self._class_id = None
        self._sport_id = None
        self._season = None
        self._qualified_for_game_pitched = None
        self._stat_container = None
        self._hydrated_roster_entries_team = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if person is not None:
            self.person = person
        if jersey_number is not None:
            self.jersey_number = jersey_number
        if position is not None:
            self.position = position
        if stats is not None:
            self.stats = stats
        if season_stats is not None:
            self.season_stats = season_stats
        if captain is not None:
            self.captain = captain
        if alternate_captain is not None:
            self.alternate_captain = alternate_captain
        if note is not None:
            self.note = note
        if status is not None:
            self.status = status
        if job is not None:
            self.job = job
        if job_id is not None:
            self.job_id = job_id
        if title is not None:
            self.title = title
        if parent_team_id is not None:
            self.parent_team_id = parent_team_id
        if team is not None:
            self.team = team
        if is_active is not None:
            self.is_active = is_active
        if is_active_forty_man is not None:
            self.is_active_forty_man = is_active_forty_man
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if status_date is not None:
            self.status_date = status_date
        if all_positions is not None:
            self.all_positions = all_positions
        if batting_order is not None:
            self.batting_order = batting_order
        if pitching_order is not None:
            self.pitching_order = pitching_order
        if is_current_batter is not None:
            self.is_current_batter = is_current_batter
        if is_current_pitcher is not None:
            self.is_current_pitcher = is_current_pitcher
        if is_on_bench is not None:
            self.is_on_bench = is_on_bench
        if is_substitute is not None:
            self.is_substitute = is_substitute
        if class_id is not None:
            self.class_id = class_id
        if sport_id is not None:
            self.sport_id = sport_id
        if season is not None:
            self.season = season
        if qualified_for_game_pitched is not None:
            self.qualified_for_game_pitched = qualified_for_game_pitched
        if stat_container is not None:
            self.stat_container = stat_container
        if hydrated_roster_entries_team is not None:
            self.hydrated_roster_entries_team = hydrated_roster_entries_team
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this BaseballRosterEntry.  # noqa: E501


        :return: The requesting_user_role of this BaseballRosterEntry.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this BaseballRosterEntry.


        :param requesting_user_role: The requesting_user_role of this BaseballRosterEntry.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def person(self):
        """Gets the person of this BaseballRosterEntry.  # noqa: E501


        :return: The person of this BaseballRosterEntry.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this BaseballRosterEntry.


        :param person: The person of this BaseballRosterEntry.  # noqa: E501
        :type: BaseballPerson
        """

        self._person = person

    @property
    def jersey_number(self):
        """Gets the jersey_number of this BaseballRosterEntry.  # noqa: E501


        :return: The jersey_number of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._jersey_number

    @jersey_number.setter
    def jersey_number(self, jersey_number):
        """Sets the jersey_number of this BaseballRosterEntry.


        :param jersey_number: The jersey_number of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._jersey_number = jersey_number

    @property
    def position(self):
        """Gets the position of this BaseballRosterEntry.  # noqa: E501


        :return: The position of this BaseballRosterEntry.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BaseballRosterEntry.


        :param position: The position of this BaseballRosterEntry.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def stats(self):
        """Gets the stats of this BaseballRosterEntry.  # noqa: E501


        :return: The stats of this BaseballRosterEntry.  # noqa: E501
        :rtype: BaseballStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this BaseballRosterEntry.


        :param stats: The stats of this BaseballRosterEntry.  # noqa: E501
        :type: BaseballStats
        """

        self._stats = stats

    @property
    def season_stats(self):
        """Gets the season_stats of this BaseballRosterEntry.  # noqa: E501


        :return: The season_stats of this BaseballRosterEntry.  # noqa: E501
        :rtype: BaseballStats
        """
        return self._season_stats

    @season_stats.setter
    def season_stats(self, season_stats):
        """Sets the season_stats of this BaseballRosterEntry.


        :param season_stats: The season_stats of this BaseballRosterEntry.  # noqa: E501
        :type: BaseballStats
        """

        self._season_stats = season_stats

    @property
    def captain(self):
        """Gets the captain of this BaseballRosterEntry.  # noqa: E501


        :return: The captain of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._captain

    @captain.setter
    def captain(self, captain):
        """Sets the captain of this BaseballRosterEntry.


        :param captain: The captain of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._captain = captain

    @property
    def alternate_captain(self):
        """Gets the alternate_captain of this BaseballRosterEntry.  # noqa: E501


        :return: The alternate_captain of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._alternate_captain

    @alternate_captain.setter
    def alternate_captain(self, alternate_captain):
        """Sets the alternate_captain of this BaseballRosterEntry.


        :param alternate_captain: The alternate_captain of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._alternate_captain = alternate_captain

    @property
    def note(self):
        """Gets the note of this BaseballRosterEntry.  # noqa: E501


        :return: The note of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BaseballRosterEntry.


        :param note: The note of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """Gets the status of this BaseballRosterEntry.  # noqa: E501


        :return: The status of this BaseballRosterEntry.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseballRosterEntry.


        :param status: The status of this BaseballRosterEntry.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._status = status

    @property
    def job(self):
        """Gets the job of this BaseballRosterEntry.  # noqa: E501


        :return: The job of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this BaseballRosterEntry.


        :param job: The job of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def job_id(self):
        """Gets the job_id of this BaseballRosterEntry.  # noqa: E501


        :return: The job_id of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BaseballRosterEntry.


        :param job_id: The job_id of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def title(self):
        """Gets the title of this BaseballRosterEntry.  # noqa: E501


        :return: The title of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BaseballRosterEntry.


        :param title: The title of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def parent_team_id(self):
        """Gets the parent_team_id of this BaseballRosterEntry.  # noqa: E501


        :return: The parent_team_id of this BaseballRosterEntry.  # noqa: E501
        :rtype: int
        """
        return self._parent_team_id

    @parent_team_id.setter
    def parent_team_id(self, parent_team_id):
        """Sets the parent_team_id of this BaseballRosterEntry.


        :param parent_team_id: The parent_team_id of this BaseballRosterEntry.  # noqa: E501
        :type: int
        """

        self._parent_team_id = parent_team_id

    @property
    def team(self):
        """Gets the team of this BaseballRosterEntry.  # noqa: E501


        :return: The team of this BaseballRosterEntry.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballRosterEntry.


        :param team: The team of this BaseballRosterEntry.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def is_active(self):
        """Gets the is_active of this BaseballRosterEntry.  # noqa: E501


        :return: The is_active of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this BaseballRosterEntry.


        :param is_active: The is_active of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_active_forty_man(self):
        """Gets the is_active_forty_man of this BaseballRosterEntry.  # noqa: E501


        :return: The is_active_forty_man of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_forty_man

    @is_active_forty_man.setter
    def is_active_forty_man(self, is_active_forty_man):
        """Sets the is_active_forty_man of this BaseballRosterEntry.


        :param is_active_forty_man: The is_active_forty_man of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_active_forty_man = is_active_forty_man

    @property
    def start_date(self):
        """Gets the start_date of this BaseballRosterEntry.  # noqa: E501


        :return: The start_date of this BaseballRosterEntry.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BaseballRosterEntry.


        :param start_date: The start_date of this BaseballRosterEntry.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this BaseballRosterEntry.  # noqa: E501


        :return: The end_date of this BaseballRosterEntry.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BaseballRosterEntry.


        :param end_date: The end_date of this BaseballRosterEntry.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def status_date(self):
        """Gets the status_date of this BaseballRosterEntry.  # noqa: E501


        :return: The status_date of this BaseballRosterEntry.  # noqa: E501
        :rtype: date
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this BaseballRosterEntry.


        :param status_date: The status_date of this BaseballRosterEntry.  # noqa: E501
        :type: date
        """

        self._status_date = status_date

    @property
    def all_positions(self):
        """Gets the all_positions of this BaseballRosterEntry.  # noqa: E501


        :return: The all_positions of this BaseballRosterEntry.  # noqa: E501
        :rtype: list[BaseballPosition]
        """
        return self._all_positions

    @all_positions.setter
    def all_positions(self, all_positions):
        """Sets the all_positions of this BaseballRosterEntry.


        :param all_positions: The all_positions of this BaseballRosterEntry.  # noqa: E501
        :type: list[BaseballPosition]
        """

        self._all_positions = all_positions

    @property
    def batting_order(self):
        """Gets the batting_order of this BaseballRosterEntry.  # noqa: E501


        :return: The batting_order of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this BaseballRosterEntry.


        :param batting_order: The batting_order of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._batting_order = batting_order

    @property
    def pitching_order(self):
        """Gets the pitching_order of this BaseballRosterEntry.  # noqa: E501


        :return: The pitching_order of this BaseballRosterEntry.  # noqa: E501
        :rtype: int
        """
        return self._pitching_order

    @pitching_order.setter
    def pitching_order(self, pitching_order):
        """Sets the pitching_order of this BaseballRosterEntry.


        :param pitching_order: The pitching_order of this BaseballRosterEntry.  # noqa: E501
        :type: int
        """

        self._pitching_order = pitching_order

    @property
    def is_current_batter(self):
        """Gets the is_current_batter of this BaseballRosterEntry.  # noqa: E501


        :return: The is_current_batter of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_current_batter

    @is_current_batter.setter
    def is_current_batter(self, is_current_batter):
        """Sets the is_current_batter of this BaseballRosterEntry.


        :param is_current_batter: The is_current_batter of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_current_batter = is_current_batter

    @property
    def is_current_pitcher(self):
        """Gets the is_current_pitcher of this BaseballRosterEntry.  # noqa: E501


        :return: The is_current_pitcher of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_current_pitcher

    @is_current_pitcher.setter
    def is_current_pitcher(self, is_current_pitcher):
        """Sets the is_current_pitcher of this BaseballRosterEntry.


        :param is_current_pitcher: The is_current_pitcher of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_current_pitcher = is_current_pitcher

    @property
    def is_on_bench(self):
        """Gets the is_on_bench of this BaseballRosterEntry.  # noqa: E501


        :return: The is_on_bench of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_on_bench

    @is_on_bench.setter
    def is_on_bench(self, is_on_bench):
        """Sets the is_on_bench of this BaseballRosterEntry.


        :param is_on_bench: The is_on_bench of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_on_bench = is_on_bench

    @property
    def is_substitute(self):
        """Gets the is_substitute of this BaseballRosterEntry.  # noqa: E501


        :return: The is_substitute of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_substitute

    @is_substitute.setter
    def is_substitute(self, is_substitute):
        """Sets the is_substitute of this BaseballRosterEntry.


        :param is_substitute: The is_substitute of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._is_substitute = is_substitute

    @property
    def class_id(self):
        """Gets the class_id of this BaseballRosterEntry.  # noqa: E501


        :return: The class_id of this BaseballRosterEntry.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this BaseballRosterEntry.


        :param class_id: The class_id of this BaseballRosterEntry.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def sport_id(self):
        """Gets the sport_id of this BaseballRosterEntry.  # noqa: E501


        :return: The sport_id of this BaseballRosterEntry.  # noqa: E501
        :rtype: int
        """
        return self._sport_id

    @sport_id.setter
    def sport_id(self, sport_id):
        """Sets the sport_id of this BaseballRosterEntry.


        :param sport_id: The sport_id of this BaseballRosterEntry.  # noqa: E501
        :type: int
        """

        self._sport_id = sport_id

    @property
    def season(self):
        """Gets the season of this BaseballRosterEntry.  # noqa: E501


        :return: The season of this BaseballRosterEntry.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this BaseballRosterEntry.


        :param season: The season of this BaseballRosterEntry.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def qualified_for_game_pitched(self):
        """Gets the qualified_for_game_pitched of this BaseballRosterEntry.  # noqa: E501


        :return: The qualified_for_game_pitched of this BaseballRosterEntry.  # noqa: E501
        :rtype: bool
        """
        return self._qualified_for_game_pitched

    @qualified_for_game_pitched.setter
    def qualified_for_game_pitched(self, qualified_for_game_pitched):
        """Sets the qualified_for_game_pitched of this BaseballRosterEntry.


        :param qualified_for_game_pitched: The qualified_for_game_pitched of this BaseballRosterEntry.  # noqa: E501
        :type: bool
        """

        self._qualified_for_game_pitched = qualified_for_game_pitched

    @property
    def stat_container(self):
        """Gets the stat_container of this BaseballRosterEntry.  # noqa: E501


        :return: The stat_container of this BaseballRosterEntry.  # noqa: E501
        :rtype: list[StatContainer]
        """
        return self._stat_container

    @stat_container.setter
    def stat_container(self, stat_container):
        """Sets the stat_container of this BaseballRosterEntry.


        :param stat_container: The stat_container of this BaseballRosterEntry.  # noqa: E501
        :type: list[StatContainer]
        """

        self._stat_container = stat_container

    @property
    def hydrated_roster_entries_team(self):
        """Gets the hydrated_roster_entries_team of this BaseballRosterEntry.  # noqa: E501


        :return: The hydrated_roster_entries_team of this BaseballRosterEntry.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_roster_entries_team

    @hydrated_roster_entries_team.setter
    def hydrated_roster_entries_team(self, hydrated_roster_entries_team):
        """Sets the hydrated_roster_entries_team of this BaseballRosterEntry.


        :param hydrated_roster_entries_team: The hydrated_roster_entries_team of this BaseballRosterEntry.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_roster_entries_team = hydrated_roster_entries_team

    @property
    def user_privileges(self):
        """Gets the user_privileges of this BaseballRosterEntry.  # noqa: E501


        :return: The user_privileges of this BaseballRosterEntry.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this BaseballRosterEntry.


        :param user_privileges: The user_privileges of this BaseballRosterEntry.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballRosterEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballRosterEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
