# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FreeAgentRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player': 'BaseballPersonRestObject',
        'original_team': 'BaseballTeamRestObject',
        'new_team': 'BaseballTeamRestObject',
        'notes': 'str',
        'url': 'str',
        'date_signed': 'date',
        'date_declared': 'date',
        'position': 'PositionRestObject',
        'sort_order': 'int'
    }

    attribute_map = {
        'player': 'player',
        'original_team': 'originalTeam',
        'new_team': 'newTeam',
        'notes': 'notes',
        'url': 'url',
        'date_signed': 'dateSigned',
        'date_declared': 'dateDeclared',
        'position': 'position',
        'sort_order': 'sortOrder'
    }

    def __init__(self, player=None, original_team=None, new_team=None, notes=None, url=None, date_signed=None, date_declared=None, position=None, sort_order=None):  # noqa: E501
        """FreeAgentRestObject - a model defined in Swagger"""  # noqa: E501
        self._player = None
        self._original_team = None
        self._new_team = None
        self._notes = None
        self._url = None
        self._date_signed = None
        self._date_declared = None
        self._position = None
        self._sort_order = None
        self.discriminator = None
        if player is not None:
            self.player = player
        if original_team is not None:
            self.original_team = original_team
        if new_team is not None:
            self.new_team = new_team
        if notes is not None:
            self.notes = notes
        if url is not None:
            self.url = url
        if date_signed is not None:
            self.date_signed = date_signed
        if date_declared is not None:
            self.date_declared = date_declared
        if position is not None:
            self.position = position
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def player(self):
        """Gets the player of this FreeAgentRestObject.  # noqa: E501


        :return: The player of this FreeAgentRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this FreeAgentRestObject.


        :param player: The player of this FreeAgentRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def original_team(self):
        """Gets the original_team of this FreeAgentRestObject.  # noqa: E501


        :return: The original_team of this FreeAgentRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._original_team

    @original_team.setter
    def original_team(self, original_team):
        """Sets the original_team of this FreeAgentRestObject.


        :param original_team: The original_team of this FreeAgentRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._original_team = original_team

    @property
    def new_team(self):
        """Gets the new_team of this FreeAgentRestObject.  # noqa: E501


        :return: The new_team of this FreeAgentRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._new_team

    @new_team.setter
    def new_team(self, new_team):
        """Sets the new_team of this FreeAgentRestObject.


        :param new_team: The new_team of this FreeAgentRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._new_team = new_team

    @property
    def notes(self):
        """Gets the notes of this FreeAgentRestObject.  # noqa: E501


        :return: The notes of this FreeAgentRestObject.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FreeAgentRestObject.


        :param notes: The notes of this FreeAgentRestObject.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def url(self):
        """Gets the url of this FreeAgentRestObject.  # noqa: E501


        :return: The url of this FreeAgentRestObject.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FreeAgentRestObject.


        :param url: The url of this FreeAgentRestObject.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def date_signed(self):
        """Gets the date_signed of this FreeAgentRestObject.  # noqa: E501


        :return: The date_signed of this FreeAgentRestObject.  # noqa: E501
        :rtype: date
        """
        return self._date_signed

    @date_signed.setter
    def date_signed(self, date_signed):
        """Sets the date_signed of this FreeAgentRestObject.


        :param date_signed: The date_signed of this FreeAgentRestObject.  # noqa: E501
        :type: date
        """

        self._date_signed = date_signed

    @property
    def date_declared(self):
        """Gets the date_declared of this FreeAgentRestObject.  # noqa: E501


        :return: The date_declared of this FreeAgentRestObject.  # noqa: E501
        :rtype: date
        """
        return self._date_declared

    @date_declared.setter
    def date_declared(self, date_declared):
        """Sets the date_declared of this FreeAgentRestObject.


        :param date_declared: The date_declared of this FreeAgentRestObject.  # noqa: E501
        :type: date
        """

        self._date_declared = date_declared

    @property
    def position(self):
        """Gets the position of this FreeAgentRestObject.  # noqa: E501


        :return: The position of this FreeAgentRestObject.  # noqa: E501
        :rtype: PositionRestObject
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this FreeAgentRestObject.


        :param position: The position of this FreeAgentRestObject.  # noqa: E501
        :type: PositionRestObject
        """

        self._position = position

    @property
    def sort_order(self):
        """Gets the sort_order of this FreeAgentRestObject.  # noqa: E501


        :return: The sort_order of this FreeAgentRestObject.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FreeAgentRestObject.


        :param sort_order: The sort_order of this FreeAgentRestObject.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FreeAgentRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FreeAgentRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
