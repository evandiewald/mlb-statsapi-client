# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballStatsEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AIROUTS = "AIROUTS"
    ASSISTS = "ASSISTS"
    AT_BATS = "AT_BATS"
    AT_BATS_PER_HOMERUN = "AT_BATS_PER_HOMERUN"
    BALK = "BALK"
    BATTING_AVERAGE = "BATTING_AVERAGE"
    BATTING_AVERAGE_BALLS_IN_PLAY = "BATTING_AVERAGE_BALLS_IN_PLAY"
    QUALITY_STARTS = "QUALITY_STARTS"
    BEQUEATHED_RUNNERS = "BEQUEATHED_RUNNERS"
    BEQUEATHED_RUNNERS_SCORED = "BEQUEATHED_RUNNERS_SCORED"
    BLOWN_SAVES = "BLOWN_SAVES"
    CATCHER_ERA = "CATCHER_ERA"
    CATCHERS_INTERFERENCE = "CATCHERS_INTERFERENCE"
    CAUGHT_STEALING = "CAUGHT_STEALING"
    CHANCES = "CHANCES"
    COMPLETE_GAME = "COMPLETE_GAME"
    DOUBLE_PLAYS = "DOUBLE_PLAYS"
    DOUBLES = "DOUBLES"
    EARNED_RUN = "EARNED_RUN"
    EARNED_RUN_AVERAGE = "EARNED_RUN_AVERAGE"
    ERRORS = "ERRORS"
    EXIT_VELOCITY = "EXIT_VELOCITY"
    EXTRA_BASE_HITS = "EXTRA_BASE_HITS"
    FIELDING_PERCENTAGE = "FIELDING_PERCENTAGE"
    FLYOUTS = "FLYOUTS"
    GAMES_FINISHED = "GAMES_FINISHED"
    GAMES_PLAYED = "GAMES_PLAYED"
    GAMES_STARTED = "GAMES_STARTED"
    GROUND_INTO_DOUBLE_PLAYS = "GROUND_INTO_DOUBLE_PLAYS"
    GROUND_INTO_DOUBLE_PLAY_OPPORTUNITIES = "GROUND_INTO_DOUBLE_PLAY_OPPORTUNITIES"
    GROUND_INTO_TRIPLE_PLAYS = "GROUND_INTO_TRIPLE_PLAYS"
    GROUNDOUTS = "GROUNDOUTS"
    GROUNDOUT_TO_FLYOUT_RATIO = "GROUNDOUT_TO_FLYOUT_RATIO"
    HITS = "HITS"
    HITS_RISP = "HITS_RISP"
    HIT_BATSMAN = "HIT_BATSMAN"
    HIT_BY_PITCHES = "HIT_BY_PITCHES"
    HITS_PER_9_INN = "HITS_PER_9_INN"
    HOLDS = "HOLDS"
    HOME_RUNS = "HOME_RUNS"
    HOME_RUNS_PER_PLATE_APPEARANCE = "HOME_RUNS_PER_PLATE_APPEARANCE"
    INHERITED_RUNNER = "INHERITED_RUNNER"
    INHERITED_RUNNER_SCORED = "INHERITED_RUNNER_SCORED"
    INNINGS = "INNINGS"
    OUTS_PITCHED = "OUTS_PITCHED"
    INNINGS_PITCHED = "INNINGS_PITCHED"
    INTENTIONAL_WALKS = "INTENTIONAL_WALKS"
    ISO = "ISO"
    LEFT_ON_BASE = "LEFT_ON_BASE"
    LEFT_ON_BASE_RISP = "LEFT_ON_BASE_RISP"
    LOSSES = "LOSSES"
    NUMBER_OF_STRIKES = "NUMBER_OF_STRIKES"
    NUMBER_OF_BALLS = "NUMBER_OF_BALLS"
    NUMBER_OF_PITCHES = "NUMBER_OF_PITCHES"
    ON_BASE_PERCENTAGE = "ON_BASE_PERCENTAGE"
    ON_BASE_PLUS_SLUGGING = "ON_BASE_PLUS_SLUGGING"
    OUTFIELD_ASSISTS = "OUTFIELD_ASSISTS"
    UZR = "UZR"
    PASSED_BALLS = "PASSED_BALLS"
    PICKOFFS = "PICKOFFS"
    PITCHES_PER_INNING = "PITCHES_PER_INNING"
    PITCHES_PER_PLATE_APPEARANCE = "PITCHES_PER_PLATE_APPEARANCE"
    PUT_OUTS = "PUT_OUTS"
    RANGE_FACTOR_PER_GAME = "RANGE_FACTOR_PER_GAME"
    RANGE_FACTOR_PER_9_INN = "RANGE_FACTOR_PER_9_INN"
    REACHED_ON_ERROR = "REACHED_ON_ERROR"
    RUNS = "RUNS"
    RUNS_BATTED_IN = "RUNS_BATTED_IN"
    SACRIFICE_BUNTS = "SACRIFICE_BUNTS"
    SACRIFICE_FLIES = "SACRIFICE_FLIES"
    SAVES = "SAVES"
    SAVE_OPPORTUNITIES = "SAVE_OPPORTUNITIES"
    SHUTOUTS = "SHUTOUTS"
    SLUGGING_PERCENTAGE = "SLUGGING_PERCENTAGE"
    STOLEN_BASES = "STOLEN_BASES"
    STOLEN_BASE_PERCENTAGE = "STOLEN_BASE_PERCENTAGE"
    STRIKEOUTS = "STRIKEOUTS"
    STRIKEOUTS_PER_9_INN = "STRIKEOUTS_PER_9_INN"
    STRIKEOUTS_PER_PLATE_APPEARANCE = "STRIKEOUTS_PER_PLATE_APPEARANCE"
    STRIKEOUT_WALK_RATIO = "STRIKEOUT_WALK_RATIO"
    THROWING_ERRORS = "THROWING_ERRORS"
    TOTAL_BASES = "TOTAL_BASES"
    TOTAL_BATTERS_FACED = "TOTAL_BATTERS_FACED"
    TOTAL_PLATE_APPEARANCES = "TOTAL_PLATE_APPEARANCES"
    TRIPLE_PLAYS = "TRIPLE_PLAYS"
    TRIPLES = "TRIPLES"
    WALKS_PER_STRIKEOUT = "WALKS_PER_STRIKEOUT"
    WALKS_PER_PLATE_APPEARANCE = "WALKS_PER_PLATE_APPEARANCE"
    WALKS_HITS_PER_INNING_PITCHED = "WALKS_HITS_PER_INNING_PITCHED"
    WALKS = "WALKS"
    WALKS_PER_9_INN = "WALKS_PER_9_INN"
    WALKOFFS = "WALKOFFS"
    WILD_PITCH = "WILD_PITCH"
    WINS = "WINS"
    WIN_PERCENTAGE = "WIN_PERCENTAGE"
    ATTENDANCE = "ATTENDANCE"
    DURATION = "DURATION"
    WIN_STREAK = "WIN_STREAK"
    LOSS_STREAK = "LOSS_STREAK"
    WOBA = "WOBA"
    XWOBA = "XWOBA"
    XWOBACON = "XWOBACON"
    XAVG = "XAVG"
    XSLG = "XSLG"
    LAUNCH_ANGLE = "LAUNCH_ANGLE"
    HOME_RUN_DISTANCE = "HOME_RUN_DISTANCE"
    HIT_DISTANCE = "HIT_DISTANCE"
    HANG_TIME = "HANG_TIME"
    MAX_HEIGHT = "MAX_HEIGHT"
    HIT_PROBABILITY = "HIT_PROBABILITY"
    CATCH_PROBABILITY = "CATCH_PROBABILITY"
    BARRELS = "BARRELS"
    PITCH_SPEED = "PITCH_SPEED"
    SPIN_RATE = "SPIN_RATE"
    EXTENSION = "EXTENSION"
    HORIZONTAL_BREAK = "HORIZONTAL_BREAK"
    ARM_STRENGTH = "ARM_STRENGTH"
    DISTANCE_COVERED = "DISTANCE_COVERED"
    EXCHANGE = "EXCHANGE"
    FIELDER_BURST_DISTANCE = "FIELDER_BURST_DISTANCE"
    FIELDER_JUMP_DISTANCE = "FIELDER_JUMP_DISTANCE"
    FIELDER_REACTION_DISTANCE = "FIELDER_REACTION_DISTANCE"
    FIRST_STEP = "FIRST_STEP"
    FIRST_STEP_EFFICIENCY = "FIRST_STEP_EFFICIENCY"
    POP_TIME_1B = "POP_TIME_1B"
    POP_TIME_2B = "POP_TIME_2B"
    POP_TIME_3B = "POP_TIME_3B"
    ROUTE_EFFICIENCY = "ROUTE_EFFICIENCY"
    SPRINT_SPEED = "SPRINT_SPEED"
    THROW_ACCURACY = "THROW_ACCURACY"
    THROW_DISTANCE = "THROW_DISTANCE"
    THROW_DISTANCE_WITH_BOUNCES = "THROW_DISTANCE_WITH_BOUNCES"
    ACCELERATION = "ACCELERATION"
    BURST = "BURST"
    FIRST_TO_HOME = "FIRST_TO_HOME"
    FIRST_TO_SECOND = "FIRST_TO_SECOND"
    FIRST_TO_THIRD = "FIRST_TO_THIRD"
    HOME_RUN_TROT = "HOME_RUN_TROT"
    HOME_TO_FIRST = "HOME_TO_FIRST"
    HOME_TO_SECOND = "HOME_TO_SECOND"
    HOME_TO_THIRD = "HOME_TO_THIRD"
    LEAD_DISTANCE = "LEAD_DISTANCE"
    OUT_OF_BOX = "OUT_OF_BOX"
    SECOND_TO_HOME = "SECOND_TO_HOME"
    SECOND_TO_THIRD = "SECOND_TO_THIRD"
    SECONDARY_LEAD_DISTANCE = "SECONDARY_LEAD_DISTANCE"
    STEAL_FIRST_TO_SECOND = "STEAL_FIRST_TO_SECOND"
    STEAL_SECOND_TO_THIRD = "STEAL_SECOND_TO_THIRD"
    STEAL_THIRD_TO_HOME = "STEAL_THIRD_TO_HOME"
    TAG_FIRST_STEP = "TAG_FIRST_STEP"
    TAG_FIRST_TO_SECOND = "TAG_FIRST_TO_SECOND"
    TAG_SECOND_TO_THIRD = "TAG_SECOND_TO_THIRD"
    TAG_THIRD_TO_HOME = "TAG_THIRD_TO_HOME"
    THIRD_TO_HOME = "THIRD_TO_HOME"
    OUTS_ABOVE_AVERAGE = "OUTS_ABOVE_AVERAGE"
    FIELDING_RUNS_PREVENTED = "FIELDING_RUNS_PREVENTED"
    STREAK = "STREAK"
    WINS_ABOVE_REPLACEMENT = "WINS_ABOVE_REPLACEMENT"
    GAME_DATE = "GAME_DATE"
    VERTICAL_BREAK = "VERTICAL_BREAK"
    BURST_DISTANCE = "BURST_DISTANCE"
    WEIGHTED_RUNS_ABOVE_AVERAGE = "WEIGHTED_RUNS_ABOVE_AVERAGE"
    WEIGHTED_RUNS_CREATED = "WEIGHTED_RUNS_CREATED"
    WEIGHTED_RUNS_CREATED_PLUS = "WEIGHTED_RUNS_CREATED_PLUS"
    RUNS_ABOVE_REPLACEMENT = "RUNS_ABOVE_REPLACEMENT"
    BATTING_RUNS_ABOVE_AVG = "BATTING_RUNS_ABOVE_AVG"
    FIELDING_RUNS_ABOVE_AVG = "FIELDING_RUNS_ABOVE_AVG"
    POSITIONAL_RUNS_ABOVE_AVG = "POSITIONAL_RUNS_ABOVE_AVG"
    BASE_RUNNING_RUNS_ABOVE_AVG = "BASE_RUNNING_RUNS_ABOVE_AVG"
    WEIGHTED_LEAGUE_ADJUST = "WEIGHTED_LEAGUE_ADJUST"
    REPLACEMENT_RUNS = "REPLACEMENT_RUNS"
    SPEED_SCORE = "SPEED_SCORE"
    ULTIMATE_BASE_RUNNING = "ULTIMATE_BASE_RUNNING"
    WEIGHTED_NOT_GROUND_INTO_DP_RUNS = "WEIGHTED_NOT_GROUND_INTO_DP_RUNS"
    WEIGHTED_STOLEN_BASE_RUNS = "WEIGHTED_STOLEN_BASE_RUNS"
    FIELDING_INDEPENDENT_PITCHING = "FIELDING_INDEPENDENT_PITCHING"
    EXPECTED_FIELDING_INDEPENDENT_PITCHING = "EXPECTED_FIELDING_INDEPENDENT_PITCHING"
    FIELDING_INDEPENDENT_PITCHING_MINUS = "FIELDING_INDEPENDENT_PITCHING_MINUS"
    RUNS_ALLOWED_BASED_WAR = "RUNS_ALLOWED_BASED_WAR"
    SHUTDOWNS = "SHUTDOWNS"
    MELTDOWNS = "MELTDOWNS"
    PITCHER_AVERAGE_LEVERAGE_INDEX = "PITCHER_AVERAGE_LEVERAGE_INDEX"
    INNING_AVERAGE_LEVERAGE_INDEX = "INNING_AVERAGE_LEVERAGE_INDEX"
    GAME_AVERAGE_LEVERAGE_INDEX = "GAME_AVERAGE_LEVERAGE_INDEX"
    END_OF_APPEARANCE_AVERAGE_LEVERAGE_INDEX = "END_OF_APPEARANCE_AVERAGE_LEVERAGE_INDEX"
    ERA_MINUS = "ERA_MINUS"
    JUMP_DISTANCE = "JUMP_DISTANCE"
    ATTACK_ANGLE = "ATTACK_ANGLE"
    BAT_SPEED = "BAT_SPEED"
    HOME_RUN_X_BALLPARKS = "HOME_RUN_X_BALLPARKS"
    HOME_RUN_VENUE_IDS = "HOME_RUN_VENUE_IDS"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """BaseballStatsEnum - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballStatsEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballStatsEnum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
