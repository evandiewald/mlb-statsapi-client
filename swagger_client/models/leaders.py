# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Leaders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'leader_category': 'PersonLeadersEnum',
        'stat_group': 'StatGroup',
        'season': 'str',
        'game_type': 'GameTypeEnum',
        'stat_type': 'StatType',
        'team': 'BaseballTeam',
        'league': 'League',
        'total_splits': 'int',
        'leaders': 'list[PlayerLeader]',
        'limits': 'LeaderLimits',
        'limit_meta_data': 'LimitMetadata',
        'hydrated_teams': 'dict(str, object)',
        'hydrated_people': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'leader_category': 'leaderCategory',
        'stat_group': 'statGroup',
        'season': 'season',
        'game_type': 'gameType',
        'stat_type': 'statType',
        'team': 'team',
        'league': 'league',
        'total_splits': 'totalSplits',
        'leaders': 'leaders',
        'limits': 'limits',
        'limit_meta_data': 'limitMetaData',
        'hydrated_teams': 'hydratedTeams',
        'hydrated_people': 'hydratedPeople',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, leader_category=None, stat_group=None, season=None, game_type=None, stat_type=None, team=None, league=None, total_splits=None, leaders=None, limits=None, limit_meta_data=None, hydrated_teams=None, hydrated_people=None, user_privileges=None):  # noqa: E501
        """Leaders - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._leader_category = None
        self._stat_group = None
        self._season = None
        self._game_type = None
        self._stat_type = None
        self._team = None
        self._league = None
        self._total_splits = None
        self._leaders = None
        self._limits = None
        self._limit_meta_data = None
        self._hydrated_teams = None
        self._hydrated_people = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if leader_category is not None:
            self.leader_category = leader_category
        if stat_group is not None:
            self.stat_group = stat_group
        if season is not None:
            self.season = season
        if game_type is not None:
            self.game_type = game_type
        if stat_type is not None:
            self.stat_type = stat_type
        if team is not None:
            self.team = team
        if league is not None:
            self.league = league
        if total_splits is not None:
            self.total_splits = total_splits
        if leaders is not None:
            self.leaders = leaders
        if limits is not None:
            self.limits = limits
        if limit_meta_data is not None:
            self.limit_meta_data = limit_meta_data
        if hydrated_teams is not None:
            self.hydrated_teams = hydrated_teams
        if hydrated_people is not None:
            self.hydrated_people = hydrated_people
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this Leaders.  # noqa: E501


        :return: The requesting_user_role of this Leaders.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this Leaders.


        :param requesting_user_role: The requesting_user_role of this Leaders.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def leader_category(self):
        """Gets the leader_category of this Leaders.  # noqa: E501


        :return: The leader_category of this Leaders.  # noqa: E501
        :rtype: PersonLeadersEnum
        """
        return self._leader_category

    @leader_category.setter
    def leader_category(self, leader_category):
        """Sets the leader_category of this Leaders.


        :param leader_category: The leader_category of this Leaders.  # noqa: E501
        :type: PersonLeadersEnum
        """

        self._leader_category = leader_category

    @property
    def stat_group(self):
        """Gets the stat_group of this Leaders.  # noqa: E501


        :return: The stat_group of this Leaders.  # noqa: E501
        :rtype: StatGroup
        """
        return self._stat_group

    @stat_group.setter
    def stat_group(self, stat_group):
        """Sets the stat_group of this Leaders.


        :param stat_group: The stat_group of this Leaders.  # noqa: E501
        :type: StatGroup
        """

        self._stat_group = stat_group

    @property
    def season(self):
        """Gets the season of this Leaders.  # noqa: E501


        :return: The season of this Leaders.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Leaders.


        :param season: The season of this Leaders.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def game_type(self):
        """Gets the game_type of this Leaders.  # noqa: E501


        :return: The game_type of this Leaders.  # noqa: E501
        :rtype: GameTypeEnum
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this Leaders.


        :param game_type: The game_type of this Leaders.  # noqa: E501
        :type: GameTypeEnum
        """

        self._game_type = game_type

    @property
    def stat_type(self):
        """Gets the stat_type of this Leaders.  # noqa: E501


        :return: The stat_type of this Leaders.  # noqa: E501
        :rtype: StatType
        """
        return self._stat_type

    @stat_type.setter
    def stat_type(self, stat_type):
        """Sets the stat_type of this Leaders.


        :param stat_type: The stat_type of this Leaders.  # noqa: E501
        :type: StatType
        """

        self._stat_type = stat_type

    @property
    def team(self):
        """Gets the team of this Leaders.  # noqa: E501


        :return: The team of this Leaders.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Leaders.


        :param team: The team of this Leaders.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def league(self):
        """Gets the league of this Leaders.  # noqa: E501


        :return: The league of this Leaders.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this Leaders.


        :param league: The league of this Leaders.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def total_splits(self):
        """Gets the total_splits of this Leaders.  # noqa: E501


        :return: The total_splits of this Leaders.  # noqa: E501
        :rtype: int
        """
        return self._total_splits

    @total_splits.setter
    def total_splits(self, total_splits):
        """Sets the total_splits of this Leaders.


        :param total_splits: The total_splits of this Leaders.  # noqa: E501
        :type: int
        """

        self._total_splits = total_splits

    @property
    def leaders(self):
        """Gets the leaders of this Leaders.  # noqa: E501


        :return: The leaders of this Leaders.  # noqa: E501
        :rtype: list[PlayerLeader]
        """
        return self._leaders

    @leaders.setter
    def leaders(self, leaders):
        """Sets the leaders of this Leaders.


        :param leaders: The leaders of this Leaders.  # noqa: E501
        :type: list[PlayerLeader]
        """

        self._leaders = leaders

    @property
    def limits(self):
        """Gets the limits of this Leaders.  # noqa: E501


        :return: The limits of this Leaders.  # noqa: E501
        :rtype: LeaderLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Leaders.


        :param limits: The limits of this Leaders.  # noqa: E501
        :type: LeaderLimits
        """

        self._limits = limits

    @property
    def limit_meta_data(self):
        """Gets the limit_meta_data of this Leaders.  # noqa: E501


        :return: The limit_meta_data of this Leaders.  # noqa: E501
        :rtype: LimitMetadata
        """
        return self._limit_meta_data

    @limit_meta_data.setter
    def limit_meta_data(self, limit_meta_data):
        """Sets the limit_meta_data of this Leaders.


        :param limit_meta_data: The limit_meta_data of this Leaders.  # noqa: E501
        :type: LimitMetadata
        """

        self._limit_meta_data = limit_meta_data

    @property
    def hydrated_teams(self):
        """Gets the hydrated_teams of this Leaders.  # noqa: E501


        :return: The hydrated_teams of this Leaders.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_teams

    @hydrated_teams.setter
    def hydrated_teams(self, hydrated_teams):
        """Sets the hydrated_teams of this Leaders.


        :param hydrated_teams: The hydrated_teams of this Leaders.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_teams = hydrated_teams

    @property
    def hydrated_people(self):
        """Gets the hydrated_people of this Leaders.  # noqa: E501


        :return: The hydrated_people of this Leaders.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_people

    @hydrated_people.setter
    def hydrated_people(self, hydrated_people):
        """Sets the hydrated_people of this Leaders.


        :param hydrated_people: The hydrated_people of this Leaders.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_people = hydrated_people

    @property
    def user_privileges(self):
        """Gets the user_privileges of this Leaders.  # noqa: E501


        :return: The user_privileges of this Leaders.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this Leaders.


        :param user_privileges: The user_privileges of this Leaders.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Leaders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Leaders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
