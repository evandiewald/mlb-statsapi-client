# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Matchup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'batter': 'BaseballPersonRestObject',
        'bat_side': 'DynamicEnumRestObject',
        'pitcher': 'BaseballPersonRestObject',
        'pitch_hand': 'DynamicEnumRestObject',
        'post_on_first': 'BaseballPersonRestObject',
        'post_on_second': 'BaseballPersonRestObject',
        'post_on_third': 'BaseballPersonRestObject',
        'batter_hot_cold_zone_stats': 'StatsRestObject',
        'pitcher_hot_cold_zone_stats': 'StatsRestObject',
        'batter_hot_cold_zones': 'list[BaseballHotColdZoneRestObject]',
        'pitcher_hot_cold_zones': 'list[BaseballHotColdZoneRestObject]',
        'splits': 'Split'
    }

    attribute_map = {
        'copyright': 'copyright',
        'batter': 'batter',
        'bat_side': 'batSide',
        'pitcher': 'pitcher',
        'pitch_hand': 'pitchHand',
        'post_on_first': 'postOnFirst',
        'post_on_second': 'postOnSecond',
        'post_on_third': 'postOnThird',
        'batter_hot_cold_zone_stats': 'batterHotColdZoneStats',
        'pitcher_hot_cold_zone_stats': 'pitcherHotColdZoneStats',
        'batter_hot_cold_zones': 'batterHotColdZones',
        'pitcher_hot_cold_zones': 'pitcherHotColdZones',
        'splits': 'splits'
    }

    def __init__(self, copyright=None, batter=None, bat_side=None, pitcher=None, pitch_hand=None, post_on_first=None, post_on_second=None, post_on_third=None, batter_hot_cold_zone_stats=None, pitcher_hot_cold_zone_stats=None, batter_hot_cold_zones=None, pitcher_hot_cold_zones=None, splits=None):  # noqa: E501
        """Matchup - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._batter = None
        self._bat_side = None
        self._pitcher = None
        self._pitch_hand = None
        self._post_on_first = None
        self._post_on_second = None
        self._post_on_third = None
        self._batter_hot_cold_zone_stats = None
        self._pitcher_hot_cold_zone_stats = None
        self._batter_hot_cold_zones = None
        self._pitcher_hot_cold_zones = None
        self._splits = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if batter is not None:
            self.batter = batter
        if bat_side is not None:
            self.bat_side = bat_side
        if pitcher is not None:
            self.pitcher = pitcher
        if pitch_hand is not None:
            self.pitch_hand = pitch_hand
        if post_on_first is not None:
            self.post_on_first = post_on_first
        if post_on_second is not None:
            self.post_on_second = post_on_second
        if post_on_third is not None:
            self.post_on_third = post_on_third
        if batter_hot_cold_zone_stats is not None:
            self.batter_hot_cold_zone_stats = batter_hot_cold_zone_stats
        if pitcher_hot_cold_zone_stats is not None:
            self.pitcher_hot_cold_zone_stats = pitcher_hot_cold_zone_stats
        if batter_hot_cold_zones is not None:
            self.batter_hot_cold_zones = batter_hot_cold_zones
        if pitcher_hot_cold_zones is not None:
            self.pitcher_hot_cold_zones = pitcher_hot_cold_zones
        if splits is not None:
            self.splits = splits

    @property
    def copyright(self):
        """Gets the copyright of this Matchup.  # noqa: E501


        :return: The copyright of this Matchup.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Matchup.


        :param copyright: The copyright of this Matchup.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def batter(self):
        """Gets the batter of this Matchup.  # noqa: E501


        :return: The batter of this Matchup.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this Matchup.


        :param batter: The batter of this Matchup.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._batter = batter

    @property
    def bat_side(self):
        """Gets the bat_side of this Matchup.  # noqa: E501


        :return: The bat_side of this Matchup.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._bat_side

    @bat_side.setter
    def bat_side(self, bat_side):
        """Sets the bat_side of this Matchup.


        :param bat_side: The bat_side of this Matchup.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._bat_side = bat_side

    @property
    def pitcher(self):
        """Gets the pitcher of this Matchup.  # noqa: E501


        :return: The pitcher of this Matchup.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this Matchup.


        :param pitcher: The pitcher of this Matchup.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._pitcher = pitcher

    @property
    def pitch_hand(self):
        """Gets the pitch_hand of this Matchup.  # noqa: E501


        :return: The pitch_hand of this Matchup.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._pitch_hand

    @pitch_hand.setter
    def pitch_hand(self, pitch_hand):
        """Sets the pitch_hand of this Matchup.


        :param pitch_hand: The pitch_hand of this Matchup.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._pitch_hand = pitch_hand

    @property
    def post_on_first(self):
        """Gets the post_on_first of this Matchup.  # noqa: E501


        :return: The post_on_first of this Matchup.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._post_on_first

    @post_on_first.setter
    def post_on_first(self, post_on_first):
        """Sets the post_on_first of this Matchup.


        :param post_on_first: The post_on_first of this Matchup.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._post_on_first = post_on_first

    @property
    def post_on_second(self):
        """Gets the post_on_second of this Matchup.  # noqa: E501


        :return: The post_on_second of this Matchup.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._post_on_second

    @post_on_second.setter
    def post_on_second(self, post_on_second):
        """Sets the post_on_second of this Matchup.


        :param post_on_second: The post_on_second of this Matchup.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._post_on_second = post_on_second

    @property
    def post_on_third(self):
        """Gets the post_on_third of this Matchup.  # noqa: E501


        :return: The post_on_third of this Matchup.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._post_on_third

    @post_on_third.setter
    def post_on_third(self, post_on_third):
        """Sets the post_on_third of this Matchup.


        :param post_on_third: The post_on_third of this Matchup.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._post_on_third = post_on_third

    @property
    def batter_hot_cold_zone_stats(self):
        """Gets the batter_hot_cold_zone_stats of this Matchup.  # noqa: E501


        :return: The batter_hot_cold_zone_stats of this Matchup.  # noqa: E501
        :rtype: StatsRestObject
        """
        return self._batter_hot_cold_zone_stats

    @batter_hot_cold_zone_stats.setter
    def batter_hot_cold_zone_stats(self, batter_hot_cold_zone_stats):
        """Sets the batter_hot_cold_zone_stats of this Matchup.


        :param batter_hot_cold_zone_stats: The batter_hot_cold_zone_stats of this Matchup.  # noqa: E501
        :type: StatsRestObject
        """

        self._batter_hot_cold_zone_stats = batter_hot_cold_zone_stats

    @property
    def pitcher_hot_cold_zone_stats(self):
        """Gets the pitcher_hot_cold_zone_stats of this Matchup.  # noqa: E501


        :return: The pitcher_hot_cold_zone_stats of this Matchup.  # noqa: E501
        :rtype: StatsRestObject
        """
        return self._pitcher_hot_cold_zone_stats

    @pitcher_hot_cold_zone_stats.setter
    def pitcher_hot_cold_zone_stats(self, pitcher_hot_cold_zone_stats):
        """Sets the pitcher_hot_cold_zone_stats of this Matchup.


        :param pitcher_hot_cold_zone_stats: The pitcher_hot_cold_zone_stats of this Matchup.  # noqa: E501
        :type: StatsRestObject
        """

        self._pitcher_hot_cold_zone_stats = pitcher_hot_cold_zone_stats

    @property
    def batter_hot_cold_zones(self):
        """Gets the batter_hot_cold_zones of this Matchup.  # noqa: E501


        :return: The batter_hot_cold_zones of this Matchup.  # noqa: E501
        :rtype: list[BaseballHotColdZoneRestObject]
        """
        return self._batter_hot_cold_zones

    @batter_hot_cold_zones.setter
    def batter_hot_cold_zones(self, batter_hot_cold_zones):
        """Sets the batter_hot_cold_zones of this Matchup.


        :param batter_hot_cold_zones: The batter_hot_cold_zones of this Matchup.  # noqa: E501
        :type: list[BaseballHotColdZoneRestObject]
        """

        self._batter_hot_cold_zones = batter_hot_cold_zones

    @property
    def pitcher_hot_cold_zones(self):
        """Gets the pitcher_hot_cold_zones of this Matchup.  # noqa: E501


        :return: The pitcher_hot_cold_zones of this Matchup.  # noqa: E501
        :rtype: list[BaseballHotColdZoneRestObject]
        """
        return self._pitcher_hot_cold_zones

    @pitcher_hot_cold_zones.setter
    def pitcher_hot_cold_zones(self, pitcher_hot_cold_zones):
        """Sets the pitcher_hot_cold_zones of this Matchup.


        :param pitcher_hot_cold_zones: The pitcher_hot_cold_zones of this Matchup.  # noqa: E501
        :type: list[BaseballHotColdZoneRestObject]
        """

        self._pitcher_hot_cold_zones = pitcher_hot_cold_zones

    @property
    def splits(self):
        """Gets the splits of this Matchup.  # noqa: E501


        :return: The splits of this Matchup.  # noqa: E501
        :rtype: Split
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this Matchup.


        :param splits: The splits of this Matchup.  # noqa: E501
        :type: Split
        """

        self._splits = splits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Matchup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Matchup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
