# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballDecisionRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hydrations': 'list[str]',
        'winner': 'BaseballPersonRestObject',
        'loser': 'BaseballPersonRestObject',
        'save': 'BaseballPersonRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'winner': 'winner',
        'loser': 'loser',
        'save': 'save'
    }

    def __init__(self, copyright=None, hydrations=None, winner=None, loser=None, save=None):  # noqa: E501
        """BaseballDecisionRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hydrations = None
        self._winner = None
        self._loser = None
        self._save = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if winner is not None:
            self.winner = winner
        if loser is not None:
            self.loser = loser
        if save is not None:
            self.save = save

    @property
    def copyright(self):
        """Gets the copyright of this BaseballDecisionRestObject.  # noqa: E501


        :return: The copyright of this BaseballDecisionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballDecisionRestObject.


        :param copyright: The copyright of this BaseballDecisionRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this BaseballDecisionRestObject.  # noqa: E501


        :return: The hydrations of this BaseballDecisionRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this BaseballDecisionRestObject.


        :param hydrations: The hydrations of this BaseballDecisionRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def winner(self):
        """Gets the winner of this BaseballDecisionRestObject.  # noqa: E501


        :return: The winner of this BaseballDecisionRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this BaseballDecisionRestObject.


        :param winner: The winner of this BaseballDecisionRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._winner = winner

    @property
    def loser(self):
        """Gets the loser of this BaseballDecisionRestObject.  # noqa: E501


        :return: The loser of this BaseballDecisionRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._loser

    @loser.setter
    def loser(self, loser):
        """Sets the loser of this BaseballDecisionRestObject.


        :param loser: The loser of this BaseballDecisionRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._loser = loser

    @property
    def save(self):
        """Gets the save of this BaseballDecisionRestObject.  # noqa: E501


        :return: The save of this BaseballDecisionRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._save

    @save.setter
    def save(self, save):
        """Sets the save of this BaseballDecisionRestObject.


        :param save: The save of this BaseballDecisionRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._save = save

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballDecisionRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballDecisionRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
