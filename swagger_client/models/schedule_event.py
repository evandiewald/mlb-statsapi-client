# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'link': 'str',
        'event_type': 'ScheduleEventTypes',
        'event_date': 'datetime',
        'calendar_date': 'date',
        'end_date': 'date',
        'end_date_time': 'datetime',
        'images': 'list[Image]',
        'venue': 'Venue',
        'sports': 'list[Sport]',
        'leagues': 'list[League]',
        'divisions': 'list[Division]',
        'organization_ids': 'list[int]',
        'game': 'BaseballScheduleItem',
        'content': 'ScheduleEventCms',
        'event_designations': 'list[Designation]',
        'tickets': 'list[BaseballTicket]',
        'promotion_tickets': 'list[BaseballTicket]',
        'time_zone': 'TimeZone',
        'event_status': 'EventStatus',
        'team_id': 'int',
        'organization_id': 'int',
        'organization_type': 'str',
        'calendar_type': 'CalendarTypes',
        'file_code': 'str',
        'event_number': 'int',
        'public_facing': 'PublicFacingEnum',
        'teams': 'list[BaseballTeam]',
        'tracking_version': 'TrackingVersion',
        'tracking_system_owner': 'TrackingSystemOwner',
        'coaching_video': 'list[MediaSourceType]',
        'broadcasts': 'list[NonGameDateBroadcast]',
        'non_game_guid': 'str',
        'multi_day': 'bool',
        'primary_calendar': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'link': 'link',
        'event_type': 'eventType',
        'event_date': 'eventDate',
        'calendar_date': 'calendarDate',
        'end_date': 'endDate',
        'end_date_time': 'endDateTime',
        'images': 'images',
        'venue': 'venue',
        'sports': 'sports',
        'leagues': 'leagues',
        'divisions': 'divisions',
        'organization_ids': 'organizationIds',
        'game': 'game',
        'content': 'content',
        'event_designations': 'eventDesignations',
        'tickets': 'tickets',
        'promotion_tickets': 'promotionTickets',
        'time_zone': 'timeZone',
        'event_status': 'eventStatus',
        'team_id': 'teamId',
        'organization_id': 'organizationId',
        'organization_type': 'organizationType',
        'calendar_type': 'calendarType',
        'file_code': 'fileCode',
        'event_number': 'eventNumber',
        'public_facing': 'publicFacing',
        'teams': 'teams',
        'tracking_version': 'trackingVersion',
        'tracking_system_owner': 'trackingSystemOwner',
        'coaching_video': 'coachingVideo',
        'broadcasts': 'broadcasts',
        'non_game_guid': 'nonGameGuid',
        'multi_day': 'multiDay',
        'primary_calendar': 'primaryCalendar'
    }

    def __init__(self, id=None, name=None, link=None, event_type=None, event_date=None, calendar_date=None, end_date=None, end_date_time=None, images=None, venue=None, sports=None, leagues=None, divisions=None, organization_ids=None, game=None, content=None, event_designations=None, tickets=None, promotion_tickets=None, time_zone=None, event_status=None, team_id=None, organization_id=None, organization_type=None, calendar_type=None, file_code=None, event_number=None, public_facing=None, teams=None, tracking_version=None, tracking_system_owner=None, coaching_video=None, broadcasts=None, non_game_guid=None, multi_day=None, primary_calendar=None):  # noqa: E501
        """ScheduleEvent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._link = None
        self._event_type = None
        self._event_date = None
        self._calendar_date = None
        self._end_date = None
        self._end_date_time = None
        self._images = None
        self._venue = None
        self._sports = None
        self._leagues = None
        self._divisions = None
        self._organization_ids = None
        self._game = None
        self._content = None
        self._event_designations = None
        self._tickets = None
        self._promotion_tickets = None
        self._time_zone = None
        self._event_status = None
        self._team_id = None
        self._organization_id = None
        self._organization_type = None
        self._calendar_type = None
        self._file_code = None
        self._event_number = None
        self._public_facing = None
        self._teams = None
        self._tracking_version = None
        self._tracking_system_owner = None
        self._coaching_video = None
        self._broadcasts = None
        self._non_game_guid = None
        self._multi_day = None
        self._primary_calendar = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if link is not None:
            self.link = link
        if event_type is not None:
            self.event_type = event_type
        if event_date is not None:
            self.event_date = event_date
        if calendar_date is not None:
            self.calendar_date = calendar_date
        if end_date is not None:
            self.end_date = end_date
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if images is not None:
            self.images = images
        if venue is not None:
            self.venue = venue
        if sports is not None:
            self.sports = sports
        if leagues is not None:
            self.leagues = leagues
        if divisions is not None:
            self.divisions = divisions
        if organization_ids is not None:
            self.organization_ids = organization_ids
        if game is not None:
            self.game = game
        if content is not None:
            self.content = content
        if event_designations is not None:
            self.event_designations = event_designations
        if tickets is not None:
            self.tickets = tickets
        if promotion_tickets is not None:
            self.promotion_tickets = promotion_tickets
        if time_zone is not None:
            self.time_zone = time_zone
        if event_status is not None:
            self.event_status = event_status
        if team_id is not None:
            self.team_id = team_id
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_type is not None:
            self.organization_type = organization_type
        if calendar_type is not None:
            self.calendar_type = calendar_type
        if file_code is not None:
            self.file_code = file_code
        if event_number is not None:
            self.event_number = event_number
        if public_facing is not None:
            self.public_facing = public_facing
        if teams is not None:
            self.teams = teams
        if tracking_version is not None:
            self.tracking_version = tracking_version
        if tracking_system_owner is not None:
            self.tracking_system_owner = tracking_system_owner
        if coaching_video is not None:
            self.coaching_video = coaching_video
        if broadcasts is not None:
            self.broadcasts = broadcasts
        if non_game_guid is not None:
            self.non_game_guid = non_game_guid
        if multi_day is not None:
            self.multi_day = multi_day
        if primary_calendar is not None:
            self.primary_calendar = primary_calendar

    @property
    def id(self):
        """Gets the id of this ScheduleEvent.  # noqa: E501


        :return: The id of this ScheduleEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleEvent.


        :param id: The id of this ScheduleEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScheduleEvent.  # noqa: E501


        :return: The name of this ScheduleEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleEvent.


        :param name: The name of this ScheduleEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def link(self):
        """Gets the link of this ScheduleEvent.  # noqa: E501


        :return: The link of this ScheduleEvent.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ScheduleEvent.


        :param link: The link of this ScheduleEvent.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def event_type(self):
        """Gets the event_type of this ScheduleEvent.  # noqa: E501


        :return: The event_type of this ScheduleEvent.  # noqa: E501
        :rtype: ScheduleEventTypes
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ScheduleEvent.


        :param event_type: The event_type of this ScheduleEvent.  # noqa: E501
        :type: ScheduleEventTypes
        """

        self._event_type = event_type

    @property
    def event_date(self):
        """Gets the event_date of this ScheduleEvent.  # noqa: E501


        :return: The event_date of this ScheduleEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this ScheduleEvent.


        :param event_date: The event_date of this ScheduleEvent.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def calendar_date(self):
        """Gets the calendar_date of this ScheduleEvent.  # noqa: E501


        :return: The calendar_date of this ScheduleEvent.  # noqa: E501
        :rtype: date
        """
        return self._calendar_date

    @calendar_date.setter
    def calendar_date(self, calendar_date):
        """Sets the calendar_date of this ScheduleEvent.


        :param calendar_date: The calendar_date of this ScheduleEvent.  # noqa: E501
        :type: date
        """

        self._calendar_date = calendar_date

    @property
    def end_date(self):
        """Gets the end_date of this ScheduleEvent.  # noqa: E501


        :return: The end_date of this ScheduleEvent.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ScheduleEvent.


        :param end_date: The end_date of this ScheduleEvent.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ScheduleEvent.  # noqa: E501


        :return: The end_date_time of this ScheduleEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ScheduleEvent.


        :param end_date_time: The end_date_time of this ScheduleEvent.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def images(self):
        """Gets the images of this ScheduleEvent.  # noqa: E501


        :return: The images of this ScheduleEvent.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ScheduleEvent.


        :param images: The images of this ScheduleEvent.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def venue(self):
        """Gets the venue of this ScheduleEvent.  # noqa: E501


        :return: The venue of this ScheduleEvent.  # noqa: E501
        :rtype: Venue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this ScheduleEvent.


        :param venue: The venue of this ScheduleEvent.  # noqa: E501
        :type: Venue
        """

        self._venue = venue

    @property
    def sports(self):
        """Gets the sports of this ScheduleEvent.  # noqa: E501


        :return: The sports of this ScheduleEvent.  # noqa: E501
        :rtype: list[Sport]
        """
        return self._sports

    @sports.setter
    def sports(self, sports):
        """Sets the sports of this ScheduleEvent.


        :param sports: The sports of this ScheduleEvent.  # noqa: E501
        :type: list[Sport]
        """

        self._sports = sports

    @property
    def leagues(self):
        """Gets the leagues of this ScheduleEvent.  # noqa: E501


        :return: The leagues of this ScheduleEvent.  # noqa: E501
        :rtype: list[League]
        """
        return self._leagues

    @leagues.setter
    def leagues(self, leagues):
        """Sets the leagues of this ScheduleEvent.


        :param leagues: The leagues of this ScheduleEvent.  # noqa: E501
        :type: list[League]
        """

        self._leagues = leagues

    @property
    def divisions(self):
        """Gets the divisions of this ScheduleEvent.  # noqa: E501


        :return: The divisions of this ScheduleEvent.  # noqa: E501
        :rtype: list[Division]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this ScheduleEvent.


        :param divisions: The divisions of this ScheduleEvent.  # noqa: E501
        :type: list[Division]
        """

        self._divisions = divisions

    @property
    def organization_ids(self):
        """Gets the organization_ids of this ScheduleEvent.  # noqa: E501


        :return: The organization_ids of this ScheduleEvent.  # noqa: E501
        :rtype: list[int]
        """
        return self._organization_ids

    @organization_ids.setter
    def organization_ids(self, organization_ids):
        """Sets the organization_ids of this ScheduleEvent.


        :param organization_ids: The organization_ids of this ScheduleEvent.  # noqa: E501
        :type: list[int]
        """

        self._organization_ids = organization_ids

    @property
    def game(self):
        """Gets the game of this ScheduleEvent.  # noqa: E501


        :return: The game of this ScheduleEvent.  # noqa: E501
        :rtype: BaseballScheduleItem
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this ScheduleEvent.


        :param game: The game of this ScheduleEvent.  # noqa: E501
        :type: BaseballScheduleItem
        """

        self._game = game

    @property
    def content(self):
        """Gets the content of this ScheduleEvent.  # noqa: E501


        :return: The content of this ScheduleEvent.  # noqa: E501
        :rtype: ScheduleEventCms
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ScheduleEvent.


        :param content: The content of this ScheduleEvent.  # noqa: E501
        :type: ScheduleEventCms
        """

        self._content = content

    @property
    def event_designations(self):
        """Gets the event_designations of this ScheduleEvent.  # noqa: E501


        :return: The event_designations of this ScheduleEvent.  # noqa: E501
        :rtype: list[Designation]
        """
        return self._event_designations

    @event_designations.setter
    def event_designations(self, event_designations):
        """Sets the event_designations of this ScheduleEvent.


        :param event_designations: The event_designations of this ScheduleEvent.  # noqa: E501
        :type: list[Designation]
        """

        self._event_designations = event_designations

    @property
    def tickets(self):
        """Gets the tickets of this ScheduleEvent.  # noqa: E501


        :return: The tickets of this ScheduleEvent.  # noqa: E501
        :rtype: list[BaseballTicket]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this ScheduleEvent.


        :param tickets: The tickets of this ScheduleEvent.  # noqa: E501
        :type: list[BaseballTicket]
        """

        self._tickets = tickets

    @property
    def promotion_tickets(self):
        """Gets the promotion_tickets of this ScheduleEvent.  # noqa: E501


        :return: The promotion_tickets of this ScheduleEvent.  # noqa: E501
        :rtype: list[BaseballTicket]
        """
        return self._promotion_tickets

    @promotion_tickets.setter
    def promotion_tickets(self, promotion_tickets):
        """Sets the promotion_tickets of this ScheduleEvent.


        :param promotion_tickets: The promotion_tickets of this ScheduleEvent.  # noqa: E501
        :type: list[BaseballTicket]
        """

        self._promotion_tickets = promotion_tickets

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduleEvent.  # noqa: E501


        :return: The time_zone of this ScheduleEvent.  # noqa: E501
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduleEvent.


        :param time_zone: The time_zone of this ScheduleEvent.  # noqa: E501
        :type: TimeZone
        """

        self._time_zone = time_zone

    @property
    def event_status(self):
        """Gets the event_status of this ScheduleEvent.  # noqa: E501


        :return: The event_status of this ScheduleEvent.  # noqa: E501
        :rtype: EventStatus
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """Sets the event_status of this ScheduleEvent.


        :param event_status: The event_status of this ScheduleEvent.  # noqa: E501
        :type: EventStatus
        """

        self._event_status = event_status

    @property
    def team_id(self):
        """Gets the team_id of this ScheduleEvent.  # noqa: E501


        :return: The team_id of this ScheduleEvent.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ScheduleEvent.


        :param team_id: The team_id of this ScheduleEvent.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ScheduleEvent.  # noqa: E501


        :return: The organization_id of this ScheduleEvent.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ScheduleEvent.


        :param organization_id: The organization_id of this ScheduleEvent.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def organization_type(self):
        """Gets the organization_type of this ScheduleEvent.  # noqa: E501


        :return: The organization_type of this ScheduleEvent.  # noqa: E501
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this ScheduleEvent.


        :param organization_type: The organization_type of this ScheduleEvent.  # noqa: E501
        :type: str
        """

        self._organization_type = organization_type

    @property
    def calendar_type(self):
        """Gets the calendar_type of this ScheduleEvent.  # noqa: E501


        :return: The calendar_type of this ScheduleEvent.  # noqa: E501
        :rtype: CalendarTypes
        """
        return self._calendar_type

    @calendar_type.setter
    def calendar_type(self, calendar_type):
        """Sets the calendar_type of this ScheduleEvent.


        :param calendar_type: The calendar_type of this ScheduleEvent.  # noqa: E501
        :type: CalendarTypes
        """

        self._calendar_type = calendar_type

    @property
    def file_code(self):
        """Gets the file_code of this ScheduleEvent.  # noqa: E501


        :return: The file_code of this ScheduleEvent.  # noqa: E501
        :rtype: str
        """
        return self._file_code

    @file_code.setter
    def file_code(self, file_code):
        """Sets the file_code of this ScheduleEvent.


        :param file_code: The file_code of this ScheduleEvent.  # noqa: E501
        :type: str
        """

        self._file_code = file_code

    @property
    def event_number(self):
        """Gets the event_number of this ScheduleEvent.  # noqa: E501


        :return: The event_number of this ScheduleEvent.  # noqa: E501
        :rtype: int
        """
        return self._event_number

    @event_number.setter
    def event_number(self, event_number):
        """Sets the event_number of this ScheduleEvent.


        :param event_number: The event_number of this ScheduleEvent.  # noqa: E501
        :type: int
        """

        self._event_number = event_number

    @property
    def public_facing(self):
        """Gets the public_facing of this ScheduleEvent.  # noqa: E501


        :return: The public_facing of this ScheduleEvent.  # noqa: E501
        :rtype: PublicFacingEnum
        """
        return self._public_facing

    @public_facing.setter
    def public_facing(self, public_facing):
        """Sets the public_facing of this ScheduleEvent.


        :param public_facing: The public_facing of this ScheduleEvent.  # noqa: E501
        :type: PublicFacingEnum
        """

        self._public_facing = public_facing

    @property
    def teams(self):
        """Gets the teams of this ScheduleEvent.  # noqa: E501


        :return: The teams of this ScheduleEvent.  # noqa: E501
        :rtype: list[BaseballTeam]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ScheduleEvent.


        :param teams: The teams of this ScheduleEvent.  # noqa: E501
        :type: list[BaseballTeam]
        """

        self._teams = teams

    @property
    def tracking_version(self):
        """Gets the tracking_version of this ScheduleEvent.  # noqa: E501


        :return: The tracking_version of this ScheduleEvent.  # noqa: E501
        :rtype: TrackingVersion
        """
        return self._tracking_version

    @tracking_version.setter
    def tracking_version(self, tracking_version):
        """Sets the tracking_version of this ScheduleEvent.


        :param tracking_version: The tracking_version of this ScheduleEvent.  # noqa: E501
        :type: TrackingVersion
        """

        self._tracking_version = tracking_version

    @property
    def tracking_system_owner(self):
        """Gets the tracking_system_owner of this ScheduleEvent.  # noqa: E501


        :return: The tracking_system_owner of this ScheduleEvent.  # noqa: E501
        :rtype: TrackingSystemOwner
        """
        return self._tracking_system_owner

    @tracking_system_owner.setter
    def tracking_system_owner(self, tracking_system_owner):
        """Sets the tracking_system_owner of this ScheduleEvent.


        :param tracking_system_owner: The tracking_system_owner of this ScheduleEvent.  # noqa: E501
        :type: TrackingSystemOwner
        """

        self._tracking_system_owner = tracking_system_owner

    @property
    def coaching_video(self):
        """Gets the coaching_video of this ScheduleEvent.  # noqa: E501


        :return: The coaching_video of this ScheduleEvent.  # noqa: E501
        :rtype: list[MediaSourceType]
        """
        return self._coaching_video

    @coaching_video.setter
    def coaching_video(self, coaching_video):
        """Sets the coaching_video of this ScheduleEvent.


        :param coaching_video: The coaching_video of this ScheduleEvent.  # noqa: E501
        :type: list[MediaSourceType]
        """

        self._coaching_video = coaching_video

    @property
    def broadcasts(self):
        """Gets the broadcasts of this ScheduleEvent.  # noqa: E501


        :return: The broadcasts of this ScheduleEvent.  # noqa: E501
        :rtype: list[NonGameDateBroadcast]
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this ScheduleEvent.


        :param broadcasts: The broadcasts of this ScheduleEvent.  # noqa: E501
        :type: list[NonGameDateBroadcast]
        """

        self._broadcasts = broadcasts

    @property
    def non_game_guid(self):
        """Gets the non_game_guid of this ScheduleEvent.  # noqa: E501


        :return: The non_game_guid of this ScheduleEvent.  # noqa: E501
        :rtype: str
        """
        return self._non_game_guid

    @non_game_guid.setter
    def non_game_guid(self, non_game_guid):
        """Sets the non_game_guid of this ScheduleEvent.


        :param non_game_guid: The non_game_guid of this ScheduleEvent.  # noqa: E501
        :type: str
        """

        self._non_game_guid = non_game_guid

    @property
    def multi_day(self):
        """Gets the multi_day of this ScheduleEvent.  # noqa: E501


        :return: The multi_day of this ScheduleEvent.  # noqa: E501
        :rtype: bool
        """
        return self._multi_day

    @multi_day.setter
    def multi_day(self, multi_day):
        """Sets the multi_day of this ScheduleEvent.


        :param multi_day: The multi_day of this ScheduleEvent.  # noqa: E501
        :type: bool
        """

        self._multi_day = multi_day

    @property
    def primary_calendar(self):
        """Gets the primary_calendar of this ScheduleEvent.  # noqa: E501


        :return: The primary_calendar of this ScheduleEvent.  # noqa: E501
        :rtype: bool
        """
        return self._primary_calendar

    @primary_calendar.setter
    def primary_calendar(self, primary_calendar):
        """Sets the primary_calendar of this ScheduleEvent.


        :param primary_calendar: The primary_calendar of this ScheduleEvent.  # noqa: E501
        :type: bool
        """

        self._primary_calendar = primary_calendar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
