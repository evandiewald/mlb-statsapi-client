# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InningHit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'team': 'BaseballTeamRestObject',
        'inning': 'int',
        'pitcher': 'BaseballPersonRestObject',
        'batter': 'BaseballPersonRestObject',
        'coordinates': 'Coordinate',
        'type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'team': 'team',
        'inning': 'inning',
        'pitcher': 'pitcher',
        'batter': 'batter',
        'coordinates': 'coordinates',
        'type': 'type',
        'description': 'description'
    }

    def __init__(self, copyright=None, team=None, inning=None, pitcher=None, batter=None, coordinates=None, type=None, description=None):  # noqa: E501
        """InningHit - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._team = None
        self._inning = None
        self._pitcher = None
        self._batter = None
        self._coordinates = None
        self._type = None
        self._description = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if team is not None:
            self.team = team
        if inning is not None:
            self.inning = inning
        if pitcher is not None:
            self.pitcher = pitcher
        if batter is not None:
            self.batter = batter
        if coordinates is not None:
            self.coordinates = coordinates
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description

    @property
    def copyright(self):
        """Gets the copyright of this InningHit.  # noqa: E501


        :return: The copyright of this InningHit.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this InningHit.


        :param copyright: The copyright of this InningHit.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def team(self):
        """Gets the team of this InningHit.  # noqa: E501


        :return: The team of this InningHit.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this InningHit.


        :param team: The team of this InningHit.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def inning(self):
        """Gets the inning of this InningHit.  # noqa: E501


        :return: The inning of this InningHit.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this InningHit.


        :param inning: The inning of this InningHit.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def pitcher(self):
        """Gets the pitcher of this InningHit.  # noqa: E501


        :return: The pitcher of this InningHit.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this InningHit.


        :param pitcher: The pitcher of this InningHit.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._pitcher = pitcher

    @property
    def batter(self):
        """Gets the batter of this InningHit.  # noqa: E501


        :return: The batter of this InningHit.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this InningHit.


        :param batter: The batter of this InningHit.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._batter = batter

    @property
    def coordinates(self):
        """Gets the coordinates of this InningHit.  # noqa: E501


        :return: The coordinates of this InningHit.  # noqa: E501
        :rtype: Coordinate
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this InningHit.


        :param coordinates: The coordinates of this InningHit.  # noqa: E501
        :type: Coordinate
        """

        self._coordinates = coordinates

    @property
    def type(self):
        """Gets the type of this InningHit.  # noqa: E501


        :return: The type of this InningHit.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InningHit.


        :param type: The type of this InningHit.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this InningHit.  # noqa: E501


        :return: The description of this InningHit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InningHit.


        :param description: The description of this InningHit.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InningHit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InningHit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
