# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenericLookup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BAT_SIDE = "BAT_SIDE"
    BATS = "BATS"
    DOUBLE_HEADER_SW = "DOUBLE_HEADER_SW"
    DRAFT_TYPE = "DRAFT_TYPE"
    GAMEDAY_SW = "GAMEDAY_SW"
    HIT_HARDNESS = "HIT_HARDNESS"
    HIT_TRAJECTORY = "HIT_TRAJECTORY"
    IF_NECESSARY = "IF_NECESSARY"
    MOUND_VISIT_TYPE = "MOUND_VISIT_TYPE"
    PITCH_CODE = "PITCH_CODE"
    PITCH_HAND = "PITCH_HAND"
    PITCH_TYPE = "PITCH_TYPE"
    PLAYER_STATUS = "PLAYER_STATUS"
    REVIEW_REASON = "REVIEW_REASON"
    SIT_CODE = "SIT_CODE"
    SKY = "SKY"
    TIEBREAKER_SW = "TIEBREAKER_SW"
    TRANS_TYPE = "TRANS_TYPE"
    THROWS = "THROWS"
    WIND_DIRECTION = "WIND_DIRECTION"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """GenericLookup - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenericLookup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenericLookup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
