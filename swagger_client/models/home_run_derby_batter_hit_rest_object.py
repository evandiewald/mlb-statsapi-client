# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomeRunDerbyBatterHitRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'bonus_time': 'bool',
        'tie_breaker': 'bool',
        'home_run': 'bool',
        'hit_data': 'HitSegmentRestObject',
        'is_home_run': 'bool',
        'time': 'datetime',
        'play_id': 'str',
        'time_remaining': 'str',
        'time_remaining_seconds': 'int',
        'is_bonus_time': 'bool',
        'bonus_outs_current': 'int',
        'bonus_outs_total': 'int',
        'is_tie_breaker': 'bool',
        'tie_breaker_num': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'bonus_time': 'bonusTime',
        'tie_breaker': 'tieBreaker',
        'home_run': 'homeRun',
        'hit_data': 'hitData',
        'is_home_run': 'isHomeRun',
        'time': 'time',
        'play_id': 'playId',
        'time_remaining': 'timeRemaining',
        'time_remaining_seconds': 'timeRemainingSeconds',
        'is_bonus_time': 'isBonusTime',
        'bonus_outs_current': 'bonusOutsCurrent',
        'bonus_outs_total': 'bonusOutsTotal',
        'is_tie_breaker': 'isTieBreaker',
        'tie_breaker_num': 'tieBreakerNum'
    }

    def __init__(self, copyright=None, bonus_time=None, tie_breaker=None, home_run=None, hit_data=None, is_home_run=None, time=None, play_id=None, time_remaining=None, time_remaining_seconds=None, is_bonus_time=None, bonus_outs_current=None, bonus_outs_total=None, is_tie_breaker=None, tie_breaker_num=None):  # noqa: E501
        """HomeRunDerbyBatterHitRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._bonus_time = None
        self._tie_breaker = None
        self._home_run = None
        self._hit_data = None
        self._is_home_run = None
        self._time = None
        self._play_id = None
        self._time_remaining = None
        self._time_remaining_seconds = None
        self._is_bonus_time = None
        self._bonus_outs_current = None
        self._bonus_outs_total = None
        self._is_tie_breaker = None
        self._tie_breaker_num = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if bonus_time is not None:
            self.bonus_time = bonus_time
        if tie_breaker is not None:
            self.tie_breaker = tie_breaker
        if home_run is not None:
            self.home_run = home_run
        if hit_data is not None:
            self.hit_data = hit_data
        if is_home_run is not None:
            self.is_home_run = is_home_run
        if time is not None:
            self.time = time
        if play_id is not None:
            self.play_id = play_id
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if time_remaining_seconds is not None:
            self.time_remaining_seconds = time_remaining_seconds
        if is_bonus_time is not None:
            self.is_bonus_time = is_bonus_time
        if bonus_outs_current is not None:
            self.bonus_outs_current = bonus_outs_current
        if bonus_outs_total is not None:
            self.bonus_outs_total = bonus_outs_total
        if is_tie_breaker is not None:
            self.is_tie_breaker = is_tie_breaker
        if tie_breaker_num is not None:
            self.tie_breaker_num = tie_breaker_num

    @property
    def copyright(self):
        """Gets the copyright of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The copyright of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this HomeRunDerbyBatterHitRestObject.


        :param copyright: The copyright of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def bonus_time(self):
        """Gets the bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._bonus_time

    @bonus_time.setter
    def bonus_time(self, bonus_time):
        """Sets the bonus_time of this HomeRunDerbyBatterHitRestObject.


        :param bonus_time: The bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._bonus_time = bonus_time

    @property
    def tie_breaker(self):
        """Gets the tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._tie_breaker

    @tie_breaker.setter
    def tie_breaker(self, tie_breaker):
        """Sets the tie_breaker of this HomeRunDerbyBatterHitRestObject.


        :param tie_breaker: The tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._tie_breaker = tie_breaker

    @property
    def home_run(self):
        """Gets the home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._home_run

    @home_run.setter
    def home_run(self, home_run):
        """Sets the home_run of this HomeRunDerbyBatterHitRestObject.


        :param home_run: The home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._home_run = home_run

    @property
    def hit_data(self):
        """Gets the hit_data of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The hit_data of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: HitSegmentRestObject
        """
        return self._hit_data

    @hit_data.setter
    def hit_data(self, hit_data):
        """Sets the hit_data of this HomeRunDerbyBatterHitRestObject.


        :param hit_data: The hit_data of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: HitSegmentRestObject
        """

        self._hit_data = hit_data

    @property
    def is_home_run(self):
        """Gets the is_home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The is_home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_home_run

    @is_home_run.setter
    def is_home_run(self, is_home_run):
        """Sets the is_home_run of this HomeRunDerbyBatterHitRestObject.


        :param is_home_run: The is_home_run of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._is_home_run = is_home_run

    @property
    def time(self):
        """Gets the time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this HomeRunDerbyBatterHitRestObject.


        :param time: The time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def play_id(self):
        """Gets the play_id of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The play_id of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this HomeRunDerbyBatterHitRestObject.


        :param play_id: The play_id of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def time_remaining(self):
        """Gets the time_remaining of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The time_remaining of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this HomeRunDerbyBatterHitRestObject.


        :param time_remaining: The time_remaining of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: str
        """

        self._time_remaining = time_remaining

    @property
    def time_remaining_seconds(self):
        """Gets the time_remaining_seconds of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The time_remaining_seconds of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining_seconds

    @time_remaining_seconds.setter
    def time_remaining_seconds(self, time_remaining_seconds):
        """Sets the time_remaining_seconds of this HomeRunDerbyBatterHitRestObject.


        :param time_remaining_seconds: The time_remaining_seconds of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: int
        """

        self._time_remaining_seconds = time_remaining_seconds

    @property
    def is_bonus_time(self):
        """Gets the is_bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The is_bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_bonus_time

    @is_bonus_time.setter
    def is_bonus_time(self, is_bonus_time):
        """Sets the is_bonus_time of this HomeRunDerbyBatterHitRestObject.


        :param is_bonus_time: The is_bonus_time of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._is_bonus_time = is_bonus_time

    @property
    def bonus_outs_current(self):
        """Gets the bonus_outs_current of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The bonus_outs_current of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_outs_current

    @bonus_outs_current.setter
    def bonus_outs_current(self, bonus_outs_current):
        """Sets the bonus_outs_current of this HomeRunDerbyBatterHitRestObject.


        :param bonus_outs_current: The bonus_outs_current of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_outs_current = bonus_outs_current

    @property
    def bonus_outs_total(self):
        """Gets the bonus_outs_total of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The bonus_outs_total of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_outs_total

    @bonus_outs_total.setter
    def bonus_outs_total(self, bonus_outs_total):
        """Sets the bonus_outs_total of this HomeRunDerbyBatterHitRestObject.


        :param bonus_outs_total: The bonus_outs_total of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_outs_total = bonus_outs_total

    @property
    def is_tie_breaker(self):
        """Gets the is_tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The is_tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_tie_breaker

    @is_tie_breaker.setter
    def is_tie_breaker(self, is_tie_breaker):
        """Sets the is_tie_breaker of this HomeRunDerbyBatterHitRestObject.


        :param is_tie_breaker: The is_tie_breaker of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: bool
        """

        self._is_tie_breaker = is_tie_breaker

    @property
    def tie_breaker_num(self):
        """Gets the tie_breaker_num of this HomeRunDerbyBatterHitRestObject.  # noqa: E501


        :return: The tie_breaker_num of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :rtype: int
        """
        return self._tie_breaker_num

    @tie_breaker_num.setter
    def tie_breaker_num(self, tie_breaker_num):
        """Sets the tie_breaker_num of this HomeRunDerbyBatterHitRestObject.


        :param tie_breaker_num: The tie_breaker_num of this HomeRunDerbyBatterHitRestObject.  # noqa: E501
        :type: int
        """

        self._tie_breaker_num = tie_breaker_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeRunDerbyBatterHitRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeRunDerbyBatterHitRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
