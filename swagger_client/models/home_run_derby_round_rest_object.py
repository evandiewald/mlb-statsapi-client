# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomeRunDerbyRoundRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'round': 'int',
        'num_batters': 'int',
        'type': 'str',
        'round_time': 'int',
        'number_of_pitches': 'int',
        'matchups': 'list[HomeRunDerbyMatchupRestObject]',
        'batters': 'list[HomeRunDerbyRoundBatterRestObject]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'round': 'round',
        'num_batters': 'numBatters',
        'type': 'type',
        'round_time': 'roundTime',
        'number_of_pitches': 'numberOfPitches',
        'matchups': 'matchups',
        'batters': 'batters'
    }

    def __init__(self, copyright=None, round=None, num_batters=None, type=None, round_time=None, number_of_pitches=None, matchups=None, batters=None):  # noqa: E501
        """HomeRunDerbyRoundRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._round = None
        self._num_batters = None
        self._type = None
        self._round_time = None
        self._number_of_pitches = None
        self._matchups = None
        self._batters = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if round is not None:
            self.round = round
        if num_batters is not None:
            self.num_batters = num_batters
        if type is not None:
            self.type = type
        if round_time is not None:
            self.round_time = round_time
        if number_of_pitches is not None:
            self.number_of_pitches = number_of_pitches
        if matchups is not None:
            self.matchups = matchups
        if batters is not None:
            self.batters = batters

    @property
    def copyright(self):
        """Gets the copyright of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The copyright of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this HomeRunDerbyRoundRestObject.


        :param copyright: The copyright of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def round(self):
        """Gets the round of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The round of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: int
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this HomeRunDerbyRoundRestObject.


        :param round: The round of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: int
        """

        self._round = round

    @property
    def num_batters(self):
        """Gets the num_batters of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The num_batters of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_batters

    @num_batters.setter
    def num_batters(self, num_batters):
        """Sets the num_batters of this HomeRunDerbyRoundRestObject.


        :param num_batters: The num_batters of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: int
        """

        self._num_batters = num_batters

    @property
    def type(self):
        """Gets the type of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The type of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HomeRunDerbyRoundRestObject.


        :param type: The type of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def round_time(self):
        """Gets the round_time of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The round_time of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: int
        """
        return self._round_time

    @round_time.setter
    def round_time(self, round_time):
        """Sets the round_time of this HomeRunDerbyRoundRestObject.


        :param round_time: The round_time of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: int
        """

        self._round_time = round_time

    @property
    def number_of_pitches(self):
        """Gets the number_of_pitches of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The number_of_pitches of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pitches

    @number_of_pitches.setter
    def number_of_pitches(self, number_of_pitches):
        """Sets the number_of_pitches of this HomeRunDerbyRoundRestObject.


        :param number_of_pitches: The number_of_pitches of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: int
        """

        self._number_of_pitches = number_of_pitches

    @property
    def matchups(self):
        """Gets the matchups of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The matchups of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: list[HomeRunDerbyMatchupRestObject]
        """
        return self._matchups

    @matchups.setter
    def matchups(self, matchups):
        """Sets the matchups of this HomeRunDerbyRoundRestObject.


        :param matchups: The matchups of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: list[HomeRunDerbyMatchupRestObject]
        """

        self._matchups = matchups

    @property
    def batters(self):
        """Gets the batters of this HomeRunDerbyRoundRestObject.  # noqa: E501


        :return: The batters of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :rtype: list[HomeRunDerbyRoundBatterRestObject]
        """
        return self._batters

    @batters.setter
    def batters(self, batters):
        """Sets the batters of this HomeRunDerbyRoundRestObject.


        :param batters: The batters of this HomeRunDerbyRoundRestObject.  # noqa: E501
        :type: list[HomeRunDerbyRoundBatterRestObject]
        """

        self._batters = batters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeRunDerbyRoundRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeRunDerbyRoundRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
