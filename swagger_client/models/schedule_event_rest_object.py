# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleEventRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'id': 'int',
        'non_game_guid': 'str',
        'name': 'str',
        'link': 'str',
        'event_type': 'ScheduleEventTypeRestObject',
        'event_date': 'datetime',
        'end_date_time': 'datetime',
        'images': 'list[ImageRestObject]',
        'venue': 'VenueRestObject',
        'sports': 'list[SportRestObject]',
        'leagues': 'list[LeagueRestObject]',
        'divisions': 'list[DivisionRestObject]',
        'game': 'BaseballScheduleItemRestObject',
        'content': 'ScheduleEventCms',
        'time_zone': 'TimeZoneRestObject',
        'designations': 'list[DesignationRestObject]',
        'tickets': 'list[BaseballTicketRestObject]',
        'promotions': 'list[BaseballTicketRestObject]',
        'event_status': 'GameStatusRestObject',
        'is_multi_day': 'bool',
        'is_primary_calendar': 'bool',
        'file_code': 'str',
        'event_number': 'int',
        'public_facing': 'bool',
        'teams': 'list[BaseballTeamRestObject]',
        'tracking_version': 'TrackingVersionRestObject',
        'coaching_video': 'list[MediaSourceType]',
        'rule_settings': 'list[RuleSettingsRestObject]',
        'broadcasts': 'list[NonGameBroadcastRestObject]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'id': 'id',
        'non_game_guid': 'nonGameGuid',
        'name': 'name',
        'link': 'link',
        'event_type': 'eventType',
        'event_date': 'eventDate',
        'end_date_time': 'endDateTime',
        'images': 'images',
        'venue': 'venue',
        'sports': 'sports',
        'leagues': 'leagues',
        'divisions': 'divisions',
        'game': 'game',
        'content': 'content',
        'time_zone': 'timeZone',
        'designations': 'designations',
        'tickets': 'tickets',
        'promotions': 'promotions',
        'event_status': 'eventStatus',
        'is_multi_day': 'isMultiDay',
        'is_primary_calendar': 'isPrimaryCalendar',
        'file_code': 'fileCode',
        'event_number': 'eventNumber',
        'public_facing': 'publicFacing',
        'teams': 'teams',
        'tracking_version': 'trackingVersion',
        'coaching_video': 'coachingVideo',
        'rule_settings': 'ruleSettings',
        'broadcasts': 'broadcasts'
    }

    def __init__(self, copyright=None, id=None, non_game_guid=None, name=None, link=None, event_type=None, event_date=None, end_date_time=None, images=None, venue=None, sports=None, leagues=None, divisions=None, game=None, content=None, time_zone=None, designations=None, tickets=None, promotions=None, event_status=None, is_multi_day=None, is_primary_calendar=None, file_code=None, event_number=None, public_facing=None, teams=None, tracking_version=None, coaching_video=None, rule_settings=None, broadcasts=None):  # noqa: E501
        """ScheduleEventRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._id = None
        self._non_game_guid = None
        self._name = None
        self._link = None
        self._event_type = None
        self._event_date = None
        self._end_date_time = None
        self._images = None
        self._venue = None
        self._sports = None
        self._leagues = None
        self._divisions = None
        self._game = None
        self._content = None
        self._time_zone = None
        self._designations = None
        self._tickets = None
        self._promotions = None
        self._event_status = None
        self._is_multi_day = None
        self._is_primary_calendar = None
        self._file_code = None
        self._event_number = None
        self._public_facing = None
        self._teams = None
        self._tracking_version = None
        self._coaching_video = None
        self._rule_settings = None
        self._broadcasts = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if id is not None:
            self.id = id
        if non_game_guid is not None:
            self.non_game_guid = non_game_guid
        if name is not None:
            self.name = name
        if link is not None:
            self.link = link
        if event_type is not None:
            self.event_type = event_type
        if event_date is not None:
            self.event_date = event_date
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if images is not None:
            self.images = images
        if venue is not None:
            self.venue = venue
        if sports is not None:
            self.sports = sports
        if leagues is not None:
            self.leagues = leagues
        if divisions is not None:
            self.divisions = divisions
        if game is not None:
            self.game = game
        if content is not None:
            self.content = content
        if time_zone is not None:
            self.time_zone = time_zone
        if designations is not None:
            self.designations = designations
        if tickets is not None:
            self.tickets = tickets
        if promotions is not None:
            self.promotions = promotions
        if event_status is not None:
            self.event_status = event_status
        if is_multi_day is not None:
            self.is_multi_day = is_multi_day
        if is_primary_calendar is not None:
            self.is_primary_calendar = is_primary_calendar
        if file_code is not None:
            self.file_code = file_code
        if event_number is not None:
            self.event_number = event_number
        if public_facing is not None:
            self.public_facing = public_facing
        if teams is not None:
            self.teams = teams
        if tracking_version is not None:
            self.tracking_version = tracking_version
        if coaching_video is not None:
            self.coaching_video = coaching_video
        if rule_settings is not None:
            self.rule_settings = rule_settings
        if broadcasts is not None:
            self.broadcasts = broadcasts

    @property
    def copyright(self):
        """Gets the copyright of this ScheduleEventRestObject.  # noqa: E501


        :return: The copyright of this ScheduleEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ScheduleEventRestObject.


        :param copyright: The copyright of this ScheduleEventRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def id(self):
        """Gets the id of this ScheduleEventRestObject.  # noqa: E501


        :return: The id of this ScheduleEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleEventRestObject.


        :param id: The id of this ScheduleEventRestObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def non_game_guid(self):
        """Gets the non_game_guid of this ScheduleEventRestObject.  # noqa: E501


        :return: The non_game_guid of this ScheduleEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._non_game_guid

    @non_game_guid.setter
    def non_game_guid(self, non_game_guid):
        """Sets the non_game_guid of this ScheduleEventRestObject.


        :param non_game_guid: The non_game_guid of this ScheduleEventRestObject.  # noqa: E501
        :type: str
        """

        self._non_game_guid = non_game_guid

    @property
    def name(self):
        """Gets the name of this ScheduleEventRestObject.  # noqa: E501


        :return: The name of this ScheduleEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleEventRestObject.


        :param name: The name of this ScheduleEventRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def link(self):
        """Gets the link of this ScheduleEventRestObject.  # noqa: E501


        :return: The link of this ScheduleEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ScheduleEventRestObject.


        :param link: The link of this ScheduleEventRestObject.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def event_type(self):
        """Gets the event_type of this ScheduleEventRestObject.  # noqa: E501


        :return: The event_type of this ScheduleEventRestObject.  # noqa: E501
        :rtype: ScheduleEventTypeRestObject
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ScheduleEventRestObject.


        :param event_type: The event_type of this ScheduleEventRestObject.  # noqa: E501
        :type: ScheduleEventTypeRestObject
        """

        self._event_type = event_type

    @property
    def event_date(self):
        """Gets the event_date of this ScheduleEventRestObject.  # noqa: E501


        :return: The event_date of this ScheduleEventRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this ScheduleEventRestObject.


        :param event_date: The event_date of this ScheduleEventRestObject.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ScheduleEventRestObject.  # noqa: E501


        :return: The end_date_time of this ScheduleEventRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ScheduleEventRestObject.


        :param end_date_time: The end_date_time of this ScheduleEventRestObject.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def images(self):
        """Gets the images of this ScheduleEventRestObject.  # noqa: E501


        :return: The images of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[ImageRestObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ScheduleEventRestObject.


        :param images: The images of this ScheduleEventRestObject.  # noqa: E501
        :type: list[ImageRestObject]
        """

        self._images = images

    @property
    def venue(self):
        """Gets the venue of this ScheduleEventRestObject.  # noqa: E501


        :return: The venue of this ScheduleEventRestObject.  # noqa: E501
        :rtype: VenueRestObject
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this ScheduleEventRestObject.


        :param venue: The venue of this ScheduleEventRestObject.  # noqa: E501
        :type: VenueRestObject
        """

        self._venue = venue

    @property
    def sports(self):
        """Gets the sports of this ScheduleEventRestObject.  # noqa: E501


        :return: The sports of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[SportRestObject]
        """
        return self._sports

    @sports.setter
    def sports(self, sports):
        """Sets the sports of this ScheduleEventRestObject.


        :param sports: The sports of this ScheduleEventRestObject.  # noqa: E501
        :type: list[SportRestObject]
        """

        self._sports = sports

    @property
    def leagues(self):
        """Gets the leagues of this ScheduleEventRestObject.  # noqa: E501


        :return: The leagues of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[LeagueRestObject]
        """
        return self._leagues

    @leagues.setter
    def leagues(self, leagues):
        """Sets the leagues of this ScheduleEventRestObject.


        :param leagues: The leagues of this ScheduleEventRestObject.  # noqa: E501
        :type: list[LeagueRestObject]
        """

        self._leagues = leagues

    @property
    def divisions(self):
        """Gets the divisions of this ScheduleEventRestObject.  # noqa: E501


        :return: The divisions of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[DivisionRestObject]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this ScheduleEventRestObject.


        :param divisions: The divisions of this ScheduleEventRestObject.  # noqa: E501
        :type: list[DivisionRestObject]
        """

        self._divisions = divisions

    @property
    def game(self):
        """Gets the game of this ScheduleEventRestObject.  # noqa: E501


        :return: The game of this ScheduleEventRestObject.  # noqa: E501
        :rtype: BaseballScheduleItemRestObject
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this ScheduleEventRestObject.


        :param game: The game of this ScheduleEventRestObject.  # noqa: E501
        :type: BaseballScheduleItemRestObject
        """

        self._game = game

    @property
    def content(self):
        """Gets the content of this ScheduleEventRestObject.  # noqa: E501


        :return: The content of this ScheduleEventRestObject.  # noqa: E501
        :rtype: ScheduleEventCms
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ScheduleEventRestObject.


        :param content: The content of this ScheduleEventRestObject.  # noqa: E501
        :type: ScheduleEventCms
        """

        self._content = content

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduleEventRestObject.  # noqa: E501


        :return: The time_zone of this ScheduleEventRestObject.  # noqa: E501
        :rtype: TimeZoneRestObject
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduleEventRestObject.


        :param time_zone: The time_zone of this ScheduleEventRestObject.  # noqa: E501
        :type: TimeZoneRestObject
        """

        self._time_zone = time_zone

    @property
    def designations(self):
        """Gets the designations of this ScheduleEventRestObject.  # noqa: E501


        :return: The designations of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[DesignationRestObject]
        """
        return self._designations

    @designations.setter
    def designations(self, designations):
        """Sets the designations of this ScheduleEventRestObject.


        :param designations: The designations of this ScheduleEventRestObject.  # noqa: E501
        :type: list[DesignationRestObject]
        """

        self._designations = designations

    @property
    def tickets(self):
        """Gets the tickets of this ScheduleEventRestObject.  # noqa: E501


        :return: The tickets of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[BaseballTicketRestObject]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this ScheduleEventRestObject.


        :param tickets: The tickets of this ScheduleEventRestObject.  # noqa: E501
        :type: list[BaseballTicketRestObject]
        """

        self._tickets = tickets

    @property
    def promotions(self):
        """Gets the promotions of this ScheduleEventRestObject.  # noqa: E501


        :return: The promotions of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[BaseballTicketRestObject]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this ScheduleEventRestObject.


        :param promotions: The promotions of this ScheduleEventRestObject.  # noqa: E501
        :type: list[BaseballTicketRestObject]
        """

        self._promotions = promotions

    @property
    def event_status(self):
        """Gets the event_status of this ScheduleEventRestObject.  # noqa: E501


        :return: The event_status of this ScheduleEventRestObject.  # noqa: E501
        :rtype: GameStatusRestObject
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """Sets the event_status of this ScheduleEventRestObject.


        :param event_status: The event_status of this ScheduleEventRestObject.  # noqa: E501
        :type: GameStatusRestObject
        """

        self._event_status = event_status

    @property
    def is_multi_day(self):
        """Gets the is_multi_day of this ScheduleEventRestObject.  # noqa: E501


        :return: The is_multi_day of this ScheduleEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_day

    @is_multi_day.setter
    def is_multi_day(self, is_multi_day):
        """Sets the is_multi_day of this ScheduleEventRestObject.


        :param is_multi_day: The is_multi_day of this ScheduleEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_multi_day = is_multi_day

    @property
    def is_primary_calendar(self):
        """Gets the is_primary_calendar of this ScheduleEventRestObject.  # noqa: E501


        :return: The is_primary_calendar of this ScheduleEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_calendar

    @is_primary_calendar.setter
    def is_primary_calendar(self, is_primary_calendar):
        """Sets the is_primary_calendar of this ScheduleEventRestObject.


        :param is_primary_calendar: The is_primary_calendar of this ScheduleEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_primary_calendar = is_primary_calendar

    @property
    def file_code(self):
        """Gets the file_code of this ScheduleEventRestObject.  # noqa: E501


        :return: The file_code of this ScheduleEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._file_code

    @file_code.setter
    def file_code(self, file_code):
        """Sets the file_code of this ScheduleEventRestObject.


        :param file_code: The file_code of this ScheduleEventRestObject.  # noqa: E501
        :type: str
        """

        self._file_code = file_code

    @property
    def event_number(self):
        """Gets the event_number of this ScheduleEventRestObject.  # noqa: E501


        :return: The event_number of this ScheduleEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._event_number

    @event_number.setter
    def event_number(self, event_number):
        """Sets the event_number of this ScheduleEventRestObject.


        :param event_number: The event_number of this ScheduleEventRestObject.  # noqa: E501
        :type: int
        """

        self._event_number = event_number

    @property
    def public_facing(self):
        """Gets the public_facing of this ScheduleEventRestObject.  # noqa: E501


        :return: The public_facing of this ScheduleEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._public_facing

    @public_facing.setter
    def public_facing(self, public_facing):
        """Sets the public_facing of this ScheduleEventRestObject.


        :param public_facing: The public_facing of this ScheduleEventRestObject.  # noqa: E501
        :type: bool
        """

        self._public_facing = public_facing

    @property
    def teams(self):
        """Gets the teams of this ScheduleEventRestObject.  # noqa: E501


        :return: The teams of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[BaseballTeamRestObject]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ScheduleEventRestObject.


        :param teams: The teams of this ScheduleEventRestObject.  # noqa: E501
        :type: list[BaseballTeamRestObject]
        """

        self._teams = teams

    @property
    def tracking_version(self):
        """Gets the tracking_version of this ScheduleEventRestObject.  # noqa: E501


        :return: The tracking_version of this ScheduleEventRestObject.  # noqa: E501
        :rtype: TrackingVersionRestObject
        """
        return self._tracking_version

    @tracking_version.setter
    def tracking_version(self, tracking_version):
        """Sets the tracking_version of this ScheduleEventRestObject.


        :param tracking_version: The tracking_version of this ScheduleEventRestObject.  # noqa: E501
        :type: TrackingVersionRestObject
        """

        self._tracking_version = tracking_version

    @property
    def coaching_video(self):
        """Gets the coaching_video of this ScheduleEventRestObject.  # noqa: E501


        :return: The coaching_video of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[MediaSourceType]
        """
        return self._coaching_video

    @coaching_video.setter
    def coaching_video(self, coaching_video):
        """Sets the coaching_video of this ScheduleEventRestObject.


        :param coaching_video: The coaching_video of this ScheduleEventRestObject.  # noqa: E501
        :type: list[MediaSourceType]
        """

        self._coaching_video = coaching_video

    @property
    def rule_settings(self):
        """Gets the rule_settings of this ScheduleEventRestObject.  # noqa: E501


        :return: The rule_settings of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[RuleSettingsRestObject]
        """
        return self._rule_settings

    @rule_settings.setter
    def rule_settings(self, rule_settings):
        """Sets the rule_settings of this ScheduleEventRestObject.


        :param rule_settings: The rule_settings of this ScheduleEventRestObject.  # noqa: E501
        :type: list[RuleSettingsRestObject]
        """

        self._rule_settings = rule_settings

    @property
    def broadcasts(self):
        """Gets the broadcasts of this ScheduleEventRestObject.  # noqa: E501


        :return: The broadcasts of this ScheduleEventRestObject.  # noqa: E501
        :rtype: list[NonGameBroadcastRestObject]
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this ScheduleEventRestObject.


        :param broadcasts: The broadcasts of this ScheduleEventRestObject.  # noqa: E501
        :type: list[NonGameBroadcastRestObject]
        """

        self._broadcasts = broadcasts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleEventRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleEventRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
