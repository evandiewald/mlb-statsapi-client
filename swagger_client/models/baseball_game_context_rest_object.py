# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameContextRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'game': 'BaseballScheduleItemRestObject',
        'expected_statistics_data': 'StatDataRestObject',
        'runner_on_third': 'BaseballPersonRestObject',
        'left_field_sac_fly_probability': 'SacFlyProbability',
        'center_field_sac_fly_probability': 'SacFlyProbability',
        'right_field_sac_fly_probability': 'SacFlyProbability',
        'away_win_probability': 'float',
        'home_win_probability': 'float'
    }

    attribute_map = {
        'copyright': 'copyright',
        'game': 'game',
        'expected_statistics_data': 'expectedStatisticsData',
        'runner_on_third': 'runnerOnThird',
        'left_field_sac_fly_probability': 'leftFieldSacFlyProbability',
        'center_field_sac_fly_probability': 'centerFieldSacFlyProbability',
        'right_field_sac_fly_probability': 'rightFieldSacFlyProbability',
        'away_win_probability': 'awayWinProbability',
        'home_win_probability': 'homeWinProbability'
    }

    def __init__(self, copyright=None, game=None, expected_statistics_data=None, runner_on_third=None, left_field_sac_fly_probability=None, center_field_sac_fly_probability=None, right_field_sac_fly_probability=None, away_win_probability=None, home_win_probability=None):  # noqa: E501
        """BaseballGameContextRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._game = None
        self._expected_statistics_data = None
        self._runner_on_third = None
        self._left_field_sac_fly_probability = None
        self._center_field_sac_fly_probability = None
        self._right_field_sac_fly_probability = None
        self._away_win_probability = None
        self._home_win_probability = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if game is not None:
            self.game = game
        if expected_statistics_data is not None:
            self.expected_statistics_data = expected_statistics_data
        if runner_on_third is not None:
            self.runner_on_third = runner_on_third
        if left_field_sac_fly_probability is not None:
            self.left_field_sac_fly_probability = left_field_sac_fly_probability
        if center_field_sac_fly_probability is not None:
            self.center_field_sac_fly_probability = center_field_sac_fly_probability
        if right_field_sac_fly_probability is not None:
            self.right_field_sac_fly_probability = right_field_sac_fly_probability
        if away_win_probability is not None:
            self.away_win_probability = away_win_probability
        if home_win_probability is not None:
            self.home_win_probability = home_win_probability

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameContextRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameContextRestObject.


        :param copyright: The copyright of this BaseballGameContextRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def game(self):
        """Gets the game of this BaseballGameContextRestObject.  # noqa: E501


        :return: The game of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: BaseballScheduleItemRestObject
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this BaseballGameContextRestObject.


        :param game: The game of this BaseballGameContextRestObject.  # noqa: E501
        :type: BaseballScheduleItemRestObject
        """

        self._game = game

    @property
    def expected_statistics_data(self):
        """Gets the expected_statistics_data of this BaseballGameContextRestObject.  # noqa: E501


        :return: The expected_statistics_data of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: StatDataRestObject
        """
        return self._expected_statistics_data

    @expected_statistics_data.setter
    def expected_statistics_data(self, expected_statistics_data):
        """Sets the expected_statistics_data of this BaseballGameContextRestObject.


        :param expected_statistics_data: The expected_statistics_data of this BaseballGameContextRestObject.  # noqa: E501
        :type: StatDataRestObject
        """

        self._expected_statistics_data = expected_statistics_data

    @property
    def runner_on_third(self):
        """Gets the runner_on_third of this BaseballGameContextRestObject.  # noqa: E501


        :return: The runner_on_third of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._runner_on_third

    @runner_on_third.setter
    def runner_on_third(self, runner_on_third):
        """Sets the runner_on_third of this BaseballGameContextRestObject.


        :param runner_on_third: The runner_on_third of this BaseballGameContextRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._runner_on_third = runner_on_third

    @property
    def left_field_sac_fly_probability(self):
        """Gets the left_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501


        :return: The left_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: SacFlyProbability
        """
        return self._left_field_sac_fly_probability

    @left_field_sac_fly_probability.setter
    def left_field_sac_fly_probability(self, left_field_sac_fly_probability):
        """Sets the left_field_sac_fly_probability of this BaseballGameContextRestObject.


        :param left_field_sac_fly_probability: The left_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :type: SacFlyProbability
        """

        self._left_field_sac_fly_probability = left_field_sac_fly_probability

    @property
    def center_field_sac_fly_probability(self):
        """Gets the center_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501


        :return: The center_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: SacFlyProbability
        """
        return self._center_field_sac_fly_probability

    @center_field_sac_fly_probability.setter
    def center_field_sac_fly_probability(self, center_field_sac_fly_probability):
        """Sets the center_field_sac_fly_probability of this BaseballGameContextRestObject.


        :param center_field_sac_fly_probability: The center_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :type: SacFlyProbability
        """

        self._center_field_sac_fly_probability = center_field_sac_fly_probability

    @property
    def right_field_sac_fly_probability(self):
        """Gets the right_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501


        :return: The right_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: SacFlyProbability
        """
        return self._right_field_sac_fly_probability

    @right_field_sac_fly_probability.setter
    def right_field_sac_fly_probability(self, right_field_sac_fly_probability):
        """Sets the right_field_sac_fly_probability of this BaseballGameContextRestObject.


        :param right_field_sac_fly_probability: The right_field_sac_fly_probability of this BaseballGameContextRestObject.  # noqa: E501
        :type: SacFlyProbability
        """

        self._right_field_sac_fly_probability = right_field_sac_fly_probability

    @property
    def away_win_probability(self):
        """Gets the away_win_probability of this BaseballGameContextRestObject.  # noqa: E501


        :return: The away_win_probability of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: float
        """
        return self._away_win_probability

    @away_win_probability.setter
    def away_win_probability(self, away_win_probability):
        """Sets the away_win_probability of this BaseballGameContextRestObject.


        :param away_win_probability: The away_win_probability of this BaseballGameContextRestObject.  # noqa: E501
        :type: float
        """

        self._away_win_probability = away_win_probability

    @property
    def home_win_probability(self):
        """Gets the home_win_probability of this BaseballGameContextRestObject.  # noqa: E501


        :return: The home_win_probability of this BaseballGameContextRestObject.  # noqa: E501
        :rtype: float
        """
        return self._home_win_probability

    @home_win_probability.setter
    def home_win_probability(self, home_win_probability):
        """Sets the home_win_probability of this BaseballGameContextRestObject.


        :param home_win_probability: The home_win_probability of this BaseballGameContextRestObject.  # noqa: E501
        :type: float
        """

        self._home_win_probability = home_win_probability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameContextRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameContextRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
