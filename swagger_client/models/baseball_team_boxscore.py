# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballTeamBoxscore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team': 'BaseballTeamRestObject',
        'team_stats': 'StatsRestObject',
        'players': 'dict(str, BaseballRosterEntryRestObject)',
        'batters': 'list[int]',
        'pitchers': 'list[int]',
        'bench': 'list[int]',
        'bullpen': 'list[int]',
        'batting_order': 'list[int]',
        'info': 'list[BaseballBoxscoreNoteWrapRestObject]',
        'note': 'list[BaseballBoxscoreNoteRestObject]'
    }

    attribute_map = {
        'team': 'team',
        'team_stats': 'teamStats',
        'players': 'players',
        'batters': 'batters',
        'pitchers': 'pitchers',
        'bench': 'bench',
        'bullpen': 'bullpen',
        'batting_order': 'battingOrder',
        'info': 'info',
        'note': 'note'
    }

    def __init__(self, team=None, team_stats=None, players=None, batters=None, pitchers=None, bench=None, bullpen=None, batting_order=None, info=None, note=None):  # noqa: E501
        """BaseballTeamBoxscore - a model defined in Swagger"""  # noqa: E501
        self._team = None
        self._team_stats = None
        self._players = None
        self._batters = None
        self._pitchers = None
        self._bench = None
        self._bullpen = None
        self._batting_order = None
        self._info = None
        self._note = None
        self.discriminator = None
        if team is not None:
            self.team = team
        if team_stats is not None:
            self.team_stats = team_stats
        if players is not None:
            self.players = players
        if batters is not None:
            self.batters = batters
        if pitchers is not None:
            self.pitchers = pitchers
        if bench is not None:
            self.bench = bench
        if bullpen is not None:
            self.bullpen = bullpen
        if batting_order is not None:
            self.batting_order = batting_order
        if info is not None:
            self.info = info
        if note is not None:
            self.note = note

    @property
    def team(self):
        """Gets the team of this BaseballTeamBoxscore.  # noqa: E501


        :return: The team of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballTeamBoxscore.


        :param team: The team of this BaseballTeamBoxscore.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def team_stats(self):
        """Gets the team_stats of this BaseballTeamBoxscore.  # noqa: E501


        :return: The team_stats of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: StatsRestObject
        """
        return self._team_stats

    @team_stats.setter
    def team_stats(self, team_stats):
        """Sets the team_stats of this BaseballTeamBoxscore.


        :param team_stats: The team_stats of this BaseballTeamBoxscore.  # noqa: E501
        :type: StatsRestObject
        """

        self._team_stats = team_stats

    @property
    def players(self):
        """Gets the players of this BaseballTeamBoxscore.  # noqa: E501


        :return: The players of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: dict(str, BaseballRosterEntryRestObject)
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this BaseballTeamBoxscore.


        :param players: The players of this BaseballTeamBoxscore.  # noqa: E501
        :type: dict(str, BaseballRosterEntryRestObject)
        """

        self._players = players

    @property
    def batters(self):
        """Gets the batters of this BaseballTeamBoxscore.  # noqa: E501


        :return: The batters of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[int]
        """
        return self._batters

    @batters.setter
    def batters(self, batters):
        """Sets the batters of this BaseballTeamBoxscore.


        :param batters: The batters of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[int]
        """

        self._batters = batters

    @property
    def pitchers(self):
        """Gets the pitchers of this BaseballTeamBoxscore.  # noqa: E501


        :return: The pitchers of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[int]
        """
        return self._pitchers

    @pitchers.setter
    def pitchers(self, pitchers):
        """Sets the pitchers of this BaseballTeamBoxscore.


        :param pitchers: The pitchers of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[int]
        """

        self._pitchers = pitchers

    @property
    def bench(self):
        """Gets the bench of this BaseballTeamBoxscore.  # noqa: E501


        :return: The bench of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[int]
        """
        return self._bench

    @bench.setter
    def bench(self, bench):
        """Sets the bench of this BaseballTeamBoxscore.


        :param bench: The bench of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[int]
        """

        self._bench = bench

    @property
    def bullpen(self):
        """Gets the bullpen of this BaseballTeamBoxscore.  # noqa: E501


        :return: The bullpen of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[int]
        """
        return self._bullpen

    @bullpen.setter
    def bullpen(self, bullpen):
        """Sets the bullpen of this BaseballTeamBoxscore.


        :param bullpen: The bullpen of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[int]
        """

        self._bullpen = bullpen

    @property
    def batting_order(self):
        """Gets the batting_order of this BaseballTeamBoxscore.  # noqa: E501


        :return: The batting_order of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[int]
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this BaseballTeamBoxscore.


        :param batting_order: The batting_order of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[int]
        """

        self._batting_order = batting_order

    @property
    def info(self):
        """Gets the info of this BaseballTeamBoxscore.  # noqa: E501


        :return: The info of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[BaseballBoxscoreNoteWrapRestObject]
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this BaseballTeamBoxscore.


        :param info: The info of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[BaseballBoxscoreNoteWrapRestObject]
        """

        self._info = info

    @property
    def note(self):
        """Gets the note of this BaseballTeamBoxscore.  # noqa: E501


        :return: The note of this BaseballTeamBoxscore.  # noqa: E501
        :rtype: list[BaseballBoxscoreNoteRestObject]
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BaseballTeamBoxscore.


        :param note: The note of this BaseballTeamBoxscore.  # noqa: E501
        :type: list[BaseballBoxscoreNoteRestObject]
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballTeamBoxscore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballTeamBoxscore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
