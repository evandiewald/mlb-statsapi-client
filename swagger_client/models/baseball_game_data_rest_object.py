# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'game': 'BaseballGameDataGameRestObject',
        '_datetime': 'BaseballGameDateTimeRestObject',
        'status': 'GameStatusRestObject',
        'teams': 'dict(str, BaseballTeamRestObject)',
        'players': 'dict(str, BaseballPersonRestObject)',
        'venue': 'VenueRestObject',
        'official_venue': 'VenueRestObject',
        'weather': 'WeatherRestObject',
        'game_info': 'GameInfoRestObject',
        'review': 'BaseballReviewRestObject',
        'abs_challenges': 'BaseballABSChallengeRestObject',
        'flags': 'BaseballGameFlagRestObject',
        'alerts': 'list[BaseballGameAlertRestObject]',
        'probable_pitchers': 'BaseballGameProbableRestObject',
        'official_scorer': 'BaseballPersonRestObject',
        'primary_datacaster': 'BaseballPersonRestObject',
        'secondary_datacaster': 'BaseballPersonRestObject',
        'rule_settings': 'list[RuleSettingsRestObject]',
        'mound_visits': 'MoundVisitsRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'game': 'game',
        '_datetime': 'datetime',
        'status': 'status',
        'teams': 'teams',
        'players': 'players',
        'venue': 'venue',
        'official_venue': 'officialVenue',
        'weather': 'weather',
        'game_info': 'gameInfo',
        'review': 'review',
        'abs_challenges': 'absChallenges',
        'flags': 'flags',
        'alerts': 'alerts',
        'probable_pitchers': 'probablePitchers',
        'official_scorer': 'officialScorer',
        'primary_datacaster': 'primaryDatacaster',
        'secondary_datacaster': 'secondaryDatacaster',
        'rule_settings': 'ruleSettings',
        'mound_visits': 'moundVisits'
    }

    def __init__(self, copyright=None, game=None, _datetime=None, status=None, teams=None, players=None, venue=None, official_venue=None, weather=None, game_info=None, review=None, abs_challenges=None, flags=None, alerts=None, probable_pitchers=None, official_scorer=None, primary_datacaster=None, secondary_datacaster=None, rule_settings=None, mound_visits=None):  # noqa: E501
        """BaseballGameDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._game = None
        self.__datetime = None
        self._status = None
        self._teams = None
        self._players = None
        self._venue = None
        self._official_venue = None
        self._weather = None
        self._game_info = None
        self._review = None
        self._abs_challenges = None
        self._flags = None
        self._alerts = None
        self._probable_pitchers = None
        self._official_scorer = None
        self._primary_datacaster = None
        self._secondary_datacaster = None
        self._rule_settings = None
        self._mound_visits = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if game is not None:
            self.game = game
        if _datetime is not None:
            self._datetime = _datetime
        if status is not None:
            self.status = status
        if teams is not None:
            self.teams = teams
        if players is not None:
            self.players = players
        if venue is not None:
            self.venue = venue
        if official_venue is not None:
            self.official_venue = official_venue
        if weather is not None:
            self.weather = weather
        if game_info is not None:
            self.game_info = game_info
        if review is not None:
            self.review = review
        if abs_challenges is not None:
            self.abs_challenges = abs_challenges
        if flags is not None:
            self.flags = flags
        if alerts is not None:
            self.alerts = alerts
        if probable_pitchers is not None:
            self.probable_pitchers = probable_pitchers
        if official_scorer is not None:
            self.official_scorer = official_scorer
        if primary_datacaster is not None:
            self.primary_datacaster = primary_datacaster
        if secondary_datacaster is not None:
            self.secondary_datacaster = secondary_datacaster
        if rule_settings is not None:
            self.rule_settings = rule_settings
        if mound_visits is not None:
            self.mound_visits = mound_visits

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameDataRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameDataRestObject.


        :param copyright: The copyright of this BaseballGameDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def game(self):
        """Gets the game of this BaseballGameDataRestObject.  # noqa: E501


        :return: The game of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballGameDataGameRestObject
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this BaseballGameDataRestObject.


        :param game: The game of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballGameDataGameRestObject
        """

        self._game = game

    @property
    def _datetime(self):
        """Gets the _datetime of this BaseballGameDataRestObject.  # noqa: E501


        :return: The _datetime of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballGameDateTimeRestObject
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this BaseballGameDataRestObject.


        :param _datetime: The _datetime of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballGameDateTimeRestObject
        """

        self.__datetime = _datetime

    @property
    def status(self):
        """Gets the status of this BaseballGameDataRestObject.  # noqa: E501


        :return: The status of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: GameStatusRestObject
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseballGameDataRestObject.


        :param status: The status of this BaseballGameDataRestObject.  # noqa: E501
        :type: GameStatusRestObject
        """

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this BaseballGameDataRestObject.  # noqa: E501


        :return: The teams of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: dict(str, BaseballTeamRestObject)
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this BaseballGameDataRestObject.


        :param teams: The teams of this BaseballGameDataRestObject.  # noqa: E501
        :type: dict(str, BaseballTeamRestObject)
        """

        self._teams = teams

    @property
    def players(self):
        """Gets the players of this BaseballGameDataRestObject.  # noqa: E501


        :return: The players of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: dict(str, BaseballPersonRestObject)
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this BaseballGameDataRestObject.


        :param players: The players of this BaseballGameDataRestObject.  # noqa: E501
        :type: dict(str, BaseballPersonRestObject)
        """

        self._players = players

    @property
    def venue(self):
        """Gets the venue of this BaseballGameDataRestObject.  # noqa: E501


        :return: The venue of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: VenueRestObject
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this BaseballGameDataRestObject.


        :param venue: The venue of this BaseballGameDataRestObject.  # noqa: E501
        :type: VenueRestObject
        """

        self._venue = venue

    @property
    def official_venue(self):
        """Gets the official_venue of this BaseballGameDataRestObject.  # noqa: E501


        :return: The official_venue of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: VenueRestObject
        """
        return self._official_venue

    @official_venue.setter
    def official_venue(self, official_venue):
        """Sets the official_venue of this BaseballGameDataRestObject.


        :param official_venue: The official_venue of this BaseballGameDataRestObject.  # noqa: E501
        :type: VenueRestObject
        """

        self._official_venue = official_venue

    @property
    def weather(self):
        """Gets the weather of this BaseballGameDataRestObject.  # noqa: E501


        :return: The weather of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: WeatherRestObject
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this BaseballGameDataRestObject.


        :param weather: The weather of this BaseballGameDataRestObject.  # noqa: E501
        :type: WeatherRestObject
        """

        self._weather = weather

    @property
    def game_info(self):
        """Gets the game_info of this BaseballGameDataRestObject.  # noqa: E501


        :return: The game_info of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: GameInfoRestObject
        """
        return self._game_info

    @game_info.setter
    def game_info(self, game_info):
        """Sets the game_info of this BaseballGameDataRestObject.


        :param game_info: The game_info of this BaseballGameDataRestObject.  # noqa: E501
        :type: GameInfoRestObject
        """

        self._game_info = game_info

    @property
    def review(self):
        """Gets the review of this BaseballGameDataRestObject.  # noqa: E501


        :return: The review of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballReviewRestObject
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this BaseballGameDataRestObject.


        :param review: The review of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballReviewRestObject
        """

        self._review = review

    @property
    def abs_challenges(self):
        """Gets the abs_challenges of this BaseballGameDataRestObject.  # noqa: E501


        :return: The abs_challenges of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballABSChallengeRestObject
        """
        return self._abs_challenges

    @abs_challenges.setter
    def abs_challenges(self, abs_challenges):
        """Sets the abs_challenges of this BaseballGameDataRestObject.


        :param abs_challenges: The abs_challenges of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballABSChallengeRestObject
        """

        self._abs_challenges = abs_challenges

    @property
    def flags(self):
        """Gets the flags of this BaseballGameDataRestObject.  # noqa: E501


        :return: The flags of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballGameFlagRestObject
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this BaseballGameDataRestObject.


        :param flags: The flags of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballGameFlagRestObject
        """

        self._flags = flags

    @property
    def alerts(self):
        """Gets the alerts of this BaseballGameDataRestObject.  # noqa: E501


        :return: The alerts of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: list[BaseballGameAlertRestObject]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this BaseballGameDataRestObject.


        :param alerts: The alerts of this BaseballGameDataRestObject.  # noqa: E501
        :type: list[BaseballGameAlertRestObject]
        """

        self._alerts = alerts

    @property
    def probable_pitchers(self):
        """Gets the probable_pitchers of this BaseballGameDataRestObject.  # noqa: E501


        :return: The probable_pitchers of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballGameProbableRestObject
        """
        return self._probable_pitchers

    @probable_pitchers.setter
    def probable_pitchers(self, probable_pitchers):
        """Sets the probable_pitchers of this BaseballGameDataRestObject.


        :param probable_pitchers: The probable_pitchers of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballGameProbableRestObject
        """

        self._probable_pitchers = probable_pitchers

    @property
    def official_scorer(self):
        """Gets the official_scorer of this BaseballGameDataRestObject.  # noqa: E501


        :return: The official_scorer of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._official_scorer

    @official_scorer.setter
    def official_scorer(self, official_scorer):
        """Sets the official_scorer of this BaseballGameDataRestObject.


        :param official_scorer: The official_scorer of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._official_scorer = official_scorer

    @property
    def primary_datacaster(self):
        """Gets the primary_datacaster of this BaseballGameDataRestObject.  # noqa: E501


        :return: The primary_datacaster of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._primary_datacaster

    @primary_datacaster.setter
    def primary_datacaster(self, primary_datacaster):
        """Sets the primary_datacaster of this BaseballGameDataRestObject.


        :param primary_datacaster: The primary_datacaster of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._primary_datacaster = primary_datacaster

    @property
    def secondary_datacaster(self):
        """Gets the secondary_datacaster of this BaseballGameDataRestObject.  # noqa: E501


        :return: The secondary_datacaster of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._secondary_datacaster

    @secondary_datacaster.setter
    def secondary_datacaster(self, secondary_datacaster):
        """Sets the secondary_datacaster of this BaseballGameDataRestObject.


        :param secondary_datacaster: The secondary_datacaster of this BaseballGameDataRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._secondary_datacaster = secondary_datacaster

    @property
    def rule_settings(self):
        """Gets the rule_settings of this BaseballGameDataRestObject.  # noqa: E501


        :return: The rule_settings of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: list[RuleSettingsRestObject]
        """
        return self._rule_settings

    @rule_settings.setter
    def rule_settings(self, rule_settings):
        """Sets the rule_settings of this BaseballGameDataRestObject.


        :param rule_settings: The rule_settings of this BaseballGameDataRestObject.  # noqa: E501
        :type: list[RuleSettingsRestObject]
        """

        self._rule_settings = rule_settings

    @property
    def mound_visits(self):
        """Gets the mound_visits of this BaseballGameDataRestObject.  # noqa: E501


        :return: The mound_visits of this BaseballGameDataRestObject.  # noqa: E501
        :rtype: MoundVisitsRestObject
        """
        return self._mound_visits

    @mound_visits.setter
    def mound_visits(self, mound_visits):
        """Sets the mound_visits of this BaseballGameDataRestObject.


        :param mound_visits: The mound_visits of this BaseballGameDataRestObject.  # noqa: E501
        :type: MoundVisitsRestObject
        """

        self._mound_visits = mound_visits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
