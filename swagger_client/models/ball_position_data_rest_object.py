# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BallPositionDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'velocity': 'CoordinatesRestObject',
        'position': 'CoordinatesRestObject',
        'time': 'float',
        'confidence': 'str',
        'time_code': 'int',
        'time_code_offset': 'float',
        'type': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'velocity': 'velocity',
        'position': 'position',
        'time': 'time',
        'confidence': 'confidence',
        'time_code': 'timeCode',
        'time_code_offset': 'timeCodeOffset',
        'type': 'type'
    }

    def __init__(self, copyright=None, velocity=None, position=None, time=None, confidence=None, time_code=None, time_code_offset=None, type=None):  # noqa: E501
        """BallPositionDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._velocity = None
        self._position = None
        self._time = None
        self._confidence = None
        self._time_code = None
        self._time_code_offset = None
        self._type = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if velocity is not None:
            self.velocity = velocity
        if position is not None:
            self.position = position
        if time is not None:
            self.time = time
        if confidence is not None:
            self.confidence = confidence
        if time_code is not None:
            self.time_code = time_code
        if time_code_offset is not None:
            self.time_code_offset = time_code_offset
        if type is not None:
            self.type = type

    @property
    def copyright(self):
        """Gets the copyright of this BallPositionDataRestObject.  # noqa: E501


        :return: The copyright of this BallPositionDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BallPositionDataRestObject.


        :param copyright: The copyright of this BallPositionDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def velocity(self):
        """Gets the velocity of this BallPositionDataRestObject.  # noqa: E501


        :return: The velocity of this BallPositionDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this BallPositionDataRestObject.


        :param velocity: The velocity of this BallPositionDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._velocity = velocity

    @property
    def position(self):
        """Gets the position of this BallPositionDataRestObject.  # noqa: E501


        :return: The position of this BallPositionDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BallPositionDataRestObject.


        :param position: The position of this BallPositionDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._position = position

    @property
    def time(self):
        """Gets the time of this BallPositionDataRestObject.  # noqa: E501


        :return: The time of this BallPositionDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this BallPositionDataRestObject.


        :param time: The time of this BallPositionDataRestObject.  # noqa: E501
        :type: float
        """

        self._time = time

    @property
    def confidence(self):
        """Gets the confidence of this BallPositionDataRestObject.  # noqa: E501


        :return: The confidence of this BallPositionDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this BallPositionDataRestObject.


        :param confidence: The confidence of this BallPositionDataRestObject.  # noqa: E501
        :type: str
        """

        self._confidence = confidence

    @property
    def time_code(self):
        """Gets the time_code of this BallPositionDataRestObject.  # noqa: E501


        :return: The time_code of this BallPositionDataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this BallPositionDataRestObject.


        :param time_code: The time_code of this BallPositionDataRestObject.  # noqa: E501
        :type: int
        """

        self._time_code = time_code

    @property
    def time_code_offset(self):
        """Gets the time_code_offset of this BallPositionDataRestObject.  # noqa: E501


        :return: The time_code_offset of this BallPositionDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._time_code_offset

    @time_code_offset.setter
    def time_code_offset(self, time_code_offset):
        """Sets the time_code_offset of this BallPositionDataRestObject.


        :param time_code_offset: The time_code_offset of this BallPositionDataRestObject.  # noqa: E501
        :type: float
        """

        self._time_code_offset = time_code_offset

    @property
    def type(self):
        """Gets the type of this BallPositionDataRestObject.  # noqa: E501


        :return: The type of this BallPositionDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BallPositionDataRestObject.


        :param type: The type of this BallPositionDataRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BallPositionDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BallPositionDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
