# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NonGameDateBroadcast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'broadcaster': 'Broadcaster',
        'language': 'Language',
        'team_id': 'int',
        'is_national_status': 'bool',
        'sort_order': 'int',
        'video_resolution': 'VideoResolution',
        'broadcast_availability': 'BroadcastAvailability',
        'broadcast_comment': 'str',
        'broadcast_url': 'str',
        'xrefs': 'list[BroadcasterXrefId]',
        'media_state': 'MediaState',
        'site': 'Site',
        'broadcast_date': 'date',
        'non_game_date_broadcast_guid': 'str',
        'streaming_availability_status': 'bool',
        'mvpd_auth_broadcast_status': 'bool',
        'event_id': 'int'
    }

    attribute_map = {
        'broadcaster': 'broadcaster',
        'language': 'language',
        'team_id': 'teamId',
        'is_national_status': 'isNationalStatus',
        'sort_order': 'sortOrder',
        'video_resolution': 'videoResolution',
        'broadcast_availability': 'broadcastAvailability',
        'broadcast_comment': 'broadcastComment',
        'broadcast_url': 'broadcastUrl',
        'xrefs': 'xrefs',
        'media_state': 'mediaState',
        'site': 'site',
        'broadcast_date': 'broadcastDate',
        'non_game_date_broadcast_guid': 'nonGameDateBroadcastGuid',
        'streaming_availability_status': 'streamingAvailabilityStatus',
        'mvpd_auth_broadcast_status': 'mvpdAuthBroadcastStatus',
        'event_id': 'eventId'
    }

    def __init__(self, broadcaster=None, language=None, team_id=None, is_national_status=None, sort_order=None, video_resolution=None, broadcast_availability=None, broadcast_comment=None, broadcast_url=None, xrefs=None, media_state=None, site=None, broadcast_date=None, non_game_date_broadcast_guid=None, streaming_availability_status=None, mvpd_auth_broadcast_status=None, event_id=None):  # noqa: E501
        """NonGameDateBroadcast - a model defined in Swagger"""  # noqa: E501
        self._broadcaster = None
        self._language = None
        self._team_id = None
        self._is_national_status = None
        self._sort_order = None
        self._video_resolution = None
        self._broadcast_availability = None
        self._broadcast_comment = None
        self._broadcast_url = None
        self._xrefs = None
        self._media_state = None
        self._site = None
        self._broadcast_date = None
        self._non_game_date_broadcast_guid = None
        self._streaming_availability_status = None
        self._mvpd_auth_broadcast_status = None
        self._event_id = None
        self.discriminator = None
        if broadcaster is not None:
            self.broadcaster = broadcaster
        if language is not None:
            self.language = language
        if team_id is not None:
            self.team_id = team_id
        if is_national_status is not None:
            self.is_national_status = is_national_status
        if sort_order is not None:
            self.sort_order = sort_order
        if video_resolution is not None:
            self.video_resolution = video_resolution
        if broadcast_availability is not None:
            self.broadcast_availability = broadcast_availability
        if broadcast_comment is not None:
            self.broadcast_comment = broadcast_comment
        if broadcast_url is not None:
            self.broadcast_url = broadcast_url
        if xrefs is not None:
            self.xrefs = xrefs
        if media_state is not None:
            self.media_state = media_state
        if site is not None:
            self.site = site
        if broadcast_date is not None:
            self.broadcast_date = broadcast_date
        if non_game_date_broadcast_guid is not None:
            self.non_game_date_broadcast_guid = non_game_date_broadcast_guid
        if streaming_availability_status is not None:
            self.streaming_availability_status = streaming_availability_status
        if mvpd_auth_broadcast_status is not None:
            self.mvpd_auth_broadcast_status = mvpd_auth_broadcast_status
        if event_id is not None:
            self.event_id = event_id

    @property
    def broadcaster(self):
        """Gets the broadcaster of this NonGameDateBroadcast.  # noqa: E501


        :return: The broadcaster of this NonGameDateBroadcast.  # noqa: E501
        :rtype: Broadcaster
        """
        return self._broadcaster

    @broadcaster.setter
    def broadcaster(self, broadcaster):
        """Sets the broadcaster of this NonGameDateBroadcast.


        :param broadcaster: The broadcaster of this NonGameDateBroadcast.  # noqa: E501
        :type: Broadcaster
        """

        self._broadcaster = broadcaster

    @property
    def language(self):
        """Gets the language of this NonGameDateBroadcast.  # noqa: E501


        :return: The language of this NonGameDateBroadcast.  # noqa: E501
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this NonGameDateBroadcast.


        :param language: The language of this NonGameDateBroadcast.  # noqa: E501
        :type: Language
        """

        self._language = language

    @property
    def team_id(self):
        """Gets the team_id of this NonGameDateBroadcast.  # noqa: E501


        :return: The team_id of this NonGameDateBroadcast.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NonGameDateBroadcast.


        :param team_id: The team_id of this NonGameDateBroadcast.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def is_national_status(self):
        """Gets the is_national_status of this NonGameDateBroadcast.  # noqa: E501


        :return: The is_national_status of this NonGameDateBroadcast.  # noqa: E501
        :rtype: bool
        """
        return self._is_national_status

    @is_national_status.setter
    def is_national_status(self, is_national_status):
        """Sets the is_national_status of this NonGameDateBroadcast.


        :param is_national_status: The is_national_status of this NonGameDateBroadcast.  # noqa: E501
        :type: bool
        """

        self._is_national_status = is_national_status

    @property
    def sort_order(self):
        """Gets the sort_order of this NonGameDateBroadcast.  # noqa: E501


        :return: The sort_order of this NonGameDateBroadcast.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this NonGameDateBroadcast.


        :param sort_order: The sort_order of this NonGameDateBroadcast.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def video_resolution(self):
        """Gets the video_resolution of this NonGameDateBroadcast.  # noqa: E501


        :return: The video_resolution of this NonGameDateBroadcast.  # noqa: E501
        :rtype: VideoResolution
        """
        return self._video_resolution

    @video_resolution.setter
    def video_resolution(self, video_resolution):
        """Sets the video_resolution of this NonGameDateBroadcast.


        :param video_resolution: The video_resolution of this NonGameDateBroadcast.  # noqa: E501
        :type: VideoResolution
        """

        self._video_resolution = video_resolution

    @property
    def broadcast_availability(self):
        """Gets the broadcast_availability of this NonGameDateBroadcast.  # noqa: E501


        :return: The broadcast_availability of this NonGameDateBroadcast.  # noqa: E501
        :rtype: BroadcastAvailability
        """
        return self._broadcast_availability

    @broadcast_availability.setter
    def broadcast_availability(self, broadcast_availability):
        """Sets the broadcast_availability of this NonGameDateBroadcast.


        :param broadcast_availability: The broadcast_availability of this NonGameDateBroadcast.  # noqa: E501
        :type: BroadcastAvailability
        """

        self._broadcast_availability = broadcast_availability

    @property
    def broadcast_comment(self):
        """Gets the broadcast_comment of this NonGameDateBroadcast.  # noqa: E501


        :return: The broadcast_comment of this NonGameDateBroadcast.  # noqa: E501
        :rtype: str
        """
        return self._broadcast_comment

    @broadcast_comment.setter
    def broadcast_comment(self, broadcast_comment):
        """Sets the broadcast_comment of this NonGameDateBroadcast.


        :param broadcast_comment: The broadcast_comment of this NonGameDateBroadcast.  # noqa: E501
        :type: str
        """

        self._broadcast_comment = broadcast_comment

    @property
    def broadcast_url(self):
        """Gets the broadcast_url of this NonGameDateBroadcast.  # noqa: E501


        :return: The broadcast_url of this NonGameDateBroadcast.  # noqa: E501
        :rtype: str
        """
        return self._broadcast_url

    @broadcast_url.setter
    def broadcast_url(self, broadcast_url):
        """Sets the broadcast_url of this NonGameDateBroadcast.


        :param broadcast_url: The broadcast_url of this NonGameDateBroadcast.  # noqa: E501
        :type: str
        """

        self._broadcast_url = broadcast_url

    @property
    def xrefs(self):
        """Gets the xrefs of this NonGameDateBroadcast.  # noqa: E501


        :return: The xrefs of this NonGameDateBroadcast.  # noqa: E501
        :rtype: list[BroadcasterXrefId]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this NonGameDateBroadcast.


        :param xrefs: The xrefs of this NonGameDateBroadcast.  # noqa: E501
        :type: list[BroadcasterXrefId]
        """

        self._xrefs = xrefs

    @property
    def media_state(self):
        """Gets the media_state of this NonGameDateBroadcast.  # noqa: E501


        :return: The media_state of this NonGameDateBroadcast.  # noqa: E501
        :rtype: MediaState
        """
        return self._media_state

    @media_state.setter
    def media_state(self, media_state):
        """Sets the media_state of this NonGameDateBroadcast.


        :param media_state: The media_state of this NonGameDateBroadcast.  # noqa: E501
        :type: MediaState
        """

        self._media_state = media_state

    @property
    def site(self):
        """Gets the site of this NonGameDateBroadcast.  # noqa: E501


        :return: The site of this NonGameDateBroadcast.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this NonGameDateBroadcast.


        :param site: The site of this NonGameDateBroadcast.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def broadcast_date(self):
        """Gets the broadcast_date of this NonGameDateBroadcast.  # noqa: E501


        :return: The broadcast_date of this NonGameDateBroadcast.  # noqa: E501
        :rtype: date
        """
        return self._broadcast_date

    @broadcast_date.setter
    def broadcast_date(self, broadcast_date):
        """Sets the broadcast_date of this NonGameDateBroadcast.


        :param broadcast_date: The broadcast_date of this NonGameDateBroadcast.  # noqa: E501
        :type: date
        """

        self._broadcast_date = broadcast_date

    @property
    def non_game_date_broadcast_guid(self):
        """Gets the non_game_date_broadcast_guid of this NonGameDateBroadcast.  # noqa: E501


        :return: The non_game_date_broadcast_guid of this NonGameDateBroadcast.  # noqa: E501
        :rtype: str
        """
        return self._non_game_date_broadcast_guid

    @non_game_date_broadcast_guid.setter
    def non_game_date_broadcast_guid(self, non_game_date_broadcast_guid):
        """Sets the non_game_date_broadcast_guid of this NonGameDateBroadcast.


        :param non_game_date_broadcast_guid: The non_game_date_broadcast_guid of this NonGameDateBroadcast.  # noqa: E501
        :type: str
        """

        self._non_game_date_broadcast_guid = non_game_date_broadcast_guid

    @property
    def streaming_availability_status(self):
        """Gets the streaming_availability_status of this NonGameDateBroadcast.  # noqa: E501


        :return: The streaming_availability_status of this NonGameDateBroadcast.  # noqa: E501
        :rtype: bool
        """
        return self._streaming_availability_status

    @streaming_availability_status.setter
    def streaming_availability_status(self, streaming_availability_status):
        """Sets the streaming_availability_status of this NonGameDateBroadcast.


        :param streaming_availability_status: The streaming_availability_status of this NonGameDateBroadcast.  # noqa: E501
        :type: bool
        """

        self._streaming_availability_status = streaming_availability_status

    @property
    def mvpd_auth_broadcast_status(self):
        """Gets the mvpd_auth_broadcast_status of this NonGameDateBroadcast.  # noqa: E501


        :return: The mvpd_auth_broadcast_status of this NonGameDateBroadcast.  # noqa: E501
        :rtype: bool
        """
        return self._mvpd_auth_broadcast_status

    @mvpd_auth_broadcast_status.setter
    def mvpd_auth_broadcast_status(self, mvpd_auth_broadcast_status):
        """Sets the mvpd_auth_broadcast_status of this NonGameDateBroadcast.


        :param mvpd_auth_broadcast_status: The mvpd_auth_broadcast_status of this NonGameDateBroadcast.  # noqa: E501
        :type: bool
        """

        self._mvpd_auth_broadcast_status = mvpd_auth_broadcast_status

    @property
    def event_id(self):
        """Gets the event_id of this NonGameDateBroadcast.  # noqa: E501


        :return: The event_id of this NonGameDateBroadcast.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this NonGameDateBroadcast.


        :param event_id: The event_id of this NonGameDateBroadcast.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NonGameDateBroadcast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonGameDateBroadcast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
