# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballInning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'runs_away': 'int',
        'runs_home': 'int',
        'hits_away': 'int',
        'hits_home': 'int',
        'errors_away': 'int',
        'errors_home': 'int',
        'left_on_base_away': 'int',
        'left_on_base_home': 'int',
        'num': 'int',
        'ordinal_num': 'str'
    }

    attribute_map = {
        'runs_away': 'runsAway',
        'runs_home': 'runsHome',
        'hits_away': 'hitsAway',
        'hits_home': 'hitsHome',
        'errors_away': 'errorsAway',
        'errors_home': 'errorsHome',
        'left_on_base_away': 'leftOnBaseAway',
        'left_on_base_home': 'leftOnBaseHome',
        'num': 'num',
        'ordinal_num': 'ordinalNum'
    }

    def __init__(self, runs_away=None, runs_home=None, hits_away=None, hits_home=None, errors_away=None, errors_home=None, left_on_base_away=None, left_on_base_home=None, num=None, ordinal_num=None):  # noqa: E501
        """BaseballInning - a model defined in Swagger"""  # noqa: E501
        self._runs_away = None
        self._runs_home = None
        self._hits_away = None
        self._hits_home = None
        self._errors_away = None
        self._errors_home = None
        self._left_on_base_away = None
        self._left_on_base_home = None
        self._num = None
        self._ordinal_num = None
        self.discriminator = None
        if runs_away is not None:
            self.runs_away = runs_away
        if runs_home is not None:
            self.runs_home = runs_home
        if hits_away is not None:
            self.hits_away = hits_away
        if hits_home is not None:
            self.hits_home = hits_home
        if errors_away is not None:
            self.errors_away = errors_away
        if errors_home is not None:
            self.errors_home = errors_home
        if left_on_base_away is not None:
            self.left_on_base_away = left_on_base_away
        if left_on_base_home is not None:
            self.left_on_base_home = left_on_base_home
        if num is not None:
            self.num = num
        if ordinal_num is not None:
            self.ordinal_num = ordinal_num

    @property
    def runs_away(self):
        """Gets the runs_away of this BaseballInning.  # noqa: E501


        :return: The runs_away of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._runs_away

    @runs_away.setter
    def runs_away(self, runs_away):
        """Sets the runs_away of this BaseballInning.


        :param runs_away: The runs_away of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._runs_away = runs_away

    @property
    def runs_home(self):
        """Gets the runs_home of this BaseballInning.  # noqa: E501


        :return: The runs_home of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._runs_home

    @runs_home.setter
    def runs_home(self, runs_home):
        """Sets the runs_home of this BaseballInning.


        :param runs_home: The runs_home of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._runs_home = runs_home

    @property
    def hits_away(self):
        """Gets the hits_away of this BaseballInning.  # noqa: E501


        :return: The hits_away of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._hits_away

    @hits_away.setter
    def hits_away(self, hits_away):
        """Sets the hits_away of this BaseballInning.


        :param hits_away: The hits_away of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._hits_away = hits_away

    @property
    def hits_home(self):
        """Gets the hits_home of this BaseballInning.  # noqa: E501


        :return: The hits_home of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._hits_home

    @hits_home.setter
    def hits_home(self, hits_home):
        """Sets the hits_home of this BaseballInning.


        :param hits_home: The hits_home of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._hits_home = hits_home

    @property
    def errors_away(self):
        """Gets the errors_away of this BaseballInning.  # noqa: E501


        :return: The errors_away of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._errors_away

    @errors_away.setter
    def errors_away(self, errors_away):
        """Sets the errors_away of this BaseballInning.


        :param errors_away: The errors_away of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._errors_away = errors_away

    @property
    def errors_home(self):
        """Gets the errors_home of this BaseballInning.  # noqa: E501


        :return: The errors_home of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._errors_home

    @errors_home.setter
    def errors_home(self, errors_home):
        """Sets the errors_home of this BaseballInning.


        :param errors_home: The errors_home of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._errors_home = errors_home

    @property
    def left_on_base_away(self):
        """Gets the left_on_base_away of this BaseballInning.  # noqa: E501


        :return: The left_on_base_away of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._left_on_base_away

    @left_on_base_away.setter
    def left_on_base_away(self, left_on_base_away):
        """Sets the left_on_base_away of this BaseballInning.


        :param left_on_base_away: The left_on_base_away of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._left_on_base_away = left_on_base_away

    @property
    def left_on_base_home(self):
        """Gets the left_on_base_home of this BaseballInning.  # noqa: E501


        :return: The left_on_base_home of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._left_on_base_home

    @left_on_base_home.setter
    def left_on_base_home(self, left_on_base_home):
        """Sets the left_on_base_home of this BaseballInning.


        :param left_on_base_home: The left_on_base_home of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._left_on_base_home = left_on_base_home

    @property
    def num(self):
        """Gets the num of this BaseballInning.  # noqa: E501


        :return: The num of this BaseballInning.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this BaseballInning.


        :param num: The num of this BaseballInning.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def ordinal_num(self):
        """Gets the ordinal_num of this BaseballInning.  # noqa: E501


        :return: The ordinal_num of this BaseballInning.  # noqa: E501
        :rtype: str
        """
        return self._ordinal_num

    @ordinal_num.setter
    def ordinal_num(self, ordinal_num):
        """Sets the ordinal_num of this BaseballInning.


        :param ordinal_num: The ordinal_num of this BaseballInning.  # noqa: E501
        :type: str
        """

        self._ordinal_num = ordinal_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballInning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballInning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
