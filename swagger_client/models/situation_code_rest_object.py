# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SituationCodeRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'code': 'str',
        'sort_order': 'int',
        'navigation_menu': 'str',
        'description': 'str',
        'team': 'bool',
        'batting': 'bool',
        'fielding': 'bool',
        'pitching': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'code': 'code',
        'sort_order': 'sortOrder',
        'navigation_menu': 'navigationMenu',
        'description': 'description',
        'team': 'team',
        'batting': 'batting',
        'fielding': 'fielding',
        'pitching': 'pitching'
    }

    def __init__(self, copyright=None, code=None, sort_order=None, navigation_menu=None, description=None, team=None, batting=None, fielding=None, pitching=None):  # noqa: E501
        """SituationCodeRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._code = None
        self._sort_order = None
        self._navigation_menu = None
        self._description = None
        self._team = None
        self._batting = None
        self._fielding = None
        self._pitching = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if code is not None:
            self.code = code
        if sort_order is not None:
            self.sort_order = sort_order
        if navigation_menu is not None:
            self.navigation_menu = navigation_menu
        if description is not None:
            self.description = description
        if team is not None:
            self.team = team
        if batting is not None:
            self.batting = batting
        if fielding is not None:
            self.fielding = fielding
        if pitching is not None:
            self.pitching = pitching

    @property
    def copyright(self):
        """Gets the copyright of this SituationCodeRestObject.  # noqa: E501


        :return: The copyright of this SituationCodeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this SituationCodeRestObject.


        :param copyright: The copyright of this SituationCodeRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def code(self):
        """Gets the code of this SituationCodeRestObject.  # noqa: E501


        :return: The code of this SituationCodeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SituationCodeRestObject.


        :param code: The code of this SituationCodeRestObject.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def sort_order(self):
        """Gets the sort_order of this SituationCodeRestObject.  # noqa: E501


        :return: The sort_order of this SituationCodeRestObject.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SituationCodeRestObject.


        :param sort_order: The sort_order of this SituationCodeRestObject.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def navigation_menu(self):
        """Gets the navigation_menu of this SituationCodeRestObject.  # noqa: E501


        :return: The navigation_menu of this SituationCodeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._navigation_menu

    @navigation_menu.setter
    def navigation_menu(self, navigation_menu):
        """Sets the navigation_menu of this SituationCodeRestObject.


        :param navigation_menu: The navigation_menu of this SituationCodeRestObject.  # noqa: E501
        :type: str
        """

        self._navigation_menu = navigation_menu

    @property
    def description(self):
        """Gets the description of this SituationCodeRestObject.  # noqa: E501


        :return: The description of this SituationCodeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SituationCodeRestObject.


        :param description: The description of this SituationCodeRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def team(self):
        """Gets the team of this SituationCodeRestObject.  # noqa: E501


        :return: The team of this SituationCodeRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this SituationCodeRestObject.


        :param team: The team of this SituationCodeRestObject.  # noqa: E501
        :type: bool
        """

        self._team = team

    @property
    def batting(self):
        """Gets the batting of this SituationCodeRestObject.  # noqa: E501


        :return: The batting of this SituationCodeRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._batting

    @batting.setter
    def batting(self, batting):
        """Sets the batting of this SituationCodeRestObject.


        :param batting: The batting of this SituationCodeRestObject.  # noqa: E501
        :type: bool
        """

        self._batting = batting

    @property
    def fielding(self):
        """Gets the fielding of this SituationCodeRestObject.  # noqa: E501


        :return: The fielding of this SituationCodeRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._fielding

    @fielding.setter
    def fielding(self, fielding):
        """Sets the fielding of this SituationCodeRestObject.


        :param fielding: The fielding of this SituationCodeRestObject.  # noqa: E501
        :type: bool
        """

        self._fielding = fielding

    @property
    def pitching(self):
        """Gets the pitching of this SituationCodeRestObject.  # noqa: E501


        :return: The pitching of this SituationCodeRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._pitching

    @pitching.setter
    def pitching(self, pitching):
        """Sets the pitching of this SituationCodeRestObject.


        :param pitching: The pitching of this SituationCodeRestObject.  # noqa: E501
        :type: bool
        """

        self._pitching = pitching

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SituationCodeRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SituationCodeRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
