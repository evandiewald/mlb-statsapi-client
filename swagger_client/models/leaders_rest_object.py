# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeadersRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leader_category': 'str',
        'season': 'str',
        'game_type': 'GameTypeEnum',
        'limits': 'LeaderLimits',
        'limit_metadata': 'LimitMetadataRestObject',
        'leaders': 'list[PlayerLeaderRestObject]',
        'copyright': 'str',
        'hydrations': 'list[str]',
        'stat_group': 'str',
        'team': 'BaseballTeamRestObject',
        'league': 'LeagueRestObject',
        'total_splits': 'int'
    }

    attribute_map = {
        'leader_category': 'leaderCategory',
        'season': 'season',
        'game_type': 'gameType',
        'limits': 'limits',
        'limit_metadata': 'limitMetadata',
        'leaders': 'leaders',
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'stat_group': 'statGroup',
        'team': 'team',
        'league': 'league',
        'total_splits': 'totalSplits'
    }

    def __init__(self, leader_category=None, season=None, game_type=None, limits=None, limit_metadata=None, leaders=None, copyright=None, hydrations=None, stat_group=None, team=None, league=None, total_splits=None):  # noqa: E501
        """LeadersRestObject - a model defined in Swagger"""  # noqa: E501
        self._leader_category = None
        self._season = None
        self._game_type = None
        self._limits = None
        self._limit_metadata = None
        self._leaders = None
        self._copyright = None
        self._hydrations = None
        self._stat_group = None
        self._team = None
        self._league = None
        self._total_splits = None
        self.discriminator = None
        if leader_category is not None:
            self.leader_category = leader_category
        if season is not None:
            self.season = season
        if game_type is not None:
            self.game_type = game_type
        if limits is not None:
            self.limits = limits
        if limit_metadata is not None:
            self.limit_metadata = limit_metadata
        if leaders is not None:
            self.leaders = leaders
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if stat_group is not None:
            self.stat_group = stat_group
        if team is not None:
            self.team = team
        if league is not None:
            self.league = league
        if total_splits is not None:
            self.total_splits = total_splits

    @property
    def leader_category(self):
        """Gets the leader_category of this LeadersRestObject.  # noqa: E501


        :return: The leader_category of this LeadersRestObject.  # noqa: E501
        :rtype: str
        """
        return self._leader_category

    @leader_category.setter
    def leader_category(self, leader_category):
        """Sets the leader_category of this LeadersRestObject.


        :param leader_category: The leader_category of this LeadersRestObject.  # noqa: E501
        :type: str
        """

        self._leader_category = leader_category

    @property
    def season(self):
        """Gets the season of this LeadersRestObject.  # noqa: E501


        :return: The season of this LeadersRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this LeadersRestObject.


        :param season: The season of this LeadersRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def game_type(self):
        """Gets the game_type of this LeadersRestObject.  # noqa: E501


        :return: The game_type of this LeadersRestObject.  # noqa: E501
        :rtype: GameTypeEnum
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this LeadersRestObject.


        :param game_type: The game_type of this LeadersRestObject.  # noqa: E501
        :type: GameTypeEnum
        """

        self._game_type = game_type

    @property
    def limits(self):
        """Gets the limits of this LeadersRestObject.  # noqa: E501


        :return: The limits of this LeadersRestObject.  # noqa: E501
        :rtype: LeaderLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this LeadersRestObject.


        :param limits: The limits of this LeadersRestObject.  # noqa: E501
        :type: LeaderLimits
        """

        self._limits = limits

    @property
    def limit_metadata(self):
        """Gets the limit_metadata of this LeadersRestObject.  # noqa: E501


        :return: The limit_metadata of this LeadersRestObject.  # noqa: E501
        :rtype: LimitMetadataRestObject
        """
        return self._limit_metadata

    @limit_metadata.setter
    def limit_metadata(self, limit_metadata):
        """Sets the limit_metadata of this LeadersRestObject.


        :param limit_metadata: The limit_metadata of this LeadersRestObject.  # noqa: E501
        :type: LimitMetadataRestObject
        """

        self._limit_metadata = limit_metadata

    @property
    def leaders(self):
        """Gets the leaders of this LeadersRestObject.  # noqa: E501


        :return: The leaders of this LeadersRestObject.  # noqa: E501
        :rtype: list[PlayerLeaderRestObject]
        """
        return self._leaders

    @leaders.setter
    def leaders(self, leaders):
        """Sets the leaders of this LeadersRestObject.


        :param leaders: The leaders of this LeadersRestObject.  # noqa: E501
        :type: list[PlayerLeaderRestObject]
        """

        self._leaders = leaders

    @property
    def copyright(self):
        """Gets the copyright of this LeadersRestObject.  # noqa: E501


        :return: The copyright of this LeadersRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this LeadersRestObject.


        :param copyright: The copyright of this LeadersRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this LeadersRestObject.  # noqa: E501


        :return: The hydrations of this LeadersRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this LeadersRestObject.


        :param hydrations: The hydrations of this LeadersRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def stat_group(self):
        """Gets the stat_group of this LeadersRestObject.  # noqa: E501


        :return: The stat_group of this LeadersRestObject.  # noqa: E501
        :rtype: str
        """
        return self._stat_group

    @stat_group.setter
    def stat_group(self, stat_group):
        """Sets the stat_group of this LeadersRestObject.


        :param stat_group: The stat_group of this LeadersRestObject.  # noqa: E501
        :type: str
        """

        self._stat_group = stat_group

    @property
    def team(self):
        """Gets the team of this LeadersRestObject.  # noqa: E501


        :return: The team of this LeadersRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this LeadersRestObject.


        :param team: The team of this LeadersRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def league(self):
        """Gets the league of this LeadersRestObject.  # noqa: E501


        :return: The league of this LeadersRestObject.  # noqa: E501
        :rtype: LeagueRestObject
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this LeadersRestObject.


        :param league: The league of this LeadersRestObject.  # noqa: E501
        :type: LeagueRestObject
        """

        self._league = league

    @property
    def total_splits(self):
        """Gets the total_splits of this LeadersRestObject.  # noqa: E501


        :return: The total_splits of this LeadersRestObject.  # noqa: E501
        :rtype: int
        """
        return self._total_splits

    @total_splits.setter
    def total_splits(self, total_splits):
        """Sets the total_splits of this LeadersRestObject.


        :param total_splits: The total_splits of this LeadersRestObject.  # noqa: E501
        :type: int
        """

        self._total_splits = total_splits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeadersRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeadersRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
