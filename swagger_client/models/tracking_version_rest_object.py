# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackingVersionRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'id': 'int',
        'description': 'str',
        'owner': 'TrackingSystemOwner',
        'pitch_vendor': 'TrackingVendorVersionContainer',
        'hit_vendor': 'TrackingVendorVersionContainer',
        'player_vendor': 'TrackingVendorVersionContainer',
        'skeletal_vendor': 'TrackingVendorVersionContainer',
        'bat_vendor': 'TrackingVendorVersionContainer',
        'biomechanics_vendor': 'TrackingVendorVersionContainer'
    }

    attribute_map = {
        'copyright': 'copyright',
        'id': 'id',
        'description': 'description',
        'owner': 'owner',
        'pitch_vendor': 'pitchVendor',
        'hit_vendor': 'hitVendor',
        'player_vendor': 'playerVendor',
        'skeletal_vendor': 'skeletalVendor',
        'bat_vendor': 'batVendor',
        'biomechanics_vendor': 'biomechanicsVendor'
    }

    def __init__(self, copyright=None, id=None, description=None, owner=None, pitch_vendor=None, hit_vendor=None, player_vendor=None, skeletal_vendor=None, bat_vendor=None, biomechanics_vendor=None):  # noqa: E501
        """TrackingVersionRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._id = None
        self._description = None
        self._owner = None
        self._pitch_vendor = None
        self._hit_vendor = None
        self._player_vendor = None
        self._skeletal_vendor = None
        self._bat_vendor = None
        self._biomechanics_vendor = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if owner is not None:
            self.owner = owner
        if pitch_vendor is not None:
            self.pitch_vendor = pitch_vendor
        if hit_vendor is not None:
            self.hit_vendor = hit_vendor
        if player_vendor is not None:
            self.player_vendor = player_vendor
        if skeletal_vendor is not None:
            self.skeletal_vendor = skeletal_vendor
        if bat_vendor is not None:
            self.bat_vendor = bat_vendor
        if biomechanics_vendor is not None:
            self.biomechanics_vendor = biomechanics_vendor

    @property
    def copyright(self):
        """Gets the copyright of this TrackingVersionRestObject.  # noqa: E501


        :return: The copyright of this TrackingVersionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this TrackingVersionRestObject.


        :param copyright: The copyright of this TrackingVersionRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def id(self):
        """Gets the id of this TrackingVersionRestObject.  # noqa: E501


        :return: The id of this TrackingVersionRestObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackingVersionRestObject.


        :param id: The id of this TrackingVersionRestObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this TrackingVersionRestObject.  # noqa: E501


        :return: The description of this TrackingVersionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackingVersionRestObject.


        :param description: The description of this TrackingVersionRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this TrackingVersionRestObject.  # noqa: E501


        :return: The owner of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingSystemOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TrackingVersionRestObject.


        :param owner: The owner of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingSystemOwner
        """

        self._owner = owner

    @property
    def pitch_vendor(self):
        """Gets the pitch_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The pitch_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._pitch_vendor

    @pitch_vendor.setter
    def pitch_vendor(self, pitch_vendor):
        """Sets the pitch_vendor of this TrackingVersionRestObject.


        :param pitch_vendor: The pitch_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._pitch_vendor = pitch_vendor

    @property
    def hit_vendor(self):
        """Gets the hit_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The hit_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._hit_vendor

    @hit_vendor.setter
    def hit_vendor(self, hit_vendor):
        """Sets the hit_vendor of this TrackingVersionRestObject.


        :param hit_vendor: The hit_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._hit_vendor = hit_vendor

    @property
    def player_vendor(self):
        """Gets the player_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The player_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._player_vendor

    @player_vendor.setter
    def player_vendor(self, player_vendor):
        """Sets the player_vendor of this TrackingVersionRestObject.


        :param player_vendor: The player_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._player_vendor = player_vendor

    @property
    def skeletal_vendor(self):
        """Gets the skeletal_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The skeletal_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._skeletal_vendor

    @skeletal_vendor.setter
    def skeletal_vendor(self, skeletal_vendor):
        """Sets the skeletal_vendor of this TrackingVersionRestObject.


        :param skeletal_vendor: The skeletal_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._skeletal_vendor = skeletal_vendor

    @property
    def bat_vendor(self):
        """Gets the bat_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The bat_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._bat_vendor

    @bat_vendor.setter
    def bat_vendor(self, bat_vendor):
        """Sets the bat_vendor of this TrackingVersionRestObject.


        :param bat_vendor: The bat_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._bat_vendor = bat_vendor

    @property
    def biomechanics_vendor(self):
        """Gets the biomechanics_vendor of this TrackingVersionRestObject.  # noqa: E501


        :return: The biomechanics_vendor of this TrackingVersionRestObject.  # noqa: E501
        :rtype: TrackingVendorVersionContainer
        """
        return self._biomechanics_vendor

    @biomechanics_vendor.setter
    def biomechanics_vendor(self, biomechanics_vendor):
        """Sets the biomechanics_vendor of this TrackingVersionRestObject.


        :param biomechanics_vendor: The biomechanics_vendor of this TrackingVersionRestObject.  # noqa: E501
        :type: TrackingVendorVersionContainer
        """

        self._biomechanics_vendor = biomechanics_vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingVersionRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingVersionRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
