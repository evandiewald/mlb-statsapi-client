# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsPlayMetadataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hydrations': 'list[str]',
        'game_pk': 'str',
        'game_date': 'str',
        'time_code': 'str',
        'guid': 'str',
        'at_bat_number': 'int',
        'pitch_number': 'int',
        'pickoff_number': 'int',
        'game_mode': 'GameModeTO',
        'inning': 'int',
        'is_top_inning': 'bool',
        'is_pitch': 'bool',
        'is_pickoff': 'bool',
        'is_hit': 'bool',
        'is_manual': 'bool',
        'raw_file': 'str',
        'parsed_file': 'str',
        'time': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'pitch_time': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'audit_updated_at': 'str',
        'metrics_updated_at': 'str',
        'has_updates': 'bool',
        'number_of_metric_errors': 'int',
        'time_code_offset': 'str',
        'is_scrubbed': 'bool',
        'video_updated_at': 'str',
        'strike_zone_info': 'JsonNode',
        'pitch_segment': 'PitchSegmentRestObject',
        'hit_segment': 'HitSegmentRestObject',
        'context_metrics': 'list[CalculatedMetricRestObject]',
        'context_averages': 'list[CalculatedMetricRestObject]',
        'calculated_metrics': 'list[CalculatedMetricRestObject]',
        'invalid_tracks': 'list[CalculatedMetricRestObject]',
        'video': 'IFeedRestObject',
        'meta_data': 'StatSplitsRestObject',
        'play_result': 'PlayResultRestObject',
        'play_by_play': 'BaseballPlayRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'game_pk': 'gamePk',
        'game_date': 'gameDate',
        'time_code': 'timeCode',
        'guid': 'guid',
        'at_bat_number': 'atBatNumber',
        'pitch_number': 'pitchNumber',
        'pickoff_number': 'pickoffNumber',
        'game_mode': 'gameMode',
        'inning': 'inning',
        'is_top_inning': 'isTopInning',
        'is_pitch': 'isPitch',
        'is_pickoff': 'isPickoff',
        'is_hit': 'isHit',
        'is_manual': 'isManual',
        'raw_file': 'rawFile',
        'parsed_file': 'parsedFile',
        'time': 'time',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'pitch_time': 'pitchTime',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'audit_updated_at': 'auditUpdatedAt',
        'metrics_updated_at': 'metricsUpdatedAt',
        'has_updates': 'hasUpdates',
        'number_of_metric_errors': 'numberOfMetricErrors',
        'time_code_offset': 'timeCodeOffset',
        'is_scrubbed': 'isScrubbed',
        'video_updated_at': 'videoUpdatedAt',
        'strike_zone_info': 'strikeZoneInfo',
        'pitch_segment': 'pitchSegment',
        'hit_segment': 'hitSegment',
        'context_metrics': 'contextMetrics',
        'context_averages': 'contextAverages',
        'calculated_metrics': 'calculatedMetrics',
        'invalid_tracks': 'invalidTracks',
        'video': 'video',
        'meta_data': 'metaData',
        'play_result': 'playResult',
        'play_by_play': 'playByPlay'
    }

    def __init__(self, copyright=None, hydrations=None, game_pk=None, game_date=None, time_code=None, guid=None, at_bat_number=None, pitch_number=None, pickoff_number=None, game_mode=None, inning=None, is_top_inning=None, is_pitch=None, is_pickoff=None, is_hit=None, is_manual=None, raw_file=None, parsed_file=None, time=None, start_time=None, end_time=None, pitch_time=None, created_at=None, updated_at=None, audit_updated_at=None, metrics_updated_at=None, has_updates=None, number_of_metric_errors=None, time_code_offset=None, is_scrubbed=None, video_updated_at=None, strike_zone_info=None, pitch_segment=None, hit_segment=None, context_metrics=None, context_averages=None, calculated_metrics=None, invalid_tracks=None, video=None, meta_data=None, play_result=None, play_by_play=None):  # noqa: E501
        """AnalyticsPlayMetadataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hydrations = None
        self._game_pk = None
        self._game_date = None
        self._time_code = None
        self._guid = None
        self._at_bat_number = None
        self._pitch_number = None
        self._pickoff_number = None
        self._game_mode = None
        self._inning = None
        self._is_top_inning = None
        self._is_pitch = None
        self._is_pickoff = None
        self._is_hit = None
        self._is_manual = None
        self._raw_file = None
        self._parsed_file = None
        self._time = None
        self._start_time = None
        self._end_time = None
        self._pitch_time = None
        self._created_at = None
        self._updated_at = None
        self._audit_updated_at = None
        self._metrics_updated_at = None
        self._has_updates = None
        self._number_of_metric_errors = None
        self._time_code_offset = None
        self._is_scrubbed = None
        self._video_updated_at = None
        self._strike_zone_info = None
        self._pitch_segment = None
        self._hit_segment = None
        self._context_metrics = None
        self._context_averages = None
        self._calculated_metrics = None
        self._invalid_tracks = None
        self._video = None
        self._meta_data = None
        self._play_result = None
        self._play_by_play = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if game_pk is not None:
            self.game_pk = game_pk
        if game_date is not None:
            self.game_date = game_date
        if time_code is not None:
            self.time_code = time_code
        if guid is not None:
            self.guid = guid
        if at_bat_number is not None:
            self.at_bat_number = at_bat_number
        if pitch_number is not None:
            self.pitch_number = pitch_number
        if pickoff_number is not None:
            self.pickoff_number = pickoff_number
        if game_mode is not None:
            self.game_mode = game_mode
        if inning is not None:
            self.inning = inning
        if is_top_inning is not None:
            self.is_top_inning = is_top_inning
        if is_pitch is not None:
            self.is_pitch = is_pitch
        if is_pickoff is not None:
            self.is_pickoff = is_pickoff
        if is_hit is not None:
            self.is_hit = is_hit
        if is_manual is not None:
            self.is_manual = is_manual
        if raw_file is not None:
            self.raw_file = raw_file
        if parsed_file is not None:
            self.parsed_file = parsed_file
        if time is not None:
            self.time = time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if pitch_time is not None:
            self.pitch_time = pitch_time
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if audit_updated_at is not None:
            self.audit_updated_at = audit_updated_at
        if metrics_updated_at is not None:
            self.metrics_updated_at = metrics_updated_at
        if has_updates is not None:
            self.has_updates = has_updates
        if number_of_metric_errors is not None:
            self.number_of_metric_errors = number_of_metric_errors
        if time_code_offset is not None:
            self.time_code_offset = time_code_offset
        if is_scrubbed is not None:
            self.is_scrubbed = is_scrubbed
        if video_updated_at is not None:
            self.video_updated_at = video_updated_at
        if strike_zone_info is not None:
            self.strike_zone_info = strike_zone_info
        if pitch_segment is not None:
            self.pitch_segment = pitch_segment
        if hit_segment is not None:
            self.hit_segment = hit_segment
        if context_metrics is not None:
            self.context_metrics = context_metrics
        if context_averages is not None:
            self.context_averages = context_averages
        if calculated_metrics is not None:
            self.calculated_metrics = calculated_metrics
        if invalid_tracks is not None:
            self.invalid_tracks = invalid_tracks
        if video is not None:
            self.video = video
        if meta_data is not None:
            self.meta_data = meta_data
        if play_result is not None:
            self.play_result = play_result
        if play_by_play is not None:
            self.play_by_play = play_by_play

    @property
    def copyright(self):
        """Gets the copyright of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The copyright of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this AnalyticsPlayMetadataRestObject.


        :param copyright: The copyright of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The hydrations of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this AnalyticsPlayMetadataRestObject.


        :param hydrations: The hydrations of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def game_pk(self):
        """Gets the game_pk of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The game_pk of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this AnalyticsPlayMetadataRestObject.


        :param game_pk: The game_pk of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._game_pk = game_pk

    @property
    def game_date(self):
        """Gets the game_date of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The game_date of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._game_date

    @game_date.setter
    def game_date(self, game_date):
        """Sets the game_date of this AnalyticsPlayMetadataRestObject.


        :param game_date: The game_date of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._game_date = game_date

    @property
    def time_code(self):
        """Gets the time_code of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The time_code of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this AnalyticsPlayMetadataRestObject.


        :param time_code: The time_code of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._time_code = time_code

    @property
    def guid(self):
        """Gets the guid of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The guid of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this AnalyticsPlayMetadataRestObject.


        :param guid: The guid of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def at_bat_number(self):
        """Gets the at_bat_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The at_bat_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_number

    @at_bat_number.setter
    def at_bat_number(self, at_bat_number):
        """Sets the at_bat_number of this AnalyticsPlayMetadataRestObject.


        :param at_bat_number: The at_bat_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: int
        """

        self._at_bat_number = at_bat_number

    @property
    def pitch_number(self):
        """Gets the pitch_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The pitch_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number

    @pitch_number.setter
    def pitch_number(self, pitch_number):
        """Sets the pitch_number of this AnalyticsPlayMetadataRestObject.


        :param pitch_number: The pitch_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: int
        """

        self._pitch_number = pitch_number

    @property
    def pickoff_number(self):
        """Gets the pickoff_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The pickoff_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pickoff_number

    @pickoff_number.setter
    def pickoff_number(self, pickoff_number):
        """Sets the pickoff_number of this AnalyticsPlayMetadataRestObject.


        :param pickoff_number: The pickoff_number of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: int
        """

        self._pickoff_number = pickoff_number

    @property
    def game_mode(self):
        """Gets the game_mode of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The game_mode of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: GameModeTO
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this AnalyticsPlayMetadataRestObject.


        :param game_mode: The game_mode of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: GameModeTO
        """

        self._game_mode = game_mode

    @property
    def inning(self):
        """Gets the inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this AnalyticsPlayMetadataRestObject.


        :param inning: The inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def is_top_inning(self):
        """Gets the is_top_inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_top_inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_inning

    @is_top_inning.setter
    def is_top_inning(self, is_top_inning):
        """Sets the is_top_inning of this AnalyticsPlayMetadataRestObject.


        :param is_top_inning: The is_top_inning of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_top_inning = is_top_inning

    @property
    def is_pitch(self):
        """Gets the is_pitch of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_pitch of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_pitch

    @is_pitch.setter
    def is_pitch(self, is_pitch):
        """Sets the is_pitch of this AnalyticsPlayMetadataRestObject.


        :param is_pitch: The is_pitch of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_pitch = is_pitch

    @property
    def is_pickoff(self):
        """Gets the is_pickoff of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_pickoff of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_pickoff

    @is_pickoff.setter
    def is_pickoff(self, is_pickoff):
        """Sets the is_pickoff of this AnalyticsPlayMetadataRestObject.


        :param is_pickoff: The is_pickoff of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_pickoff = is_pickoff

    @property
    def is_hit(self):
        """Gets the is_hit of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_hit of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_hit

    @is_hit.setter
    def is_hit(self, is_hit):
        """Sets the is_hit of this AnalyticsPlayMetadataRestObject.


        :param is_hit: The is_hit of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_hit = is_hit

    @property
    def is_manual(self):
        """Gets the is_manual of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_manual of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this AnalyticsPlayMetadataRestObject.


        :param is_manual: The is_manual of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def raw_file(self):
        """Gets the raw_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The raw_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._raw_file

    @raw_file.setter
    def raw_file(self, raw_file):
        """Sets the raw_file of this AnalyticsPlayMetadataRestObject.


        :param raw_file: The raw_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._raw_file = raw_file

    @property
    def parsed_file(self):
        """Gets the parsed_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The parsed_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._parsed_file

    @parsed_file.setter
    def parsed_file(self, parsed_file):
        """Sets the parsed_file of this AnalyticsPlayMetadataRestObject.


        :param parsed_file: The parsed_file of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._parsed_file = parsed_file

    @property
    def time(self):
        """Gets the time of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AnalyticsPlayMetadataRestObject.


        :param time: The time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def start_time(self):
        """Gets the start_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The start_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AnalyticsPlayMetadataRestObject.


        :param start_time: The start_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The end_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AnalyticsPlayMetadataRestObject.


        :param end_time: The end_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def pitch_time(self):
        """Gets the pitch_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The pitch_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._pitch_time

    @pitch_time.setter
    def pitch_time(self, pitch_time):
        """Sets the pitch_time of this AnalyticsPlayMetadataRestObject.


        :param pitch_time: The pitch_time of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._pitch_time = pitch_time

    @property
    def created_at(self):
        """Gets the created_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The created_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnalyticsPlayMetadataRestObject.


        :param created_at: The created_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AnalyticsPlayMetadataRestObject.


        :param updated_at: The updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def audit_updated_at(self):
        """Gets the audit_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The audit_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._audit_updated_at

    @audit_updated_at.setter
    def audit_updated_at(self, audit_updated_at):
        """Sets the audit_updated_at of this AnalyticsPlayMetadataRestObject.


        :param audit_updated_at: The audit_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._audit_updated_at = audit_updated_at

    @property
    def metrics_updated_at(self):
        """Gets the metrics_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The metrics_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._metrics_updated_at

    @metrics_updated_at.setter
    def metrics_updated_at(self, metrics_updated_at):
        """Sets the metrics_updated_at of this AnalyticsPlayMetadataRestObject.


        :param metrics_updated_at: The metrics_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._metrics_updated_at = metrics_updated_at

    @property
    def has_updates(self):
        """Gets the has_updates of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The has_updates of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_updates

    @has_updates.setter
    def has_updates(self, has_updates):
        """Sets the has_updates of this AnalyticsPlayMetadataRestObject.


        :param has_updates: The has_updates of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._has_updates = has_updates

    @property
    def number_of_metric_errors(self):
        """Gets the number_of_metric_errors of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The number_of_metric_errors of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: int
        """
        return self._number_of_metric_errors

    @number_of_metric_errors.setter
    def number_of_metric_errors(self, number_of_metric_errors):
        """Sets the number_of_metric_errors of this AnalyticsPlayMetadataRestObject.


        :param number_of_metric_errors: The number_of_metric_errors of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: int
        """

        self._number_of_metric_errors = number_of_metric_errors

    @property
    def time_code_offset(self):
        """Gets the time_code_offset of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The time_code_offset of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time_code_offset

    @time_code_offset.setter
    def time_code_offset(self, time_code_offset):
        """Sets the time_code_offset of this AnalyticsPlayMetadataRestObject.


        :param time_code_offset: The time_code_offset of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._time_code_offset = time_code_offset

    @property
    def is_scrubbed(self):
        """Gets the is_scrubbed of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The is_scrubbed of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_scrubbed

    @is_scrubbed.setter
    def is_scrubbed(self, is_scrubbed):
        """Sets the is_scrubbed of this AnalyticsPlayMetadataRestObject.


        :param is_scrubbed: The is_scrubbed of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: bool
        """

        self._is_scrubbed = is_scrubbed

    @property
    def video_updated_at(self):
        """Gets the video_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The video_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._video_updated_at

    @video_updated_at.setter
    def video_updated_at(self, video_updated_at):
        """Sets the video_updated_at of this AnalyticsPlayMetadataRestObject.


        :param video_updated_at: The video_updated_at of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: str
        """

        self._video_updated_at = video_updated_at

    @property
    def strike_zone_info(self):
        """Gets the strike_zone_info of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The strike_zone_info of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._strike_zone_info

    @strike_zone_info.setter
    def strike_zone_info(self, strike_zone_info):
        """Sets the strike_zone_info of this AnalyticsPlayMetadataRestObject.


        :param strike_zone_info: The strike_zone_info of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._strike_zone_info = strike_zone_info

    @property
    def pitch_segment(self):
        """Gets the pitch_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The pitch_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: PitchSegmentRestObject
        """
        return self._pitch_segment

    @pitch_segment.setter
    def pitch_segment(self, pitch_segment):
        """Sets the pitch_segment of this AnalyticsPlayMetadataRestObject.


        :param pitch_segment: The pitch_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: PitchSegmentRestObject
        """

        self._pitch_segment = pitch_segment

    @property
    def hit_segment(self):
        """Gets the hit_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The hit_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: HitSegmentRestObject
        """
        return self._hit_segment

    @hit_segment.setter
    def hit_segment(self, hit_segment):
        """Sets the hit_segment of this AnalyticsPlayMetadataRestObject.


        :param hit_segment: The hit_segment of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: HitSegmentRestObject
        """

        self._hit_segment = hit_segment

    @property
    def context_metrics(self):
        """Gets the context_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The context_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._context_metrics

    @context_metrics.setter
    def context_metrics(self, context_metrics):
        """Sets the context_metrics of this AnalyticsPlayMetadataRestObject.


        :param context_metrics: The context_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._context_metrics = context_metrics

    @property
    def context_averages(self):
        """Gets the context_averages of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The context_averages of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._context_averages

    @context_averages.setter
    def context_averages(self, context_averages):
        """Sets the context_averages of this AnalyticsPlayMetadataRestObject.


        :param context_averages: The context_averages of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._context_averages = context_averages

    @property
    def calculated_metrics(self):
        """Gets the calculated_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The calculated_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._calculated_metrics

    @calculated_metrics.setter
    def calculated_metrics(self, calculated_metrics):
        """Sets the calculated_metrics of this AnalyticsPlayMetadataRestObject.


        :param calculated_metrics: The calculated_metrics of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._calculated_metrics = calculated_metrics

    @property
    def invalid_tracks(self):
        """Gets the invalid_tracks of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The invalid_tracks of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: list[CalculatedMetricRestObject]
        """
        return self._invalid_tracks

    @invalid_tracks.setter
    def invalid_tracks(self, invalid_tracks):
        """Sets the invalid_tracks of this AnalyticsPlayMetadataRestObject.


        :param invalid_tracks: The invalid_tracks of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: list[CalculatedMetricRestObject]
        """

        self._invalid_tracks = invalid_tracks

    @property
    def video(self):
        """Gets the video of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The video of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: IFeedRestObject
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this AnalyticsPlayMetadataRestObject.


        :param video: The video of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: IFeedRestObject
        """

        self._video = video

    @property
    def meta_data(self):
        """Gets the meta_data of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The meta_data of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: StatSplitsRestObject
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this AnalyticsPlayMetadataRestObject.


        :param meta_data: The meta_data of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: StatSplitsRestObject
        """

        self._meta_data = meta_data

    @property
    def play_result(self):
        """Gets the play_result of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The play_result of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: PlayResultRestObject
        """
        return self._play_result

    @play_result.setter
    def play_result(self, play_result):
        """Sets the play_result of this AnalyticsPlayMetadataRestObject.


        :param play_result: The play_result of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: PlayResultRestObject
        """

        self._play_result = play_result

    @property
    def play_by_play(self):
        """Gets the play_by_play of this AnalyticsPlayMetadataRestObject.  # noqa: E501


        :return: The play_by_play of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :rtype: BaseballPlayRestObject
        """
        return self._play_by_play

    @play_by_play.setter
    def play_by_play(self, play_by_play):
        """Sets the play_by_play of this AnalyticsPlayMetadataRestObject.


        :param play_by_play: The play_by_play of this AnalyticsPlayMetadataRestObject.  # noqa: E501
        :type: BaseballPlayRestObject
        """

        self._play_by_play = play_by_play

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsPlayMetadataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsPlayMetadataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
