# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameInfoRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'attendance': 'int',
        'first_pitch': 'datetime',
        'game_duration_minutes': 'int',
        'delay_duration_minutes': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'attendance': 'attendance',
        'first_pitch': 'firstPitch',
        'game_duration_minutes': 'gameDurationMinutes',
        'delay_duration_minutes': 'delayDurationMinutes'
    }

    def __init__(self, copyright=None, attendance=None, first_pitch=None, game_duration_minutes=None, delay_duration_minutes=None):  # noqa: E501
        """GameInfoRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._attendance = None
        self._first_pitch = None
        self._game_duration_minutes = None
        self._delay_duration_minutes = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if attendance is not None:
            self.attendance = attendance
        if first_pitch is not None:
            self.first_pitch = first_pitch
        if game_duration_minutes is not None:
            self.game_duration_minutes = game_duration_minutes
        if delay_duration_minutes is not None:
            self.delay_duration_minutes = delay_duration_minutes

    @property
    def copyright(self):
        """Gets the copyright of this GameInfoRestObject.  # noqa: E501


        :return: The copyright of this GameInfoRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this GameInfoRestObject.


        :param copyright: The copyright of this GameInfoRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def attendance(self):
        """Gets the attendance of this GameInfoRestObject.  # noqa: E501


        :return: The attendance of this GameInfoRestObject.  # noqa: E501
        :rtype: int
        """
        return self._attendance

    @attendance.setter
    def attendance(self, attendance):
        """Sets the attendance of this GameInfoRestObject.


        :param attendance: The attendance of this GameInfoRestObject.  # noqa: E501
        :type: int
        """

        self._attendance = attendance

    @property
    def first_pitch(self):
        """Gets the first_pitch of this GameInfoRestObject.  # noqa: E501


        :return: The first_pitch of this GameInfoRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._first_pitch

    @first_pitch.setter
    def first_pitch(self, first_pitch):
        """Sets the first_pitch of this GameInfoRestObject.


        :param first_pitch: The first_pitch of this GameInfoRestObject.  # noqa: E501
        :type: datetime
        """

        self._first_pitch = first_pitch

    @property
    def game_duration_minutes(self):
        """Gets the game_duration_minutes of this GameInfoRestObject.  # noqa: E501


        :return: The game_duration_minutes of this GameInfoRestObject.  # noqa: E501
        :rtype: int
        """
        return self._game_duration_minutes

    @game_duration_minutes.setter
    def game_duration_minutes(self, game_duration_minutes):
        """Sets the game_duration_minutes of this GameInfoRestObject.


        :param game_duration_minutes: The game_duration_minutes of this GameInfoRestObject.  # noqa: E501
        :type: int
        """

        self._game_duration_minutes = game_duration_minutes

    @property
    def delay_duration_minutes(self):
        """Gets the delay_duration_minutes of this GameInfoRestObject.  # noqa: E501


        :return: The delay_duration_minutes of this GameInfoRestObject.  # noqa: E501
        :rtype: int
        """
        return self._delay_duration_minutes

    @delay_duration_minutes.setter
    def delay_duration_minutes(self, delay_duration_minutes):
        """Sets the delay_duration_minutes of this GameInfoRestObject.


        :param delay_duration_minutes: The delay_duration_minutes of this GameInfoRestObject.  # noqa: E501
        :type: int
        """

        self._delay_duration_minutes = delay_duration_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameInfoRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameInfoRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
