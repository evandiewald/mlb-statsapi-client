# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Relative(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'primary_position': 'BaseballPosition',
        'stats': 'Stats',
        'other_names': 'OtherNames',
        'id': 'int',
        'first_name': 'str',
        'use_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'use_last_name': 'str',
        'nick_name': 'str',
        'nick_names': 'list[str]',
        'boxscore_name': 'str',
        'primary_number': 'str',
        'roster_number': 'str',
        'draft_year': 'int',
        'age': 'int',
        'birth_city': 'str',
        'birth_state_province': 'str',
        'birth_country': 'str',
        'birth_date': 'date',
        'death_city': 'str',
        'death_state_province': 'str',
        'death_country': 'str',
        'death_date': 'date',
        'last_played_date': 'date',
        'pronunciation': 'str',
        'full_name': 'str',
        'height': 'int',
        'height_feet': 'int',
        'height_inches': 'int',
        'weight': 'int',
        'current_team': 'BaseballTeam',
        'is_rookie': 'bool',
        'is_active': 'bool',
        'gender': 'str',
        'name_matrilineal': 'str',
        'is_player': 'bool',
        'is_verified': 'bool',
        'is_alternate_captain': 'bool',
        'is_captain': 'bool',
        'twitter': 'str',
        'awards': 'list[Award]',
        'social_media_info': 'SocialMediaInfo',
        'education_info': 'EducationInfo',
        'photos': 'list[Photo]',
        'draft': 'list[PlayerDraftInfo]',
        'additional_bio': 'AdditionalBio',
        'phonetic_name': 'str',
        'nationality': 'str',
        'bat_side': 'DynamicLookupEnum',
        'pitch_hand': 'DynamicLookupEnum',
        'mlb_debut_date': 'date',
        'batter_pitcher': 'str',
        'note': 'str',
        'name_slug': 'str',
        'name_title': 'str',
        'name_prefix': 'str',
        'name_first_last': 'str',
        'first_last_name': 'str',
        'last_first_name': 'str',
        'last_init_name': 'str',
        'init_last_name': 'str',
        'full_fml_name': 'str',
        'full_lfm_name': 'str',
        'strike_zone_top': 'float',
        'strike_zone_bottom': 'float',
        'alumni_last_season': 'str',
        'language_id': 'int',
        'transactions': 'list[Transaction]',
        'drafts': 'list[BaseballDraftProspect]',
        'articles': 'list[Article]',
        'videos': 'list[Video]',
        'mixed_feed': 'list[IFeed]',
        'xref_ids': 'list[XrefId]',
        'depth_charts': 'list[DepthChart]',
        'next_starts': 'list[BaseballScheduleItem]',
        'rookie_seasons': 'list[str]',
        'has_stats': 'bool',
        'relation': 'str',
        'pitcher': 'bool',
        'fielder': 'bool',
        'hydrated_social': 'dict(str, object)',
        'hydrated_education': 'dict(str, object)',
        'hydrated_stats': 'dict(str, object)',
        'hydrated_current_team': 'dict(str, object)',
        'hydrated_team': 'dict(str, object)',
        'hydrated_awards': 'dict(str, object)',
        'hydrated_person_roster_entries': 'dict(str, object)',
        'hydrated_person_jobs_entries': 'dict(str, object)',
        'hydrated_relatives': 'dict(str, object)',
        'draft_prospects': 'dict(str, object)',
        'hydrated_depth_charts': 'dict(str, object)',
        'hydrated_next_starts': 'dict(str, object)',
        'hydrated_player_photos': 'dict(str, object)',
        'hydrated_articles': 'dict(str, object)',
        'hydrated_videos': 'dict(str, object)',
        'hydrated_mixed_feed': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'primary_position': 'primaryPosition',
        'stats': 'stats',
        'other_names': 'otherNames',
        'id': 'id',
        'first_name': 'firstName',
        'use_name': 'useName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'use_last_name': 'useLastName',
        'nick_name': 'nickName',
        'nick_names': 'nickNames',
        'boxscore_name': 'boxscoreName',
        'primary_number': 'primaryNumber',
        'roster_number': 'rosterNumber',
        'draft_year': 'draftYear',
        'age': 'age',
        'birth_city': 'birthCity',
        'birth_state_province': 'birthStateProvince',
        'birth_country': 'birthCountry',
        'birth_date': 'birthDate',
        'death_city': 'deathCity',
        'death_state_province': 'deathStateProvince',
        'death_country': 'deathCountry',
        'death_date': 'deathDate',
        'last_played_date': 'lastPlayedDate',
        'pronunciation': 'pronunciation',
        'full_name': 'fullName',
        'height': 'height',
        'height_feet': 'heightFeet',
        'height_inches': 'heightInches',
        'weight': 'weight',
        'current_team': 'currentTeam',
        'is_rookie': 'isRookie',
        'is_active': 'isActive',
        'gender': 'gender',
        'name_matrilineal': 'nameMatrilineal',
        'is_player': 'isPlayer',
        'is_verified': 'isVerified',
        'is_alternate_captain': 'isAlternateCaptain',
        'is_captain': 'isCaptain',
        'twitter': 'twitter',
        'awards': 'awards',
        'social_media_info': 'socialMediaInfo',
        'education_info': 'educationInfo',
        'photos': 'photos',
        'draft': 'draft',
        'additional_bio': 'additionalBio',
        'phonetic_name': 'phoneticName',
        'nationality': 'nationality',
        'bat_side': 'batSide',
        'pitch_hand': 'pitchHand',
        'mlb_debut_date': 'mlbDebutDate',
        'batter_pitcher': 'batterPitcher',
        'note': 'note',
        'name_slug': 'nameSlug',
        'name_title': 'nameTitle',
        'name_prefix': 'namePrefix',
        'name_first_last': 'nameFirstLast',
        'first_last_name': 'firstLastName',
        'last_first_name': 'lastFirstName',
        'last_init_name': 'lastInitName',
        'init_last_name': 'initLastName',
        'full_fml_name': 'fullFMLName',
        'full_lfm_name': 'fullLFMName',
        'strike_zone_top': 'strikeZoneTop',
        'strike_zone_bottom': 'strikeZoneBottom',
        'alumni_last_season': 'alumniLastSeason',
        'language_id': 'languageId',
        'transactions': 'transactions',
        'drafts': 'drafts',
        'articles': 'articles',
        'videos': 'videos',
        'mixed_feed': 'mixedFeed',
        'xref_ids': 'xrefIds',
        'depth_charts': 'depthCharts',
        'next_starts': 'nextStarts',
        'rookie_seasons': 'rookieSeasons',
        'has_stats': 'hasStats',
        'relation': 'relation',
        'pitcher': 'pitcher',
        'fielder': 'fielder',
        'hydrated_social': 'hydratedSocial',
        'hydrated_education': 'hydratedEducation',
        'hydrated_stats': 'hydratedStats',
        'hydrated_current_team': 'hydratedCurrentTeam',
        'hydrated_team': 'hydratedTeam',
        'hydrated_awards': 'hydratedAwards',
        'hydrated_person_roster_entries': 'hydratedPersonRosterEntries',
        'hydrated_person_jobs_entries': 'hydratedPersonJobsEntries',
        'hydrated_relatives': 'hydratedRelatives',
        'draft_prospects': 'draftProspects',
        'hydrated_depth_charts': 'hydratedDepthCharts',
        'hydrated_next_starts': 'hydratedNextStarts',
        'hydrated_player_photos': 'hydratedPlayerPhotos',
        'hydrated_articles': 'hydratedArticles',
        'hydrated_videos': 'hydratedVideos',
        'hydrated_mixed_feed': 'hydratedMixedFeed',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, primary_position=None, stats=None, other_names=None, id=None, first_name=None, use_name=None, middle_name=None, last_name=None, use_last_name=None, nick_name=None, nick_names=None, boxscore_name=None, primary_number=None, roster_number=None, draft_year=None, age=None, birth_city=None, birth_state_province=None, birth_country=None, birth_date=None, death_city=None, death_state_province=None, death_country=None, death_date=None, last_played_date=None, pronunciation=None, full_name=None, height=None, height_feet=None, height_inches=None, weight=None, current_team=None, is_rookie=None, is_active=None, gender=None, name_matrilineal=None, is_player=None, is_verified=None, is_alternate_captain=None, is_captain=None, twitter=None, awards=None, social_media_info=None, education_info=None, photos=None, draft=None, additional_bio=None, phonetic_name=None, nationality=None, bat_side=None, pitch_hand=None, mlb_debut_date=None, batter_pitcher=None, note=None, name_slug=None, name_title=None, name_prefix=None, name_first_last=None, first_last_name=None, last_first_name=None, last_init_name=None, init_last_name=None, full_fml_name=None, full_lfm_name=None, strike_zone_top=None, strike_zone_bottom=None, alumni_last_season=None, language_id=None, transactions=None, drafts=None, articles=None, videos=None, mixed_feed=None, xref_ids=None, depth_charts=None, next_starts=None, rookie_seasons=None, has_stats=None, relation=None, pitcher=None, fielder=None, hydrated_social=None, hydrated_education=None, hydrated_stats=None, hydrated_current_team=None, hydrated_team=None, hydrated_awards=None, hydrated_person_roster_entries=None, hydrated_person_jobs_entries=None, hydrated_relatives=None, draft_prospects=None, hydrated_depth_charts=None, hydrated_next_starts=None, hydrated_player_photos=None, hydrated_articles=None, hydrated_videos=None, hydrated_mixed_feed=None, user_privileges=None):  # noqa: E501
        """Relative - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._primary_position = None
        self._stats = None
        self._other_names = None
        self._id = None
        self._first_name = None
        self._use_name = None
        self._middle_name = None
        self._last_name = None
        self._use_last_name = None
        self._nick_name = None
        self._nick_names = None
        self._boxscore_name = None
        self._primary_number = None
        self._roster_number = None
        self._draft_year = None
        self._age = None
        self._birth_city = None
        self._birth_state_province = None
        self._birth_country = None
        self._birth_date = None
        self._death_city = None
        self._death_state_province = None
        self._death_country = None
        self._death_date = None
        self._last_played_date = None
        self._pronunciation = None
        self._full_name = None
        self._height = None
        self._height_feet = None
        self._height_inches = None
        self._weight = None
        self._current_team = None
        self._is_rookie = None
        self._is_active = None
        self._gender = None
        self._name_matrilineal = None
        self._is_player = None
        self._is_verified = None
        self._is_alternate_captain = None
        self._is_captain = None
        self._twitter = None
        self._awards = None
        self._social_media_info = None
        self._education_info = None
        self._photos = None
        self._draft = None
        self._additional_bio = None
        self._phonetic_name = None
        self._nationality = None
        self._bat_side = None
        self._pitch_hand = None
        self._mlb_debut_date = None
        self._batter_pitcher = None
        self._note = None
        self._name_slug = None
        self._name_title = None
        self._name_prefix = None
        self._name_first_last = None
        self._first_last_name = None
        self._last_first_name = None
        self._last_init_name = None
        self._init_last_name = None
        self._full_fml_name = None
        self._full_lfm_name = None
        self._strike_zone_top = None
        self._strike_zone_bottom = None
        self._alumni_last_season = None
        self._language_id = None
        self._transactions = None
        self._drafts = None
        self._articles = None
        self._videos = None
        self._mixed_feed = None
        self._xref_ids = None
        self._depth_charts = None
        self._next_starts = None
        self._rookie_seasons = None
        self._has_stats = None
        self._relation = None
        self._pitcher = None
        self._fielder = None
        self._hydrated_social = None
        self._hydrated_education = None
        self._hydrated_stats = None
        self._hydrated_current_team = None
        self._hydrated_team = None
        self._hydrated_awards = None
        self._hydrated_person_roster_entries = None
        self._hydrated_person_jobs_entries = None
        self._hydrated_relatives = None
        self._draft_prospects = None
        self._hydrated_depth_charts = None
        self._hydrated_next_starts = None
        self._hydrated_player_photos = None
        self._hydrated_articles = None
        self._hydrated_videos = None
        self._hydrated_mixed_feed = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if primary_position is not None:
            self.primary_position = primary_position
        if stats is not None:
            self.stats = stats
        if other_names is not None:
            self.other_names = other_names
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if use_name is not None:
            self.use_name = use_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if use_last_name is not None:
            self.use_last_name = use_last_name
        if nick_name is not None:
            self.nick_name = nick_name
        if nick_names is not None:
            self.nick_names = nick_names
        if boxscore_name is not None:
            self.boxscore_name = boxscore_name
        if primary_number is not None:
            self.primary_number = primary_number
        if roster_number is not None:
            self.roster_number = roster_number
        if draft_year is not None:
            self.draft_year = draft_year
        if age is not None:
            self.age = age
        if birth_city is not None:
            self.birth_city = birth_city
        if birth_state_province is not None:
            self.birth_state_province = birth_state_province
        if birth_country is not None:
            self.birth_country = birth_country
        if birth_date is not None:
            self.birth_date = birth_date
        if death_city is not None:
            self.death_city = death_city
        if death_state_province is not None:
            self.death_state_province = death_state_province
        if death_country is not None:
            self.death_country = death_country
        if death_date is not None:
            self.death_date = death_date
        if last_played_date is not None:
            self.last_played_date = last_played_date
        if pronunciation is not None:
            self.pronunciation = pronunciation
        if full_name is not None:
            self.full_name = full_name
        if height is not None:
            self.height = height
        if height_feet is not None:
            self.height_feet = height_feet
        if height_inches is not None:
            self.height_inches = height_inches
        if weight is not None:
            self.weight = weight
        if current_team is not None:
            self.current_team = current_team
        if is_rookie is not None:
            self.is_rookie = is_rookie
        if is_active is not None:
            self.is_active = is_active
        if gender is not None:
            self.gender = gender
        if name_matrilineal is not None:
            self.name_matrilineal = name_matrilineal
        if is_player is not None:
            self.is_player = is_player
        if is_verified is not None:
            self.is_verified = is_verified
        if is_alternate_captain is not None:
            self.is_alternate_captain = is_alternate_captain
        if is_captain is not None:
            self.is_captain = is_captain
        if twitter is not None:
            self.twitter = twitter
        if awards is not None:
            self.awards = awards
        if social_media_info is not None:
            self.social_media_info = social_media_info
        if education_info is not None:
            self.education_info = education_info
        if photos is not None:
            self.photos = photos
        if draft is not None:
            self.draft = draft
        if additional_bio is not None:
            self.additional_bio = additional_bio
        if phonetic_name is not None:
            self.phonetic_name = phonetic_name
        if nationality is not None:
            self.nationality = nationality
        if bat_side is not None:
            self.bat_side = bat_side
        if pitch_hand is not None:
            self.pitch_hand = pitch_hand
        if mlb_debut_date is not None:
            self.mlb_debut_date = mlb_debut_date
        if batter_pitcher is not None:
            self.batter_pitcher = batter_pitcher
        if note is not None:
            self.note = note
        if name_slug is not None:
            self.name_slug = name_slug
        if name_title is not None:
            self.name_title = name_title
        if name_prefix is not None:
            self.name_prefix = name_prefix
        if name_first_last is not None:
            self.name_first_last = name_first_last
        if first_last_name is not None:
            self.first_last_name = first_last_name
        if last_first_name is not None:
            self.last_first_name = last_first_name
        if last_init_name is not None:
            self.last_init_name = last_init_name
        if init_last_name is not None:
            self.init_last_name = init_last_name
        if full_fml_name is not None:
            self.full_fml_name = full_fml_name
        if full_lfm_name is not None:
            self.full_lfm_name = full_lfm_name
        if strike_zone_top is not None:
            self.strike_zone_top = strike_zone_top
        if strike_zone_bottom is not None:
            self.strike_zone_bottom = strike_zone_bottom
        if alumni_last_season is not None:
            self.alumni_last_season = alumni_last_season
        if language_id is not None:
            self.language_id = language_id
        if transactions is not None:
            self.transactions = transactions
        if drafts is not None:
            self.drafts = drafts
        if articles is not None:
            self.articles = articles
        if videos is not None:
            self.videos = videos
        if mixed_feed is not None:
            self.mixed_feed = mixed_feed
        if xref_ids is not None:
            self.xref_ids = xref_ids
        if depth_charts is not None:
            self.depth_charts = depth_charts
        if next_starts is not None:
            self.next_starts = next_starts
        if rookie_seasons is not None:
            self.rookie_seasons = rookie_seasons
        if has_stats is not None:
            self.has_stats = has_stats
        if relation is not None:
            self.relation = relation
        if pitcher is not None:
            self.pitcher = pitcher
        if fielder is not None:
            self.fielder = fielder
        if hydrated_social is not None:
            self.hydrated_social = hydrated_social
        if hydrated_education is not None:
            self.hydrated_education = hydrated_education
        if hydrated_stats is not None:
            self.hydrated_stats = hydrated_stats
        if hydrated_current_team is not None:
            self.hydrated_current_team = hydrated_current_team
        if hydrated_team is not None:
            self.hydrated_team = hydrated_team
        if hydrated_awards is not None:
            self.hydrated_awards = hydrated_awards
        if hydrated_person_roster_entries is not None:
            self.hydrated_person_roster_entries = hydrated_person_roster_entries
        if hydrated_person_jobs_entries is not None:
            self.hydrated_person_jobs_entries = hydrated_person_jobs_entries
        if hydrated_relatives is not None:
            self.hydrated_relatives = hydrated_relatives
        if draft_prospects is not None:
            self.draft_prospects = draft_prospects
        if hydrated_depth_charts is not None:
            self.hydrated_depth_charts = hydrated_depth_charts
        if hydrated_next_starts is not None:
            self.hydrated_next_starts = hydrated_next_starts
        if hydrated_player_photos is not None:
            self.hydrated_player_photos = hydrated_player_photos
        if hydrated_articles is not None:
            self.hydrated_articles = hydrated_articles
        if hydrated_videos is not None:
            self.hydrated_videos = hydrated_videos
        if hydrated_mixed_feed is not None:
            self.hydrated_mixed_feed = hydrated_mixed_feed
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this Relative.  # noqa: E501


        :return: The requesting_user_role of this Relative.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this Relative.


        :param requesting_user_role: The requesting_user_role of this Relative.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def primary_position(self):
        """Gets the primary_position of this Relative.  # noqa: E501


        :return: The primary_position of this Relative.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._primary_position

    @primary_position.setter
    def primary_position(self, primary_position):
        """Sets the primary_position of this Relative.


        :param primary_position: The primary_position of this Relative.  # noqa: E501
        :type: BaseballPosition
        """

        self._primary_position = primary_position

    @property
    def stats(self):
        """Gets the stats of this Relative.  # noqa: E501


        :return: The stats of this Relative.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Relative.


        :param stats: The stats of this Relative.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    @property
    def other_names(self):
        """Gets the other_names of this Relative.  # noqa: E501


        :return: The other_names of this Relative.  # noqa: E501
        :rtype: OtherNames
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this Relative.


        :param other_names: The other_names of this Relative.  # noqa: E501
        :type: OtherNames
        """

        self._other_names = other_names

    @property
    def id(self):
        """Gets the id of this Relative.  # noqa: E501


        :return: The id of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relative.


        :param id: The id of this Relative.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Relative.  # noqa: E501


        :return: The first_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Relative.


        :param first_name: The first_name of this Relative.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def use_name(self):
        """Gets the use_name of this Relative.  # noqa: E501


        :return: The use_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._use_name

    @use_name.setter
    def use_name(self, use_name):
        """Sets the use_name of this Relative.


        :param use_name: The use_name of this Relative.  # noqa: E501
        :type: str
        """

        self._use_name = use_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Relative.  # noqa: E501


        :return: The middle_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Relative.


        :param middle_name: The middle_name of this Relative.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this Relative.  # noqa: E501


        :return: The last_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Relative.


        :param last_name: The last_name of this Relative.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def use_last_name(self):
        """Gets the use_last_name of this Relative.  # noqa: E501


        :return: The use_last_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._use_last_name

    @use_last_name.setter
    def use_last_name(self, use_last_name):
        """Sets the use_last_name of this Relative.


        :param use_last_name: The use_last_name of this Relative.  # noqa: E501
        :type: str
        """

        self._use_last_name = use_last_name

    @property
    def nick_name(self):
        """Gets the nick_name of this Relative.  # noqa: E501


        :return: The nick_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this Relative.


        :param nick_name: The nick_name of this Relative.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def nick_names(self):
        """Gets the nick_names of this Relative.  # noqa: E501


        :return: The nick_names of this Relative.  # noqa: E501
        :rtype: list[str]
        """
        return self._nick_names

    @nick_names.setter
    def nick_names(self, nick_names):
        """Sets the nick_names of this Relative.


        :param nick_names: The nick_names of this Relative.  # noqa: E501
        :type: list[str]
        """

        self._nick_names = nick_names

    @property
    def boxscore_name(self):
        """Gets the boxscore_name of this Relative.  # noqa: E501


        :return: The boxscore_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._boxscore_name

    @boxscore_name.setter
    def boxscore_name(self, boxscore_name):
        """Sets the boxscore_name of this Relative.


        :param boxscore_name: The boxscore_name of this Relative.  # noqa: E501
        :type: str
        """

        self._boxscore_name = boxscore_name

    @property
    def primary_number(self):
        """Gets the primary_number of this Relative.  # noqa: E501


        :return: The primary_number of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._primary_number

    @primary_number.setter
    def primary_number(self, primary_number):
        """Sets the primary_number of this Relative.


        :param primary_number: The primary_number of this Relative.  # noqa: E501
        :type: str
        """

        self._primary_number = primary_number

    @property
    def roster_number(self):
        """Gets the roster_number of this Relative.  # noqa: E501


        :return: The roster_number of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._roster_number

    @roster_number.setter
    def roster_number(self, roster_number):
        """Sets the roster_number of this Relative.


        :param roster_number: The roster_number of this Relative.  # noqa: E501
        :type: str
        """

        self._roster_number = roster_number

    @property
    def draft_year(self):
        """Gets the draft_year of this Relative.  # noqa: E501


        :return: The draft_year of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._draft_year

    @draft_year.setter
    def draft_year(self, draft_year):
        """Sets the draft_year of this Relative.


        :param draft_year: The draft_year of this Relative.  # noqa: E501
        :type: int
        """

        self._draft_year = draft_year

    @property
    def age(self):
        """Gets the age of this Relative.  # noqa: E501


        :return: The age of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Relative.


        :param age: The age of this Relative.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def birth_city(self):
        """Gets the birth_city of this Relative.  # noqa: E501


        :return: The birth_city of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this Relative.


        :param birth_city: The birth_city of this Relative.  # noqa: E501
        :type: str
        """

        self._birth_city = birth_city

    @property
    def birth_state_province(self):
        """Gets the birth_state_province of this Relative.  # noqa: E501


        :return: The birth_state_province of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._birth_state_province

    @birth_state_province.setter
    def birth_state_province(self, birth_state_province):
        """Sets the birth_state_province of this Relative.


        :param birth_state_province: The birth_state_province of this Relative.  # noqa: E501
        :type: str
        """

        self._birth_state_province = birth_state_province

    @property
    def birth_country(self):
        """Gets the birth_country of this Relative.  # noqa: E501


        :return: The birth_country of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this Relative.


        :param birth_country: The birth_country of this Relative.  # noqa: E501
        :type: str
        """

        self._birth_country = birth_country

    @property
    def birth_date(self):
        """Gets the birth_date of this Relative.  # noqa: E501


        :return: The birth_date of this Relative.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Relative.


        :param birth_date: The birth_date of this Relative.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def death_city(self):
        """Gets the death_city of this Relative.  # noqa: E501


        :return: The death_city of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._death_city

    @death_city.setter
    def death_city(self, death_city):
        """Sets the death_city of this Relative.


        :param death_city: The death_city of this Relative.  # noqa: E501
        :type: str
        """

        self._death_city = death_city

    @property
    def death_state_province(self):
        """Gets the death_state_province of this Relative.  # noqa: E501


        :return: The death_state_province of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._death_state_province

    @death_state_province.setter
    def death_state_province(self, death_state_province):
        """Sets the death_state_province of this Relative.


        :param death_state_province: The death_state_province of this Relative.  # noqa: E501
        :type: str
        """

        self._death_state_province = death_state_province

    @property
    def death_country(self):
        """Gets the death_country of this Relative.  # noqa: E501


        :return: The death_country of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._death_country

    @death_country.setter
    def death_country(self, death_country):
        """Sets the death_country of this Relative.


        :param death_country: The death_country of this Relative.  # noqa: E501
        :type: str
        """

        self._death_country = death_country

    @property
    def death_date(self):
        """Gets the death_date of this Relative.  # noqa: E501


        :return: The death_date of this Relative.  # noqa: E501
        :rtype: date
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this Relative.


        :param death_date: The death_date of this Relative.  # noqa: E501
        :type: date
        """

        self._death_date = death_date

    @property
    def last_played_date(self):
        """Gets the last_played_date of this Relative.  # noqa: E501


        :return: The last_played_date of this Relative.  # noqa: E501
        :rtype: date
        """
        return self._last_played_date

    @last_played_date.setter
    def last_played_date(self, last_played_date):
        """Sets the last_played_date of this Relative.


        :param last_played_date: The last_played_date of this Relative.  # noqa: E501
        :type: date
        """

        self._last_played_date = last_played_date

    @property
    def pronunciation(self):
        """Gets the pronunciation of this Relative.  # noqa: E501


        :return: The pronunciation of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._pronunciation

    @pronunciation.setter
    def pronunciation(self, pronunciation):
        """Sets the pronunciation of this Relative.


        :param pronunciation: The pronunciation of this Relative.  # noqa: E501
        :type: str
        """

        self._pronunciation = pronunciation

    @property
    def full_name(self):
        """Gets the full_name of this Relative.  # noqa: E501


        :return: The full_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Relative.


        :param full_name: The full_name of this Relative.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def height(self):
        """Gets the height of this Relative.  # noqa: E501


        :return: The height of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Relative.


        :param height: The height of this Relative.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def height_feet(self):
        """Gets the height_feet of this Relative.  # noqa: E501


        :return: The height_feet of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._height_feet

    @height_feet.setter
    def height_feet(self, height_feet):
        """Sets the height_feet of this Relative.


        :param height_feet: The height_feet of this Relative.  # noqa: E501
        :type: int
        """

        self._height_feet = height_feet

    @property
    def height_inches(self):
        """Gets the height_inches of this Relative.  # noqa: E501


        :return: The height_inches of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._height_inches

    @height_inches.setter
    def height_inches(self, height_inches):
        """Sets the height_inches of this Relative.


        :param height_inches: The height_inches of this Relative.  # noqa: E501
        :type: int
        """

        self._height_inches = height_inches

    @property
    def weight(self):
        """Gets the weight of this Relative.  # noqa: E501


        :return: The weight of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Relative.


        :param weight: The weight of this Relative.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def current_team(self):
        """Gets the current_team of this Relative.  # noqa: E501


        :return: The current_team of this Relative.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._current_team

    @current_team.setter
    def current_team(self, current_team):
        """Sets the current_team of this Relative.


        :param current_team: The current_team of this Relative.  # noqa: E501
        :type: BaseballTeam
        """

        self._current_team = current_team

    @property
    def is_rookie(self):
        """Gets the is_rookie of this Relative.  # noqa: E501


        :return: The is_rookie of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_rookie

    @is_rookie.setter
    def is_rookie(self, is_rookie):
        """Sets the is_rookie of this Relative.


        :param is_rookie: The is_rookie of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_rookie = is_rookie

    @property
    def is_active(self):
        """Gets the is_active of this Relative.  # noqa: E501


        :return: The is_active of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Relative.


        :param is_active: The is_active of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def gender(self):
        """Gets the gender of this Relative.  # noqa: E501


        :return: The gender of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Relative.


        :param gender: The gender of this Relative.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def name_matrilineal(self):
        """Gets the name_matrilineal of this Relative.  # noqa: E501


        :return: The name_matrilineal of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._name_matrilineal

    @name_matrilineal.setter
    def name_matrilineal(self, name_matrilineal):
        """Sets the name_matrilineal of this Relative.


        :param name_matrilineal: The name_matrilineal of this Relative.  # noqa: E501
        :type: str
        """

        self._name_matrilineal = name_matrilineal

    @property
    def is_player(self):
        """Gets the is_player of this Relative.  # noqa: E501


        :return: The is_player of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_player

    @is_player.setter
    def is_player(self, is_player):
        """Sets the is_player of this Relative.


        :param is_player: The is_player of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_player = is_player

    @property
    def is_verified(self):
        """Gets the is_verified of this Relative.  # noqa: E501


        :return: The is_verified of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Relative.


        :param is_verified: The is_verified of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def is_alternate_captain(self):
        """Gets the is_alternate_captain of this Relative.  # noqa: E501


        :return: The is_alternate_captain of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_alternate_captain

    @is_alternate_captain.setter
    def is_alternate_captain(self, is_alternate_captain):
        """Sets the is_alternate_captain of this Relative.


        :param is_alternate_captain: The is_alternate_captain of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_alternate_captain = is_alternate_captain

    @property
    def is_captain(self):
        """Gets the is_captain of this Relative.  # noqa: E501


        :return: The is_captain of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._is_captain

    @is_captain.setter
    def is_captain(self, is_captain):
        """Sets the is_captain of this Relative.


        :param is_captain: The is_captain of this Relative.  # noqa: E501
        :type: bool
        """

        self._is_captain = is_captain

    @property
    def twitter(self):
        """Gets the twitter of this Relative.  # noqa: E501


        :return: The twitter of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Relative.


        :param twitter: The twitter of this Relative.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def awards(self):
        """Gets the awards of this Relative.  # noqa: E501


        :return: The awards of this Relative.  # noqa: E501
        :rtype: list[Award]
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this Relative.


        :param awards: The awards of this Relative.  # noqa: E501
        :type: list[Award]
        """

        self._awards = awards

    @property
    def social_media_info(self):
        """Gets the social_media_info of this Relative.  # noqa: E501


        :return: The social_media_info of this Relative.  # noqa: E501
        :rtype: SocialMediaInfo
        """
        return self._social_media_info

    @social_media_info.setter
    def social_media_info(self, social_media_info):
        """Sets the social_media_info of this Relative.


        :param social_media_info: The social_media_info of this Relative.  # noqa: E501
        :type: SocialMediaInfo
        """

        self._social_media_info = social_media_info

    @property
    def education_info(self):
        """Gets the education_info of this Relative.  # noqa: E501


        :return: The education_info of this Relative.  # noqa: E501
        :rtype: EducationInfo
        """
        return self._education_info

    @education_info.setter
    def education_info(self, education_info):
        """Sets the education_info of this Relative.


        :param education_info: The education_info of this Relative.  # noqa: E501
        :type: EducationInfo
        """

        self._education_info = education_info

    @property
    def photos(self):
        """Gets the photos of this Relative.  # noqa: E501


        :return: The photos of this Relative.  # noqa: E501
        :rtype: list[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Relative.


        :param photos: The photos of this Relative.  # noqa: E501
        :type: list[Photo]
        """

        self._photos = photos

    @property
    def draft(self):
        """Gets the draft of this Relative.  # noqa: E501


        :return: The draft of this Relative.  # noqa: E501
        :rtype: list[PlayerDraftInfo]
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Relative.


        :param draft: The draft of this Relative.  # noqa: E501
        :type: list[PlayerDraftInfo]
        """

        self._draft = draft

    @property
    def additional_bio(self):
        """Gets the additional_bio of this Relative.  # noqa: E501


        :return: The additional_bio of this Relative.  # noqa: E501
        :rtype: AdditionalBio
        """
        return self._additional_bio

    @additional_bio.setter
    def additional_bio(self, additional_bio):
        """Sets the additional_bio of this Relative.


        :param additional_bio: The additional_bio of this Relative.  # noqa: E501
        :type: AdditionalBio
        """

        self._additional_bio = additional_bio

    @property
    def phonetic_name(self):
        """Gets the phonetic_name of this Relative.  # noqa: E501


        :return: The phonetic_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._phonetic_name

    @phonetic_name.setter
    def phonetic_name(self, phonetic_name):
        """Sets the phonetic_name of this Relative.


        :param phonetic_name: The phonetic_name of this Relative.  # noqa: E501
        :type: str
        """

        self._phonetic_name = phonetic_name

    @property
    def nationality(self):
        """Gets the nationality of this Relative.  # noqa: E501


        :return: The nationality of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Relative.


        :param nationality: The nationality of this Relative.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def bat_side(self):
        """Gets the bat_side of this Relative.  # noqa: E501


        :return: The bat_side of this Relative.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._bat_side

    @bat_side.setter
    def bat_side(self, bat_side):
        """Sets the bat_side of this Relative.


        :param bat_side: The bat_side of this Relative.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._bat_side = bat_side

    @property
    def pitch_hand(self):
        """Gets the pitch_hand of this Relative.  # noqa: E501


        :return: The pitch_hand of this Relative.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._pitch_hand

    @pitch_hand.setter
    def pitch_hand(self, pitch_hand):
        """Sets the pitch_hand of this Relative.


        :param pitch_hand: The pitch_hand of this Relative.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._pitch_hand = pitch_hand

    @property
    def mlb_debut_date(self):
        """Gets the mlb_debut_date of this Relative.  # noqa: E501


        :return: The mlb_debut_date of this Relative.  # noqa: E501
        :rtype: date
        """
        return self._mlb_debut_date

    @mlb_debut_date.setter
    def mlb_debut_date(self, mlb_debut_date):
        """Sets the mlb_debut_date of this Relative.


        :param mlb_debut_date: The mlb_debut_date of this Relative.  # noqa: E501
        :type: date
        """

        self._mlb_debut_date = mlb_debut_date

    @property
    def batter_pitcher(self):
        """Gets the batter_pitcher of this Relative.  # noqa: E501


        :return: The batter_pitcher of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._batter_pitcher

    @batter_pitcher.setter
    def batter_pitcher(self, batter_pitcher):
        """Sets the batter_pitcher of this Relative.


        :param batter_pitcher: The batter_pitcher of this Relative.  # noqa: E501
        :type: str
        """

        self._batter_pitcher = batter_pitcher

    @property
    def note(self):
        """Gets the note of this Relative.  # noqa: E501


        :return: The note of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Relative.


        :param note: The note of this Relative.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def name_slug(self):
        """Gets the name_slug of this Relative.  # noqa: E501


        :return: The name_slug of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._name_slug

    @name_slug.setter
    def name_slug(self, name_slug):
        """Sets the name_slug of this Relative.


        :param name_slug: The name_slug of this Relative.  # noqa: E501
        :type: str
        """

        self._name_slug = name_slug

    @property
    def name_title(self):
        """Gets the name_title of this Relative.  # noqa: E501


        :return: The name_title of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._name_title

    @name_title.setter
    def name_title(self, name_title):
        """Sets the name_title of this Relative.


        :param name_title: The name_title of this Relative.  # noqa: E501
        :type: str
        """

        self._name_title = name_title

    @property
    def name_prefix(self):
        """Gets the name_prefix of this Relative.  # noqa: E501


        :return: The name_prefix of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this Relative.


        :param name_prefix: The name_prefix of this Relative.  # noqa: E501
        :type: str
        """

        self._name_prefix = name_prefix

    @property
    def name_first_last(self):
        """Gets the name_first_last of this Relative.  # noqa: E501


        :return: The name_first_last of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._name_first_last

    @name_first_last.setter
    def name_first_last(self, name_first_last):
        """Sets the name_first_last of this Relative.


        :param name_first_last: The name_first_last of this Relative.  # noqa: E501
        :type: str
        """

        self._name_first_last = name_first_last

    @property
    def first_last_name(self):
        """Gets the first_last_name of this Relative.  # noqa: E501


        :return: The first_last_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._first_last_name

    @first_last_name.setter
    def first_last_name(self, first_last_name):
        """Sets the first_last_name of this Relative.


        :param first_last_name: The first_last_name of this Relative.  # noqa: E501
        :type: str
        """

        self._first_last_name = first_last_name

    @property
    def last_first_name(self):
        """Gets the last_first_name of this Relative.  # noqa: E501


        :return: The last_first_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._last_first_name

    @last_first_name.setter
    def last_first_name(self, last_first_name):
        """Sets the last_first_name of this Relative.


        :param last_first_name: The last_first_name of this Relative.  # noqa: E501
        :type: str
        """

        self._last_first_name = last_first_name

    @property
    def last_init_name(self):
        """Gets the last_init_name of this Relative.  # noqa: E501


        :return: The last_init_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._last_init_name

    @last_init_name.setter
    def last_init_name(self, last_init_name):
        """Sets the last_init_name of this Relative.


        :param last_init_name: The last_init_name of this Relative.  # noqa: E501
        :type: str
        """

        self._last_init_name = last_init_name

    @property
    def init_last_name(self):
        """Gets the init_last_name of this Relative.  # noqa: E501


        :return: The init_last_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._init_last_name

    @init_last_name.setter
    def init_last_name(self, init_last_name):
        """Sets the init_last_name of this Relative.


        :param init_last_name: The init_last_name of this Relative.  # noqa: E501
        :type: str
        """

        self._init_last_name = init_last_name

    @property
    def full_fml_name(self):
        """Gets the full_fml_name of this Relative.  # noqa: E501


        :return: The full_fml_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._full_fml_name

    @full_fml_name.setter
    def full_fml_name(self, full_fml_name):
        """Sets the full_fml_name of this Relative.


        :param full_fml_name: The full_fml_name of this Relative.  # noqa: E501
        :type: str
        """

        self._full_fml_name = full_fml_name

    @property
    def full_lfm_name(self):
        """Gets the full_lfm_name of this Relative.  # noqa: E501


        :return: The full_lfm_name of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._full_lfm_name

    @full_lfm_name.setter
    def full_lfm_name(self, full_lfm_name):
        """Sets the full_lfm_name of this Relative.


        :param full_lfm_name: The full_lfm_name of this Relative.  # noqa: E501
        :type: str
        """

        self._full_lfm_name = full_lfm_name

    @property
    def strike_zone_top(self):
        """Gets the strike_zone_top of this Relative.  # noqa: E501


        :return: The strike_zone_top of this Relative.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_top

    @strike_zone_top.setter
    def strike_zone_top(self, strike_zone_top):
        """Sets the strike_zone_top of this Relative.


        :param strike_zone_top: The strike_zone_top of this Relative.  # noqa: E501
        :type: float
        """

        self._strike_zone_top = strike_zone_top

    @property
    def strike_zone_bottom(self):
        """Gets the strike_zone_bottom of this Relative.  # noqa: E501


        :return: The strike_zone_bottom of this Relative.  # noqa: E501
        :rtype: float
        """
        return self._strike_zone_bottom

    @strike_zone_bottom.setter
    def strike_zone_bottom(self, strike_zone_bottom):
        """Sets the strike_zone_bottom of this Relative.


        :param strike_zone_bottom: The strike_zone_bottom of this Relative.  # noqa: E501
        :type: float
        """

        self._strike_zone_bottom = strike_zone_bottom

    @property
    def alumni_last_season(self):
        """Gets the alumni_last_season of this Relative.  # noqa: E501


        :return: The alumni_last_season of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._alumni_last_season

    @alumni_last_season.setter
    def alumni_last_season(self, alumni_last_season):
        """Sets the alumni_last_season of this Relative.


        :param alumni_last_season: The alumni_last_season of this Relative.  # noqa: E501
        :type: str
        """

        self._alumni_last_season = alumni_last_season

    @property
    def language_id(self):
        """Gets the language_id of this Relative.  # noqa: E501


        :return: The language_id of this Relative.  # noqa: E501
        :rtype: int
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this Relative.


        :param language_id: The language_id of this Relative.  # noqa: E501
        :type: int
        """

        self._language_id = language_id

    @property
    def transactions(self):
        """Gets the transactions of this Relative.  # noqa: E501


        :return: The transactions of this Relative.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Relative.


        :param transactions: The transactions of this Relative.  # noqa: E501
        :type: list[Transaction]
        """

        self._transactions = transactions

    @property
    def drafts(self):
        """Gets the drafts of this Relative.  # noqa: E501


        :return: The drafts of this Relative.  # noqa: E501
        :rtype: list[BaseballDraftProspect]
        """
        return self._drafts

    @drafts.setter
    def drafts(self, drafts):
        """Sets the drafts of this Relative.


        :param drafts: The drafts of this Relative.  # noqa: E501
        :type: list[BaseballDraftProspect]
        """

        self._drafts = drafts

    @property
    def articles(self):
        """Gets the articles of this Relative.  # noqa: E501


        :return: The articles of this Relative.  # noqa: E501
        :rtype: list[Article]
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this Relative.


        :param articles: The articles of this Relative.  # noqa: E501
        :type: list[Article]
        """

        self._articles = articles

    @property
    def videos(self):
        """Gets the videos of this Relative.  # noqa: E501


        :return: The videos of this Relative.  # noqa: E501
        :rtype: list[Video]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this Relative.


        :param videos: The videos of this Relative.  # noqa: E501
        :type: list[Video]
        """

        self._videos = videos

    @property
    def mixed_feed(self):
        """Gets the mixed_feed of this Relative.  # noqa: E501


        :return: The mixed_feed of this Relative.  # noqa: E501
        :rtype: list[IFeed]
        """
        return self._mixed_feed

    @mixed_feed.setter
    def mixed_feed(self, mixed_feed):
        """Sets the mixed_feed of this Relative.


        :param mixed_feed: The mixed_feed of this Relative.  # noqa: E501
        :type: list[IFeed]
        """

        self._mixed_feed = mixed_feed

    @property
    def xref_ids(self):
        """Gets the xref_ids of this Relative.  # noqa: E501


        :return: The xref_ids of this Relative.  # noqa: E501
        :rtype: list[XrefId]
        """
        return self._xref_ids

    @xref_ids.setter
    def xref_ids(self, xref_ids):
        """Sets the xref_ids of this Relative.


        :param xref_ids: The xref_ids of this Relative.  # noqa: E501
        :type: list[XrefId]
        """

        self._xref_ids = xref_ids

    @property
    def depth_charts(self):
        """Gets the depth_charts of this Relative.  # noqa: E501


        :return: The depth_charts of this Relative.  # noqa: E501
        :rtype: list[DepthChart]
        """
        return self._depth_charts

    @depth_charts.setter
    def depth_charts(self, depth_charts):
        """Sets the depth_charts of this Relative.


        :param depth_charts: The depth_charts of this Relative.  # noqa: E501
        :type: list[DepthChart]
        """

        self._depth_charts = depth_charts

    @property
    def next_starts(self):
        """Gets the next_starts of this Relative.  # noqa: E501


        :return: The next_starts of this Relative.  # noqa: E501
        :rtype: list[BaseballScheduleItem]
        """
        return self._next_starts

    @next_starts.setter
    def next_starts(self, next_starts):
        """Sets the next_starts of this Relative.


        :param next_starts: The next_starts of this Relative.  # noqa: E501
        :type: list[BaseballScheduleItem]
        """

        self._next_starts = next_starts

    @property
    def rookie_seasons(self):
        """Gets the rookie_seasons of this Relative.  # noqa: E501


        :return: The rookie_seasons of this Relative.  # noqa: E501
        :rtype: list[str]
        """
        return self._rookie_seasons

    @rookie_seasons.setter
    def rookie_seasons(self, rookie_seasons):
        """Sets the rookie_seasons of this Relative.


        :param rookie_seasons: The rookie_seasons of this Relative.  # noqa: E501
        :type: list[str]
        """

        self._rookie_seasons = rookie_seasons

    @property
    def has_stats(self):
        """Gets the has_stats of this Relative.  # noqa: E501


        :return: The has_stats of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._has_stats

    @has_stats.setter
    def has_stats(self, has_stats):
        """Sets the has_stats of this Relative.


        :param has_stats: The has_stats of this Relative.  # noqa: E501
        :type: bool
        """

        self._has_stats = has_stats

    @property
    def relation(self):
        """Gets the relation of this Relative.  # noqa: E501


        :return: The relation of this Relative.  # noqa: E501
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Relative.


        :param relation: The relation of this Relative.  # noqa: E501
        :type: str
        """

        self._relation = relation

    @property
    def pitcher(self):
        """Gets the pitcher of this Relative.  # noqa: E501


        :return: The pitcher of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this Relative.


        :param pitcher: The pitcher of this Relative.  # noqa: E501
        :type: bool
        """

        self._pitcher = pitcher

    @property
    def fielder(self):
        """Gets the fielder of this Relative.  # noqa: E501


        :return: The fielder of this Relative.  # noqa: E501
        :rtype: bool
        """
        return self._fielder

    @fielder.setter
    def fielder(self, fielder):
        """Sets the fielder of this Relative.


        :param fielder: The fielder of this Relative.  # noqa: E501
        :type: bool
        """

        self._fielder = fielder

    @property
    def hydrated_social(self):
        """Gets the hydrated_social of this Relative.  # noqa: E501


        :return: The hydrated_social of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_social

    @hydrated_social.setter
    def hydrated_social(self, hydrated_social):
        """Sets the hydrated_social of this Relative.


        :param hydrated_social: The hydrated_social of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_social = hydrated_social

    @property
    def hydrated_education(self):
        """Gets the hydrated_education of this Relative.  # noqa: E501


        :return: The hydrated_education of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_education

    @hydrated_education.setter
    def hydrated_education(self, hydrated_education):
        """Sets the hydrated_education of this Relative.


        :param hydrated_education: The hydrated_education of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_education = hydrated_education

    @property
    def hydrated_stats(self):
        """Gets the hydrated_stats of this Relative.  # noqa: E501


        :return: The hydrated_stats of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_stats

    @hydrated_stats.setter
    def hydrated_stats(self, hydrated_stats):
        """Sets the hydrated_stats of this Relative.


        :param hydrated_stats: The hydrated_stats of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_stats = hydrated_stats

    @property
    def hydrated_current_team(self):
        """Gets the hydrated_current_team of this Relative.  # noqa: E501


        :return: The hydrated_current_team of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_current_team

    @hydrated_current_team.setter
    def hydrated_current_team(self, hydrated_current_team):
        """Sets the hydrated_current_team of this Relative.


        :param hydrated_current_team: The hydrated_current_team of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_current_team = hydrated_current_team

    @property
    def hydrated_team(self):
        """Gets the hydrated_team of this Relative.  # noqa: E501


        :return: The hydrated_team of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_team

    @hydrated_team.setter
    def hydrated_team(self, hydrated_team):
        """Sets the hydrated_team of this Relative.


        :param hydrated_team: The hydrated_team of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_team = hydrated_team

    @property
    def hydrated_awards(self):
        """Gets the hydrated_awards of this Relative.  # noqa: E501


        :return: The hydrated_awards of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_awards

    @hydrated_awards.setter
    def hydrated_awards(self, hydrated_awards):
        """Sets the hydrated_awards of this Relative.


        :param hydrated_awards: The hydrated_awards of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_awards = hydrated_awards

    @property
    def hydrated_person_roster_entries(self):
        """Gets the hydrated_person_roster_entries of this Relative.  # noqa: E501


        :return: The hydrated_person_roster_entries of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_person_roster_entries

    @hydrated_person_roster_entries.setter
    def hydrated_person_roster_entries(self, hydrated_person_roster_entries):
        """Sets the hydrated_person_roster_entries of this Relative.


        :param hydrated_person_roster_entries: The hydrated_person_roster_entries of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_person_roster_entries = hydrated_person_roster_entries

    @property
    def hydrated_person_jobs_entries(self):
        """Gets the hydrated_person_jobs_entries of this Relative.  # noqa: E501


        :return: The hydrated_person_jobs_entries of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_person_jobs_entries

    @hydrated_person_jobs_entries.setter
    def hydrated_person_jobs_entries(self, hydrated_person_jobs_entries):
        """Sets the hydrated_person_jobs_entries of this Relative.


        :param hydrated_person_jobs_entries: The hydrated_person_jobs_entries of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_person_jobs_entries = hydrated_person_jobs_entries

    @property
    def hydrated_relatives(self):
        """Gets the hydrated_relatives of this Relative.  # noqa: E501


        :return: The hydrated_relatives of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_relatives

    @hydrated_relatives.setter
    def hydrated_relatives(self, hydrated_relatives):
        """Sets the hydrated_relatives of this Relative.


        :param hydrated_relatives: The hydrated_relatives of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_relatives = hydrated_relatives

    @property
    def draft_prospects(self):
        """Gets the draft_prospects of this Relative.  # noqa: E501


        :return: The draft_prospects of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._draft_prospects

    @draft_prospects.setter
    def draft_prospects(self, draft_prospects):
        """Sets the draft_prospects of this Relative.


        :param draft_prospects: The draft_prospects of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._draft_prospects = draft_prospects

    @property
    def hydrated_depth_charts(self):
        """Gets the hydrated_depth_charts of this Relative.  # noqa: E501


        :return: The hydrated_depth_charts of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_depth_charts

    @hydrated_depth_charts.setter
    def hydrated_depth_charts(self, hydrated_depth_charts):
        """Sets the hydrated_depth_charts of this Relative.


        :param hydrated_depth_charts: The hydrated_depth_charts of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_depth_charts = hydrated_depth_charts

    @property
    def hydrated_next_starts(self):
        """Gets the hydrated_next_starts of this Relative.  # noqa: E501


        :return: The hydrated_next_starts of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_next_starts

    @hydrated_next_starts.setter
    def hydrated_next_starts(self, hydrated_next_starts):
        """Sets the hydrated_next_starts of this Relative.


        :param hydrated_next_starts: The hydrated_next_starts of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_next_starts = hydrated_next_starts

    @property
    def hydrated_player_photos(self):
        """Gets the hydrated_player_photos of this Relative.  # noqa: E501


        :return: The hydrated_player_photos of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_player_photos

    @hydrated_player_photos.setter
    def hydrated_player_photos(self, hydrated_player_photos):
        """Sets the hydrated_player_photos of this Relative.


        :param hydrated_player_photos: The hydrated_player_photos of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_player_photos = hydrated_player_photos

    @property
    def hydrated_articles(self):
        """Gets the hydrated_articles of this Relative.  # noqa: E501


        :return: The hydrated_articles of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_articles

    @hydrated_articles.setter
    def hydrated_articles(self, hydrated_articles):
        """Sets the hydrated_articles of this Relative.


        :param hydrated_articles: The hydrated_articles of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_articles = hydrated_articles

    @property
    def hydrated_videos(self):
        """Gets the hydrated_videos of this Relative.  # noqa: E501


        :return: The hydrated_videos of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_videos

    @hydrated_videos.setter
    def hydrated_videos(self, hydrated_videos):
        """Sets the hydrated_videos of this Relative.


        :param hydrated_videos: The hydrated_videos of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_videos = hydrated_videos

    @property
    def hydrated_mixed_feed(self):
        """Gets the hydrated_mixed_feed of this Relative.  # noqa: E501


        :return: The hydrated_mixed_feed of this Relative.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_mixed_feed

    @hydrated_mixed_feed.setter
    def hydrated_mixed_feed(self, hydrated_mixed_feed):
        """Sets the hydrated_mixed_feed of this Relative.


        :param hydrated_mixed_feed: The hydrated_mixed_feed of this Relative.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_mixed_feed = hydrated_mixed_feed

    @property
    def user_privileges(self):
        """Gets the user_privileges of this Relative.  # noqa: E501


        :return: The user_privileges of this Relative.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this Relative.


        :param user_privileges: The user_privileges of this Relative.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Relative, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relative):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
