# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProspectListRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'total_size': 'int',
        'queried_size': 'int',
        'returned_size': 'int',
        'offset': 'int',
        'prospects': 'list[BaseballDraftProspectRestObject]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'total_size': 'totalSize',
        'queried_size': 'queriedSize',
        'returned_size': 'returnedSize',
        'offset': 'offset',
        'prospects': 'prospects'
    }

    def __init__(self, copyright=None, total_size=None, queried_size=None, returned_size=None, offset=None, prospects=None):  # noqa: E501
        """ProspectListRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._total_size = None
        self._queried_size = None
        self._returned_size = None
        self._offset = None
        self._prospects = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if total_size is not None:
            self.total_size = total_size
        if queried_size is not None:
            self.queried_size = queried_size
        if returned_size is not None:
            self.returned_size = returned_size
        if offset is not None:
            self.offset = offset
        if prospects is not None:
            self.prospects = prospects

    @property
    def copyright(self):
        """Gets the copyright of this ProspectListRestObject.  # noqa: E501


        :return: The copyright of this ProspectListRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ProspectListRestObject.


        :param copyright: The copyright of this ProspectListRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def total_size(self):
        """Gets the total_size of this ProspectListRestObject.  # noqa: E501


        :return: The total_size of this ProspectListRestObject.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ProspectListRestObject.


        :param total_size: The total_size of this ProspectListRestObject.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def queried_size(self):
        """Gets the queried_size of this ProspectListRestObject.  # noqa: E501


        :return: The queried_size of this ProspectListRestObject.  # noqa: E501
        :rtype: int
        """
        return self._queried_size

    @queried_size.setter
    def queried_size(self, queried_size):
        """Sets the queried_size of this ProspectListRestObject.


        :param queried_size: The queried_size of this ProspectListRestObject.  # noqa: E501
        :type: int
        """

        self._queried_size = queried_size

    @property
    def returned_size(self):
        """Gets the returned_size of this ProspectListRestObject.  # noqa: E501


        :return: The returned_size of this ProspectListRestObject.  # noqa: E501
        :rtype: int
        """
        return self._returned_size

    @returned_size.setter
    def returned_size(self, returned_size):
        """Sets the returned_size of this ProspectListRestObject.


        :param returned_size: The returned_size of this ProspectListRestObject.  # noqa: E501
        :type: int
        """

        self._returned_size = returned_size

    @property
    def offset(self):
        """Gets the offset of this ProspectListRestObject.  # noqa: E501


        :return: The offset of this ProspectListRestObject.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ProspectListRestObject.


        :param offset: The offset of this ProspectListRestObject.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def prospects(self):
        """Gets the prospects of this ProspectListRestObject.  # noqa: E501


        :return: The prospects of this ProspectListRestObject.  # noqa: E501
        :rtype: list[BaseballDraftProspectRestObject]
        """
        return self._prospects

    @prospects.setter
    def prospects(self, prospects):
        """Sets the prospects of this ProspectListRestObject.


        :param prospects: The prospects of this ProspectListRestObject.  # noqa: E501
        :type: list[BaseballDraftProspectRestObject]
        """

        self._prospects = prospects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProspectListRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProspectListRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
