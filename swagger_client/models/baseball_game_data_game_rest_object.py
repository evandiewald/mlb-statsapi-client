# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameDataGameRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'pk': 'int',
        'type': 'str',
        'double_header': 'str',
        'id': 'str',
        'gameday_type': 'str',
        'tiebreaker': 'str',
        'game_number': 'int',
        'calendar_event_id': 'str',
        'season': 'str',
        'season_display': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'pk': 'pk',
        'type': 'type',
        'double_header': 'doubleHeader',
        'id': 'id',
        'gameday_type': 'gamedayType',
        'tiebreaker': 'tiebreaker',
        'game_number': 'gameNumber',
        'calendar_event_id': 'calendarEventID',
        'season': 'season',
        'season_display': 'seasonDisplay'
    }

    def __init__(self, copyright=None, pk=None, type=None, double_header=None, id=None, gameday_type=None, tiebreaker=None, game_number=None, calendar_event_id=None, season=None, season_display=None):  # noqa: E501
        """BaseballGameDataGameRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._pk = None
        self._type = None
        self._double_header = None
        self._id = None
        self._gameday_type = None
        self._tiebreaker = None
        self._game_number = None
        self._calendar_event_id = None
        self._season = None
        self._season_display = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if pk is not None:
            self.pk = pk
        if type is not None:
            self.type = type
        if double_header is not None:
            self.double_header = double_header
        if id is not None:
            self.id = id
        if gameday_type is not None:
            self.gameday_type = gameday_type
        if tiebreaker is not None:
            self.tiebreaker = tiebreaker
        if game_number is not None:
            self.game_number = game_number
        if calendar_event_id is not None:
            self.calendar_event_id = calendar_event_id
        if season is not None:
            self.season = season
        if season_display is not None:
            self.season_display = season_display

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameDataGameRestObject.


        :param copyright: The copyright of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def pk(self):
        """Gets the pk of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The pk of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this BaseballGameDataGameRestObject.


        :param pk: The pk of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: int
        """

        self._pk = pk

    @property
    def type(self):
        """Gets the type of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The type of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseballGameDataGameRestObject.


        :param type: The type of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def double_header(self):
        """Gets the double_header of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The double_header of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._double_header

    @double_header.setter
    def double_header(self, double_header):
        """Sets the double_header of this BaseballGameDataGameRestObject.


        :param double_header: The double_header of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._double_header = double_header

    @property
    def id(self):
        """Gets the id of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The id of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseballGameDataGameRestObject.


        :param id: The id of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gameday_type(self):
        """Gets the gameday_type of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The gameday_type of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._gameday_type

    @gameday_type.setter
    def gameday_type(self, gameday_type):
        """Sets the gameday_type of this BaseballGameDataGameRestObject.


        :param gameday_type: The gameday_type of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._gameday_type = gameday_type

    @property
    def tiebreaker(self):
        """Gets the tiebreaker of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The tiebreaker of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._tiebreaker

    @tiebreaker.setter
    def tiebreaker(self, tiebreaker):
        """Sets the tiebreaker of this BaseballGameDataGameRestObject.


        :param tiebreaker: The tiebreaker of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._tiebreaker = tiebreaker

    @property
    def game_number(self):
        """Gets the game_number of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The game_number of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: int
        """
        return self._game_number

    @game_number.setter
    def game_number(self, game_number):
        """Sets the game_number of this BaseballGameDataGameRestObject.


        :param game_number: The game_number of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: int
        """

        self._game_number = game_number

    @property
    def calendar_event_id(self):
        """Gets the calendar_event_id of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The calendar_event_id of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._calendar_event_id

    @calendar_event_id.setter
    def calendar_event_id(self, calendar_event_id):
        """Sets the calendar_event_id of this BaseballGameDataGameRestObject.


        :param calendar_event_id: The calendar_event_id of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._calendar_event_id = calendar_event_id

    @property
    def season(self):
        """Gets the season of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The season of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this BaseballGameDataGameRestObject.


        :param season: The season of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def season_display(self):
        """Gets the season_display of this BaseballGameDataGameRestObject.  # noqa: E501


        :return: The season_display of this BaseballGameDataGameRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season_display

    @season_display.setter
    def season_display(self, season_display):
        """Sets the season_display of this BaseballGameDataGameRestObject.


        :param season_display: The season_display of this BaseballGameDataGameRestObject.  # noqa: E501
        :type: str
        """

        self._season_display = season_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameDataGameRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameDataGameRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
