# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameEventDetailTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        'home_away': 'str',
        'event_id': 'int',
        'team_id': 'int',
        'stat_name': 'str',
        'delta': 'str'
    }

    attribute_map = {
        'player_id': 'playerId',
        'home_away': 'homeAway',
        'event_id': 'eventId',
        'team_id': 'teamId',
        'stat_name': 'stat_name',
        'delta': 'delta'
    }

    def __init__(self, player_id=None, home_away=None, event_id=None, team_id=None, stat_name=None, delta=None):  # noqa: E501
        """GameEventDetailTO - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._home_away = None
        self._event_id = None
        self._team_id = None
        self._stat_name = None
        self._delta = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if home_away is not None:
            self.home_away = home_away
        if event_id is not None:
            self.event_id = event_id
        if team_id is not None:
            self.team_id = team_id
        if stat_name is not None:
            self.stat_name = stat_name
        if delta is not None:
            self.delta = delta

    @property
    def player_id(self):
        """Gets the player_id of this GameEventDetailTO.  # noqa: E501


        :return: The player_id of this GameEventDetailTO.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GameEventDetailTO.


        :param player_id: The player_id of this GameEventDetailTO.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def home_away(self):
        """Gets the home_away of this GameEventDetailTO.  # noqa: E501


        :return: The home_away of this GameEventDetailTO.  # noqa: E501
        :rtype: str
        """
        return self._home_away

    @home_away.setter
    def home_away(self, home_away):
        """Sets the home_away of this GameEventDetailTO.


        :param home_away: The home_away of this GameEventDetailTO.  # noqa: E501
        :type: str
        """

        self._home_away = home_away

    @property
    def event_id(self):
        """Gets the event_id of this GameEventDetailTO.  # noqa: E501


        :return: The event_id of this GameEventDetailTO.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GameEventDetailTO.


        :param event_id: The event_id of this GameEventDetailTO.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def team_id(self):
        """Gets the team_id of this GameEventDetailTO.  # noqa: E501


        :return: The team_id of this GameEventDetailTO.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this GameEventDetailTO.


        :param team_id: The team_id of this GameEventDetailTO.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def stat_name(self):
        """Gets the stat_name of this GameEventDetailTO.  # noqa: E501


        :return: The stat_name of this GameEventDetailTO.  # noqa: E501
        :rtype: str
        """
        return self._stat_name

    @stat_name.setter
    def stat_name(self, stat_name):
        """Sets the stat_name of this GameEventDetailTO.


        :param stat_name: The stat_name of this GameEventDetailTO.  # noqa: E501
        :type: str
        """

        self._stat_name = stat_name

    @property
    def delta(self):
        """Gets the delta of this GameEventDetailTO.  # noqa: E501


        :return: The delta of this GameEventDetailTO.  # noqa: E501
        :rtype: str
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this GameEventDetailTO.


        :param delta: The delta of this GameEventDetailTO.  # noqa: E501
        :type: str
        """

        self._delta = delta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameEventDetailTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameEventDetailTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
