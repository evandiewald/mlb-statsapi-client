# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculatedMetricRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'estimated': 'bool',
        'group': 'str',
        'name': 'str',
        'value': 'JsonNode',
        'value_unrounded': 'str',
        'rank': 'int',
        'average_value': 'float',
        'min_value': 'float',
        'max_value': 'float',
        'num_occurrences': 'int',
        'percentile50_value': 'float',
        'percentile75_value': 'float',
        'percentile90_value': 'float',
        'competitive_value': 'float',
        'num_competitive_occurrences': 'int',
        'unit': 'str',
        'position_id': 'int',
        'player_id': 'int',
        'play_id': 'str',
        'metric_id': 'int',
        'time_code': 'int',
        'description': 'str',
        'base': 'str',
        'is_radar_tracked': 'bool',
        'is_held_on': 'bool',
        'is_estimated': 'bool',
        'support_level': 'str',
        'additional_fields': 'JsonNode'
    }

    attribute_map = {
        'copyright': 'copyright',
        'estimated': 'estimated',
        'group': 'group',
        'name': 'name',
        'value': 'value',
        'value_unrounded': 'valueUnrounded',
        'rank': 'rank',
        'average_value': 'averageValue',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'num_occurrences': 'numOccurrences',
        'percentile50_value': 'percentile50Value',
        'percentile75_value': 'percentile75Value',
        'percentile90_value': 'percentile90Value',
        'competitive_value': 'competitiveValue',
        'num_competitive_occurrences': 'numCompetitiveOccurrences',
        'unit': 'unit',
        'position_id': 'positionId',
        'player_id': 'playerId',
        'play_id': 'playId',
        'metric_id': 'metricId',
        'time_code': 'timeCode',
        'description': 'description',
        'base': 'base',
        'is_radar_tracked': 'isRadarTracked',
        'is_held_on': 'isHeldOn',
        'is_estimated': 'isEstimated',
        'support_level': 'supportLevel',
        'additional_fields': 'additionalFields'
    }

    def __init__(self, copyright=None, estimated=None, group=None, name=None, value=None, value_unrounded=None, rank=None, average_value=None, min_value=None, max_value=None, num_occurrences=None, percentile50_value=None, percentile75_value=None, percentile90_value=None, competitive_value=None, num_competitive_occurrences=None, unit=None, position_id=None, player_id=None, play_id=None, metric_id=None, time_code=None, description=None, base=None, is_radar_tracked=None, is_held_on=None, is_estimated=None, support_level=None, additional_fields=None):  # noqa: E501
        """CalculatedMetricRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._estimated = None
        self._group = None
        self._name = None
        self._value = None
        self._value_unrounded = None
        self._rank = None
        self._average_value = None
        self._min_value = None
        self._max_value = None
        self._num_occurrences = None
        self._percentile50_value = None
        self._percentile75_value = None
        self._percentile90_value = None
        self._competitive_value = None
        self._num_competitive_occurrences = None
        self._unit = None
        self._position_id = None
        self._player_id = None
        self._play_id = None
        self._metric_id = None
        self._time_code = None
        self._description = None
        self._base = None
        self._is_radar_tracked = None
        self._is_held_on = None
        self._is_estimated = None
        self._support_level = None
        self._additional_fields = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if estimated is not None:
            self.estimated = estimated
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if value_unrounded is not None:
            self.value_unrounded = value_unrounded
        if rank is not None:
            self.rank = rank
        if average_value is not None:
            self.average_value = average_value
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if num_occurrences is not None:
            self.num_occurrences = num_occurrences
        if percentile50_value is not None:
            self.percentile50_value = percentile50_value
        if percentile75_value is not None:
            self.percentile75_value = percentile75_value
        if percentile90_value is not None:
            self.percentile90_value = percentile90_value
        if competitive_value is not None:
            self.competitive_value = competitive_value
        if num_competitive_occurrences is not None:
            self.num_competitive_occurrences = num_competitive_occurrences
        if unit is not None:
            self.unit = unit
        if position_id is not None:
            self.position_id = position_id
        if player_id is not None:
            self.player_id = player_id
        if play_id is not None:
            self.play_id = play_id
        if metric_id is not None:
            self.metric_id = metric_id
        if time_code is not None:
            self.time_code = time_code
        if description is not None:
            self.description = description
        if base is not None:
            self.base = base
        if is_radar_tracked is not None:
            self.is_radar_tracked = is_radar_tracked
        if is_held_on is not None:
            self.is_held_on = is_held_on
        if is_estimated is not None:
            self.is_estimated = is_estimated
        if support_level is not None:
            self.support_level = support_level
        if additional_fields is not None:
            self.additional_fields = additional_fields

    @property
    def copyright(self):
        """Gets the copyright of this CalculatedMetricRestObject.  # noqa: E501


        :return: The copyright of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this CalculatedMetricRestObject.


        :param copyright: The copyright of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def estimated(self):
        """Gets the estimated of this CalculatedMetricRestObject.  # noqa: E501


        :return: The estimated of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._estimated

    @estimated.setter
    def estimated(self, estimated):
        """Sets the estimated of this CalculatedMetricRestObject.


        :param estimated: The estimated of this CalculatedMetricRestObject.  # noqa: E501
        :type: bool
        """

        self._estimated = estimated

    @property
    def group(self):
        """Gets the group of this CalculatedMetricRestObject.  # noqa: E501


        :return: The group of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CalculatedMetricRestObject.


        :param group: The group of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this CalculatedMetricRestObject.  # noqa: E501


        :return: The name of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculatedMetricRestObject.


        :param name: The name of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CalculatedMetricRestObject.


        :param value: The value of this CalculatedMetricRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._value = value

    @property
    def value_unrounded(self):
        """Gets the value_unrounded of this CalculatedMetricRestObject.  # noqa: E501


        :return: The value_unrounded of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._value_unrounded

    @value_unrounded.setter
    def value_unrounded(self, value_unrounded):
        """Sets the value_unrounded of this CalculatedMetricRestObject.


        :param value_unrounded: The value_unrounded of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._value_unrounded = value_unrounded

    @property
    def rank(self):
        """Gets the rank of this CalculatedMetricRestObject.  # noqa: E501


        :return: The rank of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this CalculatedMetricRestObject.


        :param rank: The rank of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def average_value(self):
        """Gets the average_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The average_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._average_value

    @average_value.setter
    def average_value(self, average_value):
        """Sets the average_value of this CalculatedMetricRestObject.


        :param average_value: The average_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._average_value = average_value

    @property
    def min_value(self):
        """Gets the min_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The min_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CalculatedMetricRestObject.


        :param min_value: The min_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The max_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CalculatedMetricRestObject.


        :param max_value: The max_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def num_occurrences(self):
        """Gets the num_occurrences of this CalculatedMetricRestObject.  # noqa: E501


        :return: The num_occurrences of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_occurrences

    @num_occurrences.setter
    def num_occurrences(self, num_occurrences):
        """Sets the num_occurrences of this CalculatedMetricRestObject.


        :param num_occurrences: The num_occurrences of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._num_occurrences = num_occurrences

    @property
    def percentile50_value(self):
        """Gets the percentile50_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The percentile50_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._percentile50_value

    @percentile50_value.setter
    def percentile50_value(self, percentile50_value):
        """Sets the percentile50_value of this CalculatedMetricRestObject.


        :param percentile50_value: The percentile50_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._percentile50_value = percentile50_value

    @property
    def percentile75_value(self):
        """Gets the percentile75_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The percentile75_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._percentile75_value

    @percentile75_value.setter
    def percentile75_value(self, percentile75_value):
        """Sets the percentile75_value of this CalculatedMetricRestObject.


        :param percentile75_value: The percentile75_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._percentile75_value = percentile75_value

    @property
    def percentile90_value(self):
        """Gets the percentile90_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The percentile90_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._percentile90_value

    @percentile90_value.setter
    def percentile90_value(self, percentile90_value):
        """Sets the percentile90_value of this CalculatedMetricRestObject.


        :param percentile90_value: The percentile90_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._percentile90_value = percentile90_value

    @property
    def competitive_value(self):
        """Gets the competitive_value of this CalculatedMetricRestObject.  # noqa: E501


        :return: The competitive_value of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: float
        """
        return self._competitive_value

    @competitive_value.setter
    def competitive_value(self, competitive_value):
        """Sets the competitive_value of this CalculatedMetricRestObject.


        :param competitive_value: The competitive_value of this CalculatedMetricRestObject.  # noqa: E501
        :type: float
        """

        self._competitive_value = competitive_value

    @property
    def num_competitive_occurrences(self):
        """Gets the num_competitive_occurrences of this CalculatedMetricRestObject.  # noqa: E501


        :return: The num_competitive_occurrences of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_competitive_occurrences

    @num_competitive_occurrences.setter
    def num_competitive_occurrences(self, num_competitive_occurrences):
        """Sets the num_competitive_occurrences of this CalculatedMetricRestObject.


        :param num_competitive_occurrences: The num_competitive_occurrences of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._num_competitive_occurrences = num_competitive_occurrences

    @property
    def unit(self):
        """Gets the unit of this CalculatedMetricRestObject.  # noqa: E501


        :return: The unit of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CalculatedMetricRestObject.


        :param unit: The unit of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def position_id(self):
        """Gets the position_id of this CalculatedMetricRestObject.  # noqa: E501


        :return: The position_id of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this CalculatedMetricRestObject.


        :param position_id: The position_id of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def player_id(self):
        """Gets the player_id of this CalculatedMetricRestObject.  # noqa: E501


        :return: The player_id of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this CalculatedMetricRestObject.


        :param player_id: The player_id of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def play_id(self):
        """Gets the play_id of this CalculatedMetricRestObject.  # noqa: E501


        :return: The play_id of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this CalculatedMetricRestObject.


        :param play_id: The play_id of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def metric_id(self):
        """Gets the metric_id of this CalculatedMetricRestObject.  # noqa: E501


        :return: The metric_id of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this CalculatedMetricRestObject.


        :param metric_id: The metric_id of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._metric_id = metric_id

    @property
    def time_code(self):
        """Gets the time_code of this CalculatedMetricRestObject.  # noqa: E501


        :return: The time_code of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: int
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this CalculatedMetricRestObject.


        :param time_code: The time_code of this CalculatedMetricRestObject.  # noqa: E501
        :type: int
        """

        self._time_code = time_code

    @property
    def description(self):
        """Gets the description of this CalculatedMetricRestObject.  # noqa: E501


        :return: The description of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalculatedMetricRestObject.


        :param description: The description of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def base(self):
        """Gets the base of this CalculatedMetricRestObject.  # noqa: E501


        :return: The base of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this CalculatedMetricRestObject.


        :param base: The base of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def is_radar_tracked(self):
        """Gets the is_radar_tracked of this CalculatedMetricRestObject.  # noqa: E501


        :return: The is_radar_tracked of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_radar_tracked

    @is_radar_tracked.setter
    def is_radar_tracked(self, is_radar_tracked):
        """Sets the is_radar_tracked of this CalculatedMetricRestObject.


        :param is_radar_tracked: The is_radar_tracked of this CalculatedMetricRestObject.  # noqa: E501
        :type: bool
        """

        self._is_radar_tracked = is_radar_tracked

    @property
    def is_held_on(self):
        """Gets the is_held_on of this CalculatedMetricRestObject.  # noqa: E501


        :return: The is_held_on of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_held_on

    @is_held_on.setter
    def is_held_on(self, is_held_on):
        """Sets the is_held_on of this CalculatedMetricRestObject.


        :param is_held_on: The is_held_on of this CalculatedMetricRestObject.  # noqa: E501
        :type: bool
        """

        self._is_held_on = is_held_on

    @property
    def is_estimated(self):
        """Gets the is_estimated of this CalculatedMetricRestObject.  # noqa: E501


        :return: The is_estimated of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_estimated

    @is_estimated.setter
    def is_estimated(self, is_estimated):
        """Sets the is_estimated of this CalculatedMetricRestObject.


        :param is_estimated: The is_estimated of this CalculatedMetricRestObject.  # noqa: E501
        :type: bool
        """

        self._is_estimated = is_estimated

    @property
    def support_level(self):
        """Gets the support_level of this CalculatedMetricRestObject.  # noqa: E501


        :return: The support_level of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this CalculatedMetricRestObject.


        :param support_level: The support_level of this CalculatedMetricRestObject.  # noqa: E501
        :type: str
        """

        self._support_level = support_level

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CalculatedMetricRestObject.  # noqa: E501


        :return: The additional_fields of this CalculatedMetricRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CalculatedMetricRestObject.


        :param additional_fields: The additional_fields of this CalculatedMetricRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._additional_fields = additional_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatedMetricRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatedMetricRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
