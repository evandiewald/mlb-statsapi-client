# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPlayEventRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'details': 'Details',
        'count': 'Count',
        'post_count': 'Count',
        'pre_count': 'Count',
        'pitch_data': 'BaseballPitchDataRestObject',
        'hit_data': 'BaseballHitDataRestObject',
        'index': 'int',
        'pfx_id': 'str',
        'play_id': 'str',
        'action_play_id': 'str',
        'pitch_number': 'int',
        'pickoff_number': 'int',
        'at_bat_number': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'is_pitch': 'bool',
        'is_base_running_play': 'bool',
        'is_substitution': 'bool',
        'type': 'str',
        'player': 'BaseballPersonRestObject',
        'umpire': 'BaseballPersonRestObject',
        'position': 'PositionRestObject',
        'batting_order': 'str',
        'replaced_player': 'BaseballPersonRestObject',
        'base': 'int',
        'injury_type': 'str',
        'defense': 'BaseballDefenseRestObject',
        'offense': 'BaseballOffenseRestObject',
        'credits': 'list[PlayCreditRestObject]',
        'officials': 'list[OfficialRestObject]',
        'review_details': 'ReviewDetails'
    }

    attribute_map = {
        'copyright': 'copyright',
        'details': 'details',
        'count': 'count',
        'post_count': 'postCount',
        'pre_count': 'preCount',
        'pitch_data': 'pitchData',
        'hit_data': 'hitData',
        'index': 'index',
        'pfx_id': 'pfxId',
        'play_id': 'playId',
        'action_play_id': 'actionPlayId',
        'pitch_number': 'pitchNumber',
        'pickoff_number': 'pickoffNumber',
        'at_bat_number': 'atBatNumber',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'is_pitch': 'isPitch',
        'is_base_running_play': 'isBaseRunningPlay',
        'is_substitution': 'isSubstitution',
        'type': 'type',
        'player': 'player',
        'umpire': 'umpire',
        'position': 'position',
        'batting_order': 'battingOrder',
        'replaced_player': 'replacedPlayer',
        'base': 'base',
        'injury_type': 'injuryType',
        'defense': 'defense',
        'offense': 'offense',
        'credits': 'credits',
        'officials': 'officials',
        'review_details': 'reviewDetails'
    }

    def __init__(self, copyright=None, details=None, count=None, post_count=None, pre_count=None, pitch_data=None, hit_data=None, index=None, pfx_id=None, play_id=None, action_play_id=None, pitch_number=None, pickoff_number=None, at_bat_number=None, start_time=None, end_time=None, is_pitch=None, is_base_running_play=None, is_substitution=None, type=None, player=None, umpire=None, position=None, batting_order=None, replaced_player=None, base=None, injury_type=None, defense=None, offense=None, credits=None, officials=None, review_details=None):  # noqa: E501
        """BaseballPlayEventRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._details = None
        self._count = None
        self._post_count = None
        self._pre_count = None
        self._pitch_data = None
        self._hit_data = None
        self._index = None
        self._pfx_id = None
        self._play_id = None
        self._action_play_id = None
        self._pitch_number = None
        self._pickoff_number = None
        self._at_bat_number = None
        self._start_time = None
        self._end_time = None
        self._is_pitch = None
        self._is_base_running_play = None
        self._is_substitution = None
        self._type = None
        self._player = None
        self._umpire = None
        self._position = None
        self._batting_order = None
        self._replaced_player = None
        self._base = None
        self._injury_type = None
        self._defense = None
        self._offense = None
        self._credits = None
        self._officials = None
        self._review_details = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if details is not None:
            self.details = details
        if count is not None:
            self.count = count
        if post_count is not None:
            self.post_count = post_count
        if pre_count is not None:
            self.pre_count = pre_count
        if pitch_data is not None:
            self.pitch_data = pitch_data
        if hit_data is not None:
            self.hit_data = hit_data
        if index is not None:
            self.index = index
        if pfx_id is not None:
            self.pfx_id = pfx_id
        if play_id is not None:
            self.play_id = play_id
        if action_play_id is not None:
            self.action_play_id = action_play_id
        if pitch_number is not None:
            self.pitch_number = pitch_number
        if pickoff_number is not None:
            self.pickoff_number = pickoff_number
        if at_bat_number is not None:
            self.at_bat_number = at_bat_number
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if is_pitch is not None:
            self.is_pitch = is_pitch
        if is_base_running_play is not None:
            self.is_base_running_play = is_base_running_play
        if is_substitution is not None:
            self.is_substitution = is_substitution
        if type is not None:
            self.type = type
        if player is not None:
            self.player = player
        if umpire is not None:
            self.umpire = umpire
        if position is not None:
            self.position = position
        if batting_order is not None:
            self.batting_order = batting_order
        if replaced_player is not None:
            self.replaced_player = replaced_player
        if base is not None:
            self.base = base
        if injury_type is not None:
            self.injury_type = injury_type
        if defense is not None:
            self.defense = defense
        if offense is not None:
            self.offense = offense
        if credits is not None:
            self.credits = credits
        if officials is not None:
            self.officials = officials
        if review_details is not None:
            self.review_details = review_details

    @property
    def copyright(self):
        """Gets the copyright of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The copyright of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballPlayEventRestObject.


        :param copyright: The copyright of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def details(self):
        """Gets the details of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The details of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BaseballPlayEventRestObject.


        :param details: The details of this BaseballPlayEventRestObject.  # noqa: E501
        :type: Details
        """

        self._details = details

    @property
    def count(self):
        """Gets the count of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The count of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: Count
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BaseballPlayEventRestObject.


        :param count: The count of this BaseballPlayEventRestObject.  # noqa: E501
        :type: Count
        """

        self._count = count

    @property
    def post_count(self):
        """Gets the post_count of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The post_count of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: Count
        """
        return self._post_count

    @post_count.setter
    def post_count(self, post_count):
        """Sets the post_count of this BaseballPlayEventRestObject.


        :param post_count: The post_count of this BaseballPlayEventRestObject.  # noqa: E501
        :type: Count
        """

        self._post_count = post_count

    @property
    def pre_count(self):
        """Gets the pre_count of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The pre_count of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: Count
        """
        return self._pre_count

    @pre_count.setter
    def pre_count(self, pre_count):
        """Sets the pre_count of this BaseballPlayEventRestObject.


        :param pre_count: The pre_count of this BaseballPlayEventRestObject.  # noqa: E501
        :type: Count
        """

        self._pre_count = pre_count

    @property
    def pitch_data(self):
        """Gets the pitch_data of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The pitch_data of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballPitchDataRestObject
        """
        return self._pitch_data

    @pitch_data.setter
    def pitch_data(self, pitch_data):
        """Sets the pitch_data of this BaseballPlayEventRestObject.


        :param pitch_data: The pitch_data of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballPitchDataRestObject
        """

        self._pitch_data = pitch_data

    @property
    def hit_data(self):
        """Gets the hit_data of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The hit_data of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballHitDataRestObject
        """
        return self._hit_data

    @hit_data.setter
    def hit_data(self, hit_data):
        """Sets the hit_data of this BaseballPlayEventRestObject.


        :param hit_data: The hit_data of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballHitDataRestObject
        """

        self._hit_data = hit_data

    @property
    def index(self):
        """Gets the index of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The index of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this BaseballPlayEventRestObject.


        :param index: The index of this BaseballPlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def pfx_id(self):
        """Gets the pfx_id of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The pfx_id of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._pfx_id

    @pfx_id.setter
    def pfx_id(self, pfx_id):
        """Sets the pfx_id of this BaseballPlayEventRestObject.


        :param pfx_id: The pfx_id of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._pfx_id = pfx_id

    @property
    def play_id(self):
        """Gets the play_id of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The play_id of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this BaseballPlayEventRestObject.


        :param play_id: The play_id of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def action_play_id(self):
        """Gets the action_play_id of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The action_play_id of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._action_play_id

    @action_play_id.setter
    def action_play_id(self, action_play_id):
        """Sets the action_play_id of this BaseballPlayEventRestObject.


        :param action_play_id: The action_play_id of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._action_play_id = action_play_id

    @property
    def pitch_number(self):
        """Gets the pitch_number of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The pitch_number of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number

    @pitch_number.setter
    def pitch_number(self, pitch_number):
        """Sets the pitch_number of this BaseballPlayEventRestObject.


        :param pitch_number: The pitch_number of this BaseballPlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._pitch_number = pitch_number

    @property
    def pickoff_number(self):
        """Gets the pickoff_number of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The pickoff_number of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pickoff_number

    @pickoff_number.setter
    def pickoff_number(self, pickoff_number):
        """Sets the pickoff_number of this BaseballPlayEventRestObject.


        :param pickoff_number: The pickoff_number of this BaseballPlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._pickoff_number = pickoff_number

    @property
    def at_bat_number(self):
        """Gets the at_bat_number of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The at_bat_number of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_number

    @at_bat_number.setter
    def at_bat_number(self, at_bat_number):
        """Sets the at_bat_number of this BaseballPlayEventRestObject.


        :param at_bat_number: The at_bat_number of this BaseballPlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._at_bat_number = at_bat_number

    @property
    def start_time(self):
        """Gets the start_time of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The start_time of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BaseballPlayEventRestObject.


        :param start_time: The start_time of this BaseballPlayEventRestObject.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The end_time of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BaseballPlayEventRestObject.


        :param end_time: The end_time of this BaseballPlayEventRestObject.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def is_pitch(self):
        """Gets the is_pitch of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The is_pitch of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_pitch

    @is_pitch.setter
    def is_pitch(self, is_pitch):
        """Sets the is_pitch of this BaseballPlayEventRestObject.


        :param is_pitch: The is_pitch of this BaseballPlayEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_pitch = is_pitch

    @property
    def is_base_running_play(self):
        """Gets the is_base_running_play of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The is_base_running_play of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_base_running_play

    @is_base_running_play.setter
    def is_base_running_play(self, is_base_running_play):
        """Sets the is_base_running_play of this BaseballPlayEventRestObject.


        :param is_base_running_play: The is_base_running_play of this BaseballPlayEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_base_running_play = is_base_running_play

    @property
    def is_substitution(self):
        """Gets the is_substitution of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The is_substitution of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_substitution

    @is_substitution.setter
    def is_substitution(self, is_substitution):
        """Sets the is_substitution of this BaseballPlayEventRestObject.


        :param is_substitution: The is_substitution of this BaseballPlayEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_substitution = is_substitution

    @property
    def type(self):
        """Gets the type of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The type of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseballPlayEventRestObject.


        :param type: The type of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def player(self):
        """Gets the player of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The player of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this BaseballPlayEventRestObject.


        :param player: The player of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def umpire(self):
        """Gets the umpire of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The umpire of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._umpire

    @umpire.setter
    def umpire(self, umpire):
        """Sets the umpire of this BaseballPlayEventRestObject.


        :param umpire: The umpire of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._umpire = umpire

    @property
    def position(self):
        """Gets the position of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The position of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: PositionRestObject
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BaseballPlayEventRestObject.


        :param position: The position of this BaseballPlayEventRestObject.  # noqa: E501
        :type: PositionRestObject
        """

        self._position = position

    @property
    def batting_order(self):
        """Gets the batting_order of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The batting_order of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this BaseballPlayEventRestObject.


        :param batting_order: The batting_order of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._batting_order = batting_order

    @property
    def replaced_player(self):
        """Gets the replaced_player of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The replaced_player of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._replaced_player

    @replaced_player.setter
    def replaced_player(self, replaced_player):
        """Sets the replaced_player of this BaseballPlayEventRestObject.


        :param replaced_player: The replaced_player of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._replaced_player = replaced_player

    @property
    def base(self):
        """Gets the base of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The base of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this BaseballPlayEventRestObject.


        :param base: The base of this BaseballPlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._base = base

    @property
    def injury_type(self):
        """Gets the injury_type of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The injury_type of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._injury_type

    @injury_type.setter
    def injury_type(self, injury_type):
        """Sets the injury_type of this BaseballPlayEventRestObject.


        :param injury_type: The injury_type of this BaseballPlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._injury_type = injury_type

    @property
    def defense(self):
        """Gets the defense of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The defense of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballDefenseRestObject
        """
        return self._defense

    @defense.setter
    def defense(self, defense):
        """Sets the defense of this BaseballPlayEventRestObject.


        :param defense: The defense of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballDefenseRestObject
        """

        self._defense = defense

    @property
    def offense(self):
        """Gets the offense of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The offense of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: BaseballOffenseRestObject
        """
        return self._offense

    @offense.setter
    def offense(self, offense):
        """Sets the offense of this BaseballPlayEventRestObject.


        :param offense: The offense of this BaseballPlayEventRestObject.  # noqa: E501
        :type: BaseballOffenseRestObject
        """

        self._offense = offense

    @property
    def credits(self):
        """Gets the credits of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The credits of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: list[PlayCreditRestObject]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this BaseballPlayEventRestObject.


        :param credits: The credits of this BaseballPlayEventRestObject.  # noqa: E501
        :type: list[PlayCreditRestObject]
        """

        self._credits = credits

    @property
    def officials(self):
        """Gets the officials of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The officials of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: list[OfficialRestObject]
        """
        return self._officials

    @officials.setter
    def officials(self, officials):
        """Sets the officials of this BaseballPlayEventRestObject.


        :param officials: The officials of this BaseballPlayEventRestObject.  # noqa: E501
        :type: list[OfficialRestObject]
        """

        self._officials = officials

    @property
    def review_details(self):
        """Gets the review_details of this BaseballPlayEventRestObject.  # noqa: E501


        :return: The review_details of this BaseballPlayEventRestObject.  # noqa: E501
        :rtype: ReviewDetails
        """
        return self._review_details

    @review_details.setter
    def review_details(self, review_details):
        """Sets the review_details of this BaseballPlayEventRestObject.


        :param review_details: The review_details of this BaseballPlayEventRestObject.  # noqa: E501
        :type: ReviewDetails
        """

        self._review_details = review_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPlayEventRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPlayEventRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
