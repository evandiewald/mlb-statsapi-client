# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Breaks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'break_angle': 'float',
        'break_length': 'float',
        'break_x': 'float',
        'break_y': 'float',
        'break_vertical': 'float',
        'break_vertical_induced': 'float',
        'break_horizontal': 'float',
        'break_z': 'float',
        'spin_rate': 'int',
        'spin_direction': 'int'
    }

    attribute_map = {
        'break_angle': 'breakAngle',
        'break_length': 'breakLength',
        'break_x': 'breakX',
        'break_y': 'breakY',
        'break_vertical': 'breakVertical',
        'break_vertical_induced': 'breakVerticalInduced',
        'break_horizontal': 'breakHorizontal',
        'break_z': 'breakZ',
        'spin_rate': 'spinRate',
        'spin_direction': 'spinDirection'
    }

    def __init__(self, break_angle=None, break_length=None, break_x=None, break_y=None, break_vertical=None, break_vertical_induced=None, break_horizontal=None, break_z=None, spin_rate=None, spin_direction=None):  # noqa: E501
        """Breaks - a model defined in Swagger"""  # noqa: E501
        self._break_angle = None
        self._break_length = None
        self._break_x = None
        self._break_y = None
        self._break_vertical = None
        self._break_vertical_induced = None
        self._break_horizontal = None
        self._break_z = None
        self._spin_rate = None
        self._spin_direction = None
        self.discriminator = None
        if break_angle is not None:
            self.break_angle = break_angle
        if break_length is not None:
            self.break_length = break_length
        if break_x is not None:
            self.break_x = break_x
        if break_y is not None:
            self.break_y = break_y
        if break_vertical is not None:
            self.break_vertical = break_vertical
        if break_vertical_induced is not None:
            self.break_vertical_induced = break_vertical_induced
        if break_horizontal is not None:
            self.break_horizontal = break_horizontal
        if break_z is not None:
            self.break_z = break_z
        if spin_rate is not None:
            self.spin_rate = spin_rate
        if spin_direction is not None:
            self.spin_direction = spin_direction

    @property
    def break_angle(self):
        """Gets the break_angle of this Breaks.  # noqa: E501


        :return: The break_angle of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_angle

    @break_angle.setter
    def break_angle(self, break_angle):
        """Sets the break_angle of this Breaks.


        :param break_angle: The break_angle of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_angle = break_angle

    @property
    def break_length(self):
        """Gets the break_length of this Breaks.  # noqa: E501


        :return: The break_length of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_length

    @break_length.setter
    def break_length(self, break_length):
        """Sets the break_length of this Breaks.


        :param break_length: The break_length of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_length = break_length

    @property
    def break_x(self):
        """Gets the break_x of this Breaks.  # noqa: E501


        :return: The break_x of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_x

    @break_x.setter
    def break_x(self, break_x):
        """Sets the break_x of this Breaks.


        :param break_x: The break_x of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_x = break_x

    @property
    def break_y(self):
        """Gets the break_y of this Breaks.  # noqa: E501


        :return: The break_y of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_y

    @break_y.setter
    def break_y(self, break_y):
        """Sets the break_y of this Breaks.


        :param break_y: The break_y of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_y = break_y

    @property
    def break_vertical(self):
        """Gets the break_vertical of this Breaks.  # noqa: E501


        :return: The break_vertical of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_vertical

    @break_vertical.setter
    def break_vertical(self, break_vertical):
        """Sets the break_vertical of this Breaks.


        :param break_vertical: The break_vertical of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_vertical = break_vertical

    @property
    def break_vertical_induced(self):
        """Gets the break_vertical_induced of this Breaks.  # noqa: E501


        :return: The break_vertical_induced of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_vertical_induced

    @break_vertical_induced.setter
    def break_vertical_induced(self, break_vertical_induced):
        """Sets the break_vertical_induced of this Breaks.


        :param break_vertical_induced: The break_vertical_induced of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_vertical_induced = break_vertical_induced

    @property
    def break_horizontal(self):
        """Gets the break_horizontal of this Breaks.  # noqa: E501


        :return: The break_horizontal of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_horizontal

    @break_horizontal.setter
    def break_horizontal(self, break_horizontal):
        """Sets the break_horizontal of this Breaks.


        :param break_horizontal: The break_horizontal of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_horizontal = break_horizontal

    @property
    def break_z(self):
        """Gets the break_z of this Breaks.  # noqa: E501


        :return: The break_z of this Breaks.  # noqa: E501
        :rtype: float
        """
        return self._break_z

    @break_z.setter
    def break_z(self, break_z):
        """Sets the break_z of this Breaks.


        :param break_z: The break_z of this Breaks.  # noqa: E501
        :type: float
        """

        self._break_z = break_z

    @property
    def spin_rate(self):
        """Gets the spin_rate of this Breaks.  # noqa: E501


        :return: The spin_rate of this Breaks.  # noqa: E501
        :rtype: int
        """
        return self._spin_rate

    @spin_rate.setter
    def spin_rate(self, spin_rate):
        """Sets the spin_rate of this Breaks.


        :param spin_rate: The spin_rate of this Breaks.  # noqa: E501
        :type: int
        """

        self._spin_rate = spin_rate

    @property
    def spin_direction(self):
        """Gets the spin_direction of this Breaks.  # noqa: E501


        :return: The spin_direction of this Breaks.  # noqa: E501
        :rtype: int
        """
        return self._spin_direction

    @spin_direction.setter
    def spin_direction(self, spin_direction):
        """Sets the spin_direction of this Breaks.


        :param spin_direction: The spin_direction of this Breaks.  # noqa: E501
        :type: int
        """

        self._spin_direction = spin_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Breaks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Breaks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
