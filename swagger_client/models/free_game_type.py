# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FreeGameType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_game_type_enum': 'FreeGameTypeEnum',
        'on_status': 'bool'
    }

    attribute_map = {
        'free_game_type_enum': 'freeGameTypeEnum',
        'on_status': 'onStatus'
    }

    def __init__(self, free_game_type_enum=None, on_status=None):  # noqa: E501
        """FreeGameType - a model defined in Swagger"""  # noqa: E501
        self._free_game_type_enum = None
        self._on_status = None
        self.discriminator = None
        if free_game_type_enum is not None:
            self.free_game_type_enum = free_game_type_enum
        if on_status is not None:
            self.on_status = on_status

    @property
    def free_game_type_enum(self):
        """Gets the free_game_type_enum of this FreeGameType.  # noqa: E501


        :return: The free_game_type_enum of this FreeGameType.  # noqa: E501
        :rtype: FreeGameTypeEnum
        """
        return self._free_game_type_enum

    @free_game_type_enum.setter
    def free_game_type_enum(self, free_game_type_enum):
        """Sets the free_game_type_enum of this FreeGameType.


        :param free_game_type_enum: The free_game_type_enum of this FreeGameType.  # noqa: E501
        :type: FreeGameTypeEnum
        """

        self._free_game_type_enum = free_game_type_enum

    @property
    def on_status(self):
        """Gets the on_status of this FreeGameType.  # noqa: E501


        :return: The on_status of this FreeGameType.  # noqa: E501
        :rtype: bool
        """
        return self._on_status

    @on_status.setter
    def on_status(self, on_status):
        """Sets the on_status of this FreeGameType.


        :param on_status: The on_status of this FreeGameType.  # noqa: E501
        :type: bool
        """

        self._on_status = on_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FreeGameType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FreeGameType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
