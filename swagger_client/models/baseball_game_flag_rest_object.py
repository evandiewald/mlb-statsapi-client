# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameFlagRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'no_hitter': 'bool',
        'perfect_game': 'bool',
        'away_team_no_hitter': 'bool',
        'away_team_perfect_game': 'bool',
        'home_team_no_hitter': 'bool',
        'home_team_perfect_game': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'no_hitter': 'noHitter',
        'perfect_game': 'perfectGame',
        'away_team_no_hitter': 'awayTeamNoHitter',
        'away_team_perfect_game': 'awayTeamPerfectGame',
        'home_team_no_hitter': 'homeTeamNoHitter',
        'home_team_perfect_game': 'homeTeamPerfectGame'
    }

    def __init__(self, copyright=None, no_hitter=None, perfect_game=None, away_team_no_hitter=None, away_team_perfect_game=None, home_team_no_hitter=None, home_team_perfect_game=None):  # noqa: E501
        """BaseballGameFlagRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._no_hitter = None
        self._perfect_game = None
        self._away_team_no_hitter = None
        self._away_team_perfect_game = None
        self._home_team_no_hitter = None
        self._home_team_perfect_game = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if no_hitter is not None:
            self.no_hitter = no_hitter
        if perfect_game is not None:
            self.perfect_game = perfect_game
        if away_team_no_hitter is not None:
            self.away_team_no_hitter = away_team_no_hitter
        if away_team_perfect_game is not None:
            self.away_team_perfect_game = away_team_perfect_game
        if home_team_no_hitter is not None:
            self.home_team_no_hitter = home_team_no_hitter
        if home_team_perfect_game is not None:
            self.home_team_perfect_game = home_team_perfect_game

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameFlagRestObject.


        :param copyright: The copyright of this BaseballGameFlagRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def no_hitter(self):
        """Gets the no_hitter of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._no_hitter

    @no_hitter.setter
    def no_hitter(self, no_hitter):
        """Sets the no_hitter of this BaseballGameFlagRestObject.


        :param no_hitter: The no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._no_hitter = no_hitter

    @property
    def perfect_game(self):
        """Gets the perfect_game of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._perfect_game

    @perfect_game.setter
    def perfect_game(self, perfect_game):
        """Sets the perfect_game of this BaseballGameFlagRestObject.


        :param perfect_game: The perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._perfect_game = perfect_game

    @property
    def away_team_no_hitter(self):
        """Gets the away_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The away_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._away_team_no_hitter

    @away_team_no_hitter.setter
    def away_team_no_hitter(self, away_team_no_hitter):
        """Sets the away_team_no_hitter of this BaseballGameFlagRestObject.


        :param away_team_no_hitter: The away_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._away_team_no_hitter = away_team_no_hitter

    @property
    def away_team_perfect_game(self):
        """Gets the away_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The away_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._away_team_perfect_game

    @away_team_perfect_game.setter
    def away_team_perfect_game(self, away_team_perfect_game):
        """Sets the away_team_perfect_game of this BaseballGameFlagRestObject.


        :param away_team_perfect_game: The away_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._away_team_perfect_game = away_team_perfect_game

    @property
    def home_team_no_hitter(self):
        """Gets the home_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The home_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._home_team_no_hitter

    @home_team_no_hitter.setter
    def home_team_no_hitter(self, home_team_no_hitter):
        """Sets the home_team_no_hitter of this BaseballGameFlagRestObject.


        :param home_team_no_hitter: The home_team_no_hitter of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._home_team_no_hitter = home_team_no_hitter

    @property
    def home_team_perfect_game(self):
        """Gets the home_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501


        :return: The home_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._home_team_perfect_game

    @home_team_perfect_game.setter
    def home_team_perfect_game(self, home_team_perfect_game):
        """Sets the home_team_perfect_game of this BaseballGameFlagRestObject.


        :param home_team_perfect_game: The home_team_perfect_game of this BaseballGameFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._home_team_perfect_game = home_team_perfect_game

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameFlagRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameFlagRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
