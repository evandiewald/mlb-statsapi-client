# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballTeamStandingsRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team': 'BaseballTeam',
        'wins': 'int',
        'losses': 'int',
        'ties': 'int',
        'games_back': 'str',
        'wild_card_games_back': 'str',
        'league_games_back': 'str',
        'spring_league_games_back': 'str',
        'sport_games_back': 'str',
        'division_games_back': 'str',
        'conference_games_back': 'str',
        'division_champ': 'bool',
        'season': 'str',
        'streak': 'str',
        'last_updated': 'datetime',
        'home': 'str',
        'away': 'str',
        'last_ten': 'str',
        'points': 'int',
        'clinch_indicator': 'str',
        'division_rank': 'str',
        'conference_rank': 'str',
        'spring_league_rank': 'str',
        'league_rank': 'str',
        'sport_rank': 'str',
        'wild_card_rank': 'str',
        'games_played': 'int',
        'place': 'int',
        'wildcard_place': 'int',
        'wildcard_odds': 'float',
        'division_odds': 'float',
        'playoff_odds': 'float',
        'runs_allowed': 'int',
        'runs_scored': 'int',
        'has_wildcard': 'bool',
        'clinched': 'bool',
        'elimination_number': 'str',
        'elimination_number_sport': 'str',
        'elimination_number_league': 'str',
        'elimination_number_division': 'str',
        'elimination_number_conference': 'str',
        'elimination_number_wildcard': 'str',
        'magic_number': 'str',
        'has_playoff_points': 'bool',
        'vs_west': 'str',
        'vs_central': 'str',
        'vs_east': 'str',
        'vs_interleague': 'str',
        'vs_right': 'str',
        'vs_right_home_win': 'str',
        'vs_right_home_loss': 'str',
        'vs_right_away_win': 'str',
        'vs_right_away_loss': 'str',
        'vs_left': 'str',
        'vs_left_home_win': 'str',
        'vs_left_home_loss': 'str',
        'vs_left_away_win': 'str',
        'vs_left_away_loss': 'str',
        'vs_winners': 'str',
        'extra_innings': 'str',
        'expected_win_loss': 'str',
        'expected_win_loss_season': 'str',
        'one_run_games': 'str',
        'turf': 'str',
        'grass': 'str',
        'night': 'str',
        'day': 'str',
        'is_wild_card_team': 'bool',
        'is_division_leader': 'bool',
        'division_records': 'list[WinLossRecord]',
        'conference_records': 'list[WinLossRecord]',
        'league_records': 'list[WinLossRecord]',
        'split_records': 'list[WinLossRecord]',
        'expected_records': 'list[WinLossRecord]',
        'overall_records': 'list[WinLossRecord]',
        'conference': 'Conference',
        'run_differental': 'int',
        'wild_card_leader': 'bool',
        'winning_percentage': 'float'
    }

    attribute_map = {
        'team': 'team',
        'wins': 'wins',
        'losses': 'losses',
        'ties': 'ties',
        'games_back': 'gamesBack',
        'wild_card_games_back': 'wildCardGamesBack',
        'league_games_back': 'leagueGamesBack',
        'spring_league_games_back': 'springLeagueGamesBack',
        'sport_games_back': 'sportGamesBack',
        'division_games_back': 'divisionGamesBack',
        'conference_games_back': 'conferenceGamesBack',
        'division_champ': 'divisionChamp',
        'season': 'season',
        'streak': 'streak',
        'last_updated': 'lastUpdated',
        'home': 'home',
        'away': 'away',
        'last_ten': 'lastTen',
        'points': 'points',
        'clinch_indicator': 'clinchIndicator',
        'division_rank': 'divisionRank',
        'conference_rank': 'conferenceRank',
        'spring_league_rank': 'springLeagueRank',
        'league_rank': 'leagueRank',
        'sport_rank': 'sportRank',
        'wild_card_rank': 'wildCardRank',
        'games_played': 'gamesPlayed',
        'place': 'place',
        'wildcard_place': 'wildcardPlace',
        'wildcard_odds': 'wildcardOdds',
        'division_odds': 'divisionOdds',
        'playoff_odds': 'playoffOdds',
        'runs_allowed': 'runsAllowed',
        'runs_scored': 'runsScored',
        'has_wildcard': 'hasWildcard',
        'clinched': 'clinched',
        'elimination_number': 'eliminationNumber',
        'elimination_number_sport': 'eliminationNumberSport',
        'elimination_number_league': 'eliminationNumberLeague',
        'elimination_number_division': 'eliminationNumberDivision',
        'elimination_number_conference': 'eliminationNumberConference',
        'elimination_number_wildcard': 'eliminationNumberWildcard',
        'magic_number': 'magicNumber',
        'has_playoff_points': 'hasPlayoffPoints',
        'vs_west': 'vsWest',
        'vs_central': 'vsCentral',
        'vs_east': 'vsEast',
        'vs_interleague': 'vsInterleague',
        'vs_right': 'vsRight',
        'vs_right_home_win': 'vsRightHomeWin',
        'vs_right_home_loss': 'vsRightHomeLoss',
        'vs_right_away_win': 'vsRightAwayWin',
        'vs_right_away_loss': 'vsRightAwayLoss',
        'vs_left': 'vsLeft',
        'vs_left_home_win': 'vsLeftHomeWin',
        'vs_left_home_loss': 'vsLeftHomeLoss',
        'vs_left_away_win': 'vsLeftAwayWin',
        'vs_left_away_loss': 'vsLeftAwayLoss',
        'vs_winners': 'vsWinners',
        'extra_innings': 'extraInnings',
        'expected_win_loss': 'expectedWinLoss',
        'expected_win_loss_season': 'expectedWinLossSeason',
        'one_run_games': 'oneRunGames',
        'turf': 'turf',
        'grass': 'grass',
        'night': 'night',
        'day': 'day',
        'is_wild_card_team': 'isWildCardTeam',
        'is_division_leader': 'isDivisionLeader',
        'division_records': 'divisionRecords',
        'conference_records': 'conferenceRecords',
        'league_records': 'leagueRecords',
        'split_records': 'splitRecords',
        'expected_records': 'expectedRecords',
        'overall_records': 'overallRecords',
        'conference': 'conference',
        'run_differental': 'runDifferental',
        'wild_card_leader': 'wildCardLeader',
        'winning_percentage': 'winningPercentage'
    }

    def __init__(self, team=None, wins=None, losses=None, ties=None, games_back=None, wild_card_games_back=None, league_games_back=None, spring_league_games_back=None, sport_games_back=None, division_games_back=None, conference_games_back=None, division_champ=None, season=None, streak=None, last_updated=None, home=None, away=None, last_ten=None, points=None, clinch_indicator=None, division_rank=None, conference_rank=None, spring_league_rank=None, league_rank=None, sport_rank=None, wild_card_rank=None, games_played=None, place=None, wildcard_place=None, wildcard_odds=None, division_odds=None, playoff_odds=None, runs_allowed=None, runs_scored=None, has_wildcard=None, clinched=None, elimination_number=None, elimination_number_sport=None, elimination_number_league=None, elimination_number_division=None, elimination_number_conference=None, elimination_number_wildcard=None, magic_number=None, has_playoff_points=None, vs_west=None, vs_central=None, vs_east=None, vs_interleague=None, vs_right=None, vs_right_home_win=None, vs_right_home_loss=None, vs_right_away_win=None, vs_right_away_loss=None, vs_left=None, vs_left_home_win=None, vs_left_home_loss=None, vs_left_away_win=None, vs_left_away_loss=None, vs_winners=None, extra_innings=None, expected_win_loss=None, expected_win_loss_season=None, one_run_games=None, turf=None, grass=None, night=None, day=None, is_wild_card_team=None, is_division_leader=None, division_records=None, conference_records=None, league_records=None, split_records=None, expected_records=None, overall_records=None, conference=None, run_differental=None, wild_card_leader=None, winning_percentage=None):  # noqa: E501
        """BaseballTeamStandingsRecord - a model defined in Swagger"""  # noqa: E501
        self._team = None
        self._wins = None
        self._losses = None
        self._ties = None
        self._games_back = None
        self._wild_card_games_back = None
        self._league_games_back = None
        self._spring_league_games_back = None
        self._sport_games_back = None
        self._division_games_back = None
        self._conference_games_back = None
        self._division_champ = None
        self._season = None
        self._streak = None
        self._last_updated = None
        self._home = None
        self._away = None
        self._last_ten = None
        self._points = None
        self._clinch_indicator = None
        self._division_rank = None
        self._conference_rank = None
        self._spring_league_rank = None
        self._league_rank = None
        self._sport_rank = None
        self._wild_card_rank = None
        self._games_played = None
        self._place = None
        self._wildcard_place = None
        self._wildcard_odds = None
        self._division_odds = None
        self._playoff_odds = None
        self._runs_allowed = None
        self._runs_scored = None
        self._has_wildcard = None
        self._clinched = None
        self._elimination_number = None
        self._elimination_number_sport = None
        self._elimination_number_league = None
        self._elimination_number_division = None
        self._elimination_number_conference = None
        self._elimination_number_wildcard = None
        self._magic_number = None
        self._has_playoff_points = None
        self._vs_west = None
        self._vs_central = None
        self._vs_east = None
        self._vs_interleague = None
        self._vs_right = None
        self._vs_right_home_win = None
        self._vs_right_home_loss = None
        self._vs_right_away_win = None
        self._vs_right_away_loss = None
        self._vs_left = None
        self._vs_left_home_win = None
        self._vs_left_home_loss = None
        self._vs_left_away_win = None
        self._vs_left_away_loss = None
        self._vs_winners = None
        self._extra_innings = None
        self._expected_win_loss = None
        self._expected_win_loss_season = None
        self._one_run_games = None
        self._turf = None
        self._grass = None
        self._night = None
        self._day = None
        self._is_wild_card_team = None
        self._is_division_leader = None
        self._division_records = None
        self._conference_records = None
        self._league_records = None
        self._split_records = None
        self._expected_records = None
        self._overall_records = None
        self._conference = None
        self._run_differental = None
        self._wild_card_leader = None
        self._winning_percentage = None
        self.discriminator = None
        if team is not None:
            self.team = team
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if ties is not None:
            self.ties = ties
        if games_back is not None:
            self.games_back = games_back
        if wild_card_games_back is not None:
            self.wild_card_games_back = wild_card_games_back
        if league_games_back is not None:
            self.league_games_back = league_games_back
        if spring_league_games_back is not None:
            self.spring_league_games_back = spring_league_games_back
        if sport_games_back is not None:
            self.sport_games_back = sport_games_back
        if division_games_back is not None:
            self.division_games_back = division_games_back
        if conference_games_back is not None:
            self.conference_games_back = conference_games_back
        if division_champ is not None:
            self.division_champ = division_champ
        if season is not None:
            self.season = season
        if streak is not None:
            self.streak = streak
        if last_updated is not None:
            self.last_updated = last_updated
        if home is not None:
            self.home = home
        if away is not None:
            self.away = away
        if last_ten is not None:
            self.last_ten = last_ten
        if points is not None:
            self.points = points
        if clinch_indicator is not None:
            self.clinch_indicator = clinch_indicator
        if division_rank is not None:
            self.division_rank = division_rank
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if spring_league_rank is not None:
            self.spring_league_rank = spring_league_rank
        if league_rank is not None:
            self.league_rank = league_rank
        if sport_rank is not None:
            self.sport_rank = sport_rank
        if wild_card_rank is not None:
            self.wild_card_rank = wild_card_rank
        if games_played is not None:
            self.games_played = games_played
        if place is not None:
            self.place = place
        if wildcard_place is not None:
            self.wildcard_place = wildcard_place
        if wildcard_odds is not None:
            self.wildcard_odds = wildcard_odds
        if division_odds is not None:
            self.division_odds = division_odds
        if playoff_odds is not None:
            self.playoff_odds = playoff_odds
        if runs_allowed is not None:
            self.runs_allowed = runs_allowed
        if runs_scored is not None:
            self.runs_scored = runs_scored
        if has_wildcard is not None:
            self.has_wildcard = has_wildcard
        if clinched is not None:
            self.clinched = clinched
        if elimination_number is not None:
            self.elimination_number = elimination_number
        if elimination_number_sport is not None:
            self.elimination_number_sport = elimination_number_sport
        if elimination_number_league is not None:
            self.elimination_number_league = elimination_number_league
        if elimination_number_division is not None:
            self.elimination_number_division = elimination_number_division
        if elimination_number_conference is not None:
            self.elimination_number_conference = elimination_number_conference
        if elimination_number_wildcard is not None:
            self.elimination_number_wildcard = elimination_number_wildcard
        if magic_number is not None:
            self.magic_number = magic_number
        if has_playoff_points is not None:
            self.has_playoff_points = has_playoff_points
        if vs_west is not None:
            self.vs_west = vs_west
        if vs_central is not None:
            self.vs_central = vs_central
        if vs_east is not None:
            self.vs_east = vs_east
        if vs_interleague is not None:
            self.vs_interleague = vs_interleague
        if vs_right is not None:
            self.vs_right = vs_right
        if vs_right_home_win is not None:
            self.vs_right_home_win = vs_right_home_win
        if vs_right_home_loss is not None:
            self.vs_right_home_loss = vs_right_home_loss
        if vs_right_away_win is not None:
            self.vs_right_away_win = vs_right_away_win
        if vs_right_away_loss is not None:
            self.vs_right_away_loss = vs_right_away_loss
        if vs_left is not None:
            self.vs_left = vs_left
        if vs_left_home_win is not None:
            self.vs_left_home_win = vs_left_home_win
        if vs_left_home_loss is not None:
            self.vs_left_home_loss = vs_left_home_loss
        if vs_left_away_win is not None:
            self.vs_left_away_win = vs_left_away_win
        if vs_left_away_loss is not None:
            self.vs_left_away_loss = vs_left_away_loss
        if vs_winners is not None:
            self.vs_winners = vs_winners
        if extra_innings is not None:
            self.extra_innings = extra_innings
        if expected_win_loss is not None:
            self.expected_win_loss = expected_win_loss
        if expected_win_loss_season is not None:
            self.expected_win_loss_season = expected_win_loss_season
        if one_run_games is not None:
            self.one_run_games = one_run_games
        if turf is not None:
            self.turf = turf
        if grass is not None:
            self.grass = grass
        if night is not None:
            self.night = night
        if day is not None:
            self.day = day
        if is_wild_card_team is not None:
            self.is_wild_card_team = is_wild_card_team
        if is_division_leader is not None:
            self.is_division_leader = is_division_leader
        if division_records is not None:
            self.division_records = division_records
        if conference_records is not None:
            self.conference_records = conference_records
        if league_records is not None:
            self.league_records = league_records
        if split_records is not None:
            self.split_records = split_records
        if expected_records is not None:
            self.expected_records = expected_records
        if overall_records is not None:
            self.overall_records = overall_records
        if conference is not None:
            self.conference = conference
        if run_differental is not None:
            self.run_differental = run_differental
        if wild_card_leader is not None:
            self.wild_card_leader = wild_card_leader
        if winning_percentage is not None:
            self.winning_percentage = winning_percentage

    @property
    def team(self):
        """Gets the team of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The team of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballTeamStandingsRecord.


        :param team: The team of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def wins(self):
        """Gets the wins of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wins of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this BaseballTeamStandingsRecord.


        :param wins: The wins of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The losses of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this BaseballTeamStandingsRecord.


        :param losses: The losses of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def ties(self):
        """Gets the ties of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The ties of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties):
        """Sets the ties of this BaseballTeamStandingsRecord.


        :param ties: The ties of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._ties = ties

    @property
    def games_back(self):
        """Gets the games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._games_back

    @games_back.setter
    def games_back(self, games_back):
        """Sets the games_back of this BaseballTeamStandingsRecord.


        :param games_back: The games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._games_back = games_back

    @property
    def wild_card_games_back(self):
        """Gets the wild_card_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wild_card_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._wild_card_games_back

    @wild_card_games_back.setter
    def wild_card_games_back(self, wild_card_games_back):
        """Sets the wild_card_games_back of this BaseballTeamStandingsRecord.


        :param wild_card_games_back: The wild_card_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._wild_card_games_back = wild_card_games_back

    @property
    def league_games_back(self):
        """Gets the league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._league_games_back

    @league_games_back.setter
    def league_games_back(self, league_games_back):
        """Sets the league_games_back of this BaseballTeamStandingsRecord.


        :param league_games_back: The league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._league_games_back = league_games_back

    @property
    def spring_league_games_back(self):
        """Gets the spring_league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The spring_league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._spring_league_games_back

    @spring_league_games_back.setter
    def spring_league_games_back(self, spring_league_games_back):
        """Sets the spring_league_games_back of this BaseballTeamStandingsRecord.


        :param spring_league_games_back: The spring_league_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._spring_league_games_back = spring_league_games_back

    @property
    def sport_games_back(self):
        """Gets the sport_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The sport_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._sport_games_back

    @sport_games_back.setter
    def sport_games_back(self, sport_games_back):
        """Sets the sport_games_back of this BaseballTeamStandingsRecord.


        :param sport_games_back: The sport_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._sport_games_back = sport_games_back

    @property
    def division_games_back(self):
        """Gets the division_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The division_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._division_games_back

    @division_games_back.setter
    def division_games_back(self, division_games_back):
        """Sets the division_games_back of this BaseballTeamStandingsRecord.


        :param division_games_back: The division_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._division_games_back = division_games_back

    @property
    def conference_games_back(self):
        """Gets the conference_games_back of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The conference_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._conference_games_back

    @conference_games_back.setter
    def conference_games_back(self, conference_games_back):
        """Sets the conference_games_back of this BaseballTeamStandingsRecord.


        :param conference_games_back: The conference_games_back of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._conference_games_back = conference_games_back

    @property
    def division_champ(self):
        """Gets the division_champ of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The division_champ of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._division_champ

    @division_champ.setter
    def division_champ(self, division_champ):
        """Sets the division_champ of this BaseballTeamStandingsRecord.


        :param division_champ: The division_champ of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._division_champ = division_champ

    @property
    def season(self):
        """Gets the season of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The season of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this BaseballTeamStandingsRecord.


        :param season: The season of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def streak(self):
        """Gets the streak of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The streak of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this BaseballTeamStandingsRecord.


        :param streak: The streak of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._streak = streak

    @property
    def last_updated(self):
        """Gets the last_updated of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The last_updated of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this BaseballTeamStandingsRecord.


        :param last_updated: The last_updated of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def home(self):
        """Gets the home of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The home of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this BaseballTeamStandingsRecord.


        :param home: The home of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._home = home

    @property
    def away(self):
        """Gets the away of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The away of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._away

    @away.setter
    def away(self, away):
        """Sets the away of this BaseballTeamStandingsRecord.


        :param away: The away of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._away = away

    @property
    def last_ten(self):
        """Gets the last_ten of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The last_ten of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._last_ten

    @last_ten.setter
    def last_ten(self, last_ten):
        """Sets the last_ten of this BaseballTeamStandingsRecord.


        :param last_ten: The last_ten of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._last_ten = last_ten

    @property
    def points(self):
        """Gets the points of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The points of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this BaseballTeamStandingsRecord.


        :param points: The points of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def clinch_indicator(self):
        """Gets the clinch_indicator of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The clinch_indicator of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._clinch_indicator

    @clinch_indicator.setter
    def clinch_indicator(self, clinch_indicator):
        """Sets the clinch_indicator of this BaseballTeamStandingsRecord.


        :param clinch_indicator: The clinch_indicator of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._clinch_indicator = clinch_indicator

    @property
    def division_rank(self):
        """Gets the division_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The division_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this BaseballTeamStandingsRecord.


        :param division_rank: The division_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._division_rank = division_rank

    @property
    def conference_rank(self):
        """Gets the conference_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The conference_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this BaseballTeamStandingsRecord.


        :param conference_rank: The conference_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._conference_rank = conference_rank

    @property
    def spring_league_rank(self):
        """Gets the spring_league_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The spring_league_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._spring_league_rank

    @spring_league_rank.setter
    def spring_league_rank(self, spring_league_rank):
        """Sets the spring_league_rank of this BaseballTeamStandingsRecord.


        :param spring_league_rank: The spring_league_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._spring_league_rank = spring_league_rank

    @property
    def league_rank(self):
        """Gets the league_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The league_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._league_rank

    @league_rank.setter
    def league_rank(self, league_rank):
        """Sets the league_rank of this BaseballTeamStandingsRecord.


        :param league_rank: The league_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._league_rank = league_rank

    @property
    def sport_rank(self):
        """Gets the sport_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The sport_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._sport_rank

    @sport_rank.setter
    def sport_rank(self, sport_rank):
        """Sets the sport_rank of this BaseballTeamStandingsRecord.


        :param sport_rank: The sport_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._sport_rank = sport_rank

    @property
    def wild_card_rank(self):
        """Gets the wild_card_rank of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wild_card_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._wild_card_rank

    @wild_card_rank.setter
    def wild_card_rank(self, wild_card_rank):
        """Sets the wild_card_rank of this BaseballTeamStandingsRecord.


        :param wild_card_rank: The wild_card_rank of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._wild_card_rank = wild_card_rank

    @property
    def games_played(self):
        """Gets the games_played of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The games_played of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._games_played

    @games_played.setter
    def games_played(self, games_played):
        """Sets the games_played of this BaseballTeamStandingsRecord.


        :param games_played: The games_played of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._games_played = games_played

    @property
    def place(self):
        """Gets the place of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The place of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this BaseballTeamStandingsRecord.


        :param place: The place of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._place = place

    @property
    def wildcard_place(self):
        """Gets the wildcard_place of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wildcard_place of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._wildcard_place

    @wildcard_place.setter
    def wildcard_place(self, wildcard_place):
        """Sets the wildcard_place of this BaseballTeamStandingsRecord.


        :param wildcard_place: The wildcard_place of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._wildcard_place = wildcard_place

    @property
    def wildcard_odds(self):
        """Gets the wildcard_odds of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wildcard_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: float
        """
        return self._wildcard_odds

    @wildcard_odds.setter
    def wildcard_odds(self, wildcard_odds):
        """Sets the wildcard_odds of this BaseballTeamStandingsRecord.


        :param wildcard_odds: The wildcard_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: float
        """

        self._wildcard_odds = wildcard_odds

    @property
    def division_odds(self):
        """Gets the division_odds of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The division_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: float
        """
        return self._division_odds

    @division_odds.setter
    def division_odds(self, division_odds):
        """Sets the division_odds of this BaseballTeamStandingsRecord.


        :param division_odds: The division_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: float
        """

        self._division_odds = division_odds

    @property
    def playoff_odds(self):
        """Gets the playoff_odds of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The playoff_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: float
        """
        return self._playoff_odds

    @playoff_odds.setter
    def playoff_odds(self, playoff_odds):
        """Sets the playoff_odds of this BaseballTeamStandingsRecord.


        :param playoff_odds: The playoff_odds of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: float
        """

        self._playoff_odds = playoff_odds

    @property
    def runs_allowed(self):
        """Gets the runs_allowed of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The runs_allowed of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._runs_allowed

    @runs_allowed.setter
    def runs_allowed(self, runs_allowed):
        """Sets the runs_allowed of this BaseballTeamStandingsRecord.


        :param runs_allowed: The runs_allowed of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._runs_allowed = runs_allowed

    @property
    def runs_scored(self):
        """Gets the runs_scored of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The runs_scored of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._runs_scored

    @runs_scored.setter
    def runs_scored(self, runs_scored):
        """Sets the runs_scored of this BaseballTeamStandingsRecord.


        :param runs_scored: The runs_scored of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._runs_scored = runs_scored

    @property
    def has_wildcard(self):
        """Gets the has_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The has_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._has_wildcard

    @has_wildcard.setter
    def has_wildcard(self, has_wildcard):
        """Sets the has_wildcard of this BaseballTeamStandingsRecord.


        :param has_wildcard: The has_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._has_wildcard = has_wildcard

    @property
    def clinched(self):
        """Gets the clinched of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The clinched of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._clinched

    @clinched.setter
    def clinched(self, clinched):
        """Sets the clinched of this BaseballTeamStandingsRecord.


        :param clinched: The clinched of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._clinched = clinched

    @property
    def elimination_number(self):
        """Gets the elimination_number of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number

    @elimination_number.setter
    def elimination_number(self, elimination_number):
        """Sets the elimination_number of this BaseballTeamStandingsRecord.


        :param elimination_number: The elimination_number of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number = elimination_number

    @property
    def elimination_number_sport(self):
        """Gets the elimination_number_sport of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number_sport of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number_sport

    @elimination_number_sport.setter
    def elimination_number_sport(self, elimination_number_sport):
        """Sets the elimination_number_sport of this BaseballTeamStandingsRecord.


        :param elimination_number_sport: The elimination_number_sport of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number_sport = elimination_number_sport

    @property
    def elimination_number_league(self):
        """Gets the elimination_number_league of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number_league of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number_league

    @elimination_number_league.setter
    def elimination_number_league(self, elimination_number_league):
        """Sets the elimination_number_league of this BaseballTeamStandingsRecord.


        :param elimination_number_league: The elimination_number_league of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number_league = elimination_number_league

    @property
    def elimination_number_division(self):
        """Gets the elimination_number_division of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number_division of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number_division

    @elimination_number_division.setter
    def elimination_number_division(self, elimination_number_division):
        """Sets the elimination_number_division of this BaseballTeamStandingsRecord.


        :param elimination_number_division: The elimination_number_division of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number_division = elimination_number_division

    @property
    def elimination_number_conference(self):
        """Gets the elimination_number_conference of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number_conference of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number_conference

    @elimination_number_conference.setter
    def elimination_number_conference(self, elimination_number_conference):
        """Sets the elimination_number_conference of this BaseballTeamStandingsRecord.


        :param elimination_number_conference: The elimination_number_conference of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number_conference = elimination_number_conference

    @property
    def elimination_number_wildcard(self):
        """Gets the elimination_number_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The elimination_number_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._elimination_number_wildcard

    @elimination_number_wildcard.setter
    def elimination_number_wildcard(self, elimination_number_wildcard):
        """Sets the elimination_number_wildcard of this BaseballTeamStandingsRecord.


        :param elimination_number_wildcard: The elimination_number_wildcard of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._elimination_number_wildcard = elimination_number_wildcard

    @property
    def magic_number(self):
        """Gets the magic_number of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The magic_number of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._magic_number

    @magic_number.setter
    def magic_number(self, magic_number):
        """Sets the magic_number of this BaseballTeamStandingsRecord.


        :param magic_number: The magic_number of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._magic_number = magic_number

    @property
    def has_playoff_points(self):
        """Gets the has_playoff_points of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The has_playoff_points of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._has_playoff_points

    @has_playoff_points.setter
    def has_playoff_points(self, has_playoff_points):
        """Sets the has_playoff_points of this BaseballTeamStandingsRecord.


        :param has_playoff_points: The has_playoff_points of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._has_playoff_points = has_playoff_points

    @property
    def vs_west(self):
        """Gets the vs_west of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_west of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_west

    @vs_west.setter
    def vs_west(self, vs_west):
        """Sets the vs_west of this BaseballTeamStandingsRecord.


        :param vs_west: The vs_west of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_west = vs_west

    @property
    def vs_central(self):
        """Gets the vs_central of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_central of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_central

    @vs_central.setter
    def vs_central(self, vs_central):
        """Sets the vs_central of this BaseballTeamStandingsRecord.


        :param vs_central: The vs_central of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_central = vs_central

    @property
    def vs_east(self):
        """Gets the vs_east of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_east of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_east

    @vs_east.setter
    def vs_east(self, vs_east):
        """Sets the vs_east of this BaseballTeamStandingsRecord.


        :param vs_east: The vs_east of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_east = vs_east

    @property
    def vs_interleague(self):
        """Gets the vs_interleague of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_interleague of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_interleague

    @vs_interleague.setter
    def vs_interleague(self, vs_interleague):
        """Sets the vs_interleague of this BaseballTeamStandingsRecord.


        :param vs_interleague: The vs_interleague of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_interleague = vs_interleague

    @property
    def vs_right(self):
        """Gets the vs_right of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_right of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_right

    @vs_right.setter
    def vs_right(self, vs_right):
        """Sets the vs_right of this BaseballTeamStandingsRecord.


        :param vs_right: The vs_right of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_right = vs_right

    @property
    def vs_right_home_win(self):
        """Gets the vs_right_home_win of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_right_home_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_right_home_win

    @vs_right_home_win.setter
    def vs_right_home_win(self, vs_right_home_win):
        """Sets the vs_right_home_win of this BaseballTeamStandingsRecord.


        :param vs_right_home_win: The vs_right_home_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_right_home_win = vs_right_home_win

    @property
    def vs_right_home_loss(self):
        """Gets the vs_right_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_right_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_right_home_loss

    @vs_right_home_loss.setter
    def vs_right_home_loss(self, vs_right_home_loss):
        """Sets the vs_right_home_loss of this BaseballTeamStandingsRecord.


        :param vs_right_home_loss: The vs_right_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_right_home_loss = vs_right_home_loss

    @property
    def vs_right_away_win(self):
        """Gets the vs_right_away_win of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_right_away_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_right_away_win

    @vs_right_away_win.setter
    def vs_right_away_win(self, vs_right_away_win):
        """Sets the vs_right_away_win of this BaseballTeamStandingsRecord.


        :param vs_right_away_win: The vs_right_away_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_right_away_win = vs_right_away_win

    @property
    def vs_right_away_loss(self):
        """Gets the vs_right_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_right_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_right_away_loss

    @vs_right_away_loss.setter
    def vs_right_away_loss(self, vs_right_away_loss):
        """Sets the vs_right_away_loss of this BaseballTeamStandingsRecord.


        :param vs_right_away_loss: The vs_right_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_right_away_loss = vs_right_away_loss

    @property
    def vs_left(self):
        """Gets the vs_left of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_left of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_left

    @vs_left.setter
    def vs_left(self, vs_left):
        """Sets the vs_left of this BaseballTeamStandingsRecord.


        :param vs_left: The vs_left of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_left = vs_left

    @property
    def vs_left_home_win(self):
        """Gets the vs_left_home_win of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_left_home_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_left_home_win

    @vs_left_home_win.setter
    def vs_left_home_win(self, vs_left_home_win):
        """Sets the vs_left_home_win of this BaseballTeamStandingsRecord.


        :param vs_left_home_win: The vs_left_home_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_left_home_win = vs_left_home_win

    @property
    def vs_left_home_loss(self):
        """Gets the vs_left_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_left_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_left_home_loss

    @vs_left_home_loss.setter
    def vs_left_home_loss(self, vs_left_home_loss):
        """Sets the vs_left_home_loss of this BaseballTeamStandingsRecord.


        :param vs_left_home_loss: The vs_left_home_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_left_home_loss = vs_left_home_loss

    @property
    def vs_left_away_win(self):
        """Gets the vs_left_away_win of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_left_away_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_left_away_win

    @vs_left_away_win.setter
    def vs_left_away_win(self, vs_left_away_win):
        """Sets the vs_left_away_win of this BaseballTeamStandingsRecord.


        :param vs_left_away_win: The vs_left_away_win of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_left_away_win = vs_left_away_win

    @property
    def vs_left_away_loss(self):
        """Gets the vs_left_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_left_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_left_away_loss

    @vs_left_away_loss.setter
    def vs_left_away_loss(self, vs_left_away_loss):
        """Sets the vs_left_away_loss of this BaseballTeamStandingsRecord.


        :param vs_left_away_loss: The vs_left_away_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_left_away_loss = vs_left_away_loss

    @property
    def vs_winners(self):
        """Gets the vs_winners of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The vs_winners of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._vs_winners

    @vs_winners.setter
    def vs_winners(self, vs_winners):
        """Sets the vs_winners of this BaseballTeamStandingsRecord.


        :param vs_winners: The vs_winners of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._vs_winners = vs_winners

    @property
    def extra_innings(self):
        """Gets the extra_innings of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The extra_innings of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._extra_innings

    @extra_innings.setter
    def extra_innings(self, extra_innings):
        """Sets the extra_innings of this BaseballTeamStandingsRecord.


        :param extra_innings: The extra_innings of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._extra_innings = extra_innings

    @property
    def expected_win_loss(self):
        """Gets the expected_win_loss of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The expected_win_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._expected_win_loss

    @expected_win_loss.setter
    def expected_win_loss(self, expected_win_loss):
        """Sets the expected_win_loss of this BaseballTeamStandingsRecord.


        :param expected_win_loss: The expected_win_loss of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._expected_win_loss = expected_win_loss

    @property
    def expected_win_loss_season(self):
        """Gets the expected_win_loss_season of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The expected_win_loss_season of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._expected_win_loss_season

    @expected_win_loss_season.setter
    def expected_win_loss_season(self, expected_win_loss_season):
        """Sets the expected_win_loss_season of this BaseballTeamStandingsRecord.


        :param expected_win_loss_season: The expected_win_loss_season of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._expected_win_loss_season = expected_win_loss_season

    @property
    def one_run_games(self):
        """Gets the one_run_games of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The one_run_games of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._one_run_games

    @one_run_games.setter
    def one_run_games(self, one_run_games):
        """Sets the one_run_games of this BaseballTeamStandingsRecord.


        :param one_run_games: The one_run_games of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._one_run_games = one_run_games

    @property
    def turf(self):
        """Gets the turf of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The turf of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._turf

    @turf.setter
    def turf(self, turf):
        """Sets the turf of this BaseballTeamStandingsRecord.


        :param turf: The turf of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._turf = turf

    @property
    def grass(self):
        """Gets the grass of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The grass of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._grass

    @grass.setter
    def grass(self, grass):
        """Sets the grass of this BaseballTeamStandingsRecord.


        :param grass: The grass of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._grass = grass

    @property
    def night(self):
        """Gets the night of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The night of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._night

    @night.setter
    def night(self, night):
        """Sets the night of this BaseballTeamStandingsRecord.


        :param night: The night of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._night = night

    @property
    def day(self):
        """Gets the day of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The day of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this BaseballTeamStandingsRecord.


        :param day: The day of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def is_wild_card_team(self):
        """Gets the is_wild_card_team of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The is_wild_card_team of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._is_wild_card_team

    @is_wild_card_team.setter
    def is_wild_card_team(self, is_wild_card_team):
        """Sets the is_wild_card_team of this BaseballTeamStandingsRecord.


        :param is_wild_card_team: The is_wild_card_team of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._is_wild_card_team = is_wild_card_team

    @property
    def is_division_leader(self):
        """Gets the is_division_leader of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The is_division_leader of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._is_division_leader

    @is_division_leader.setter
    def is_division_leader(self, is_division_leader):
        """Sets the is_division_leader of this BaseballTeamStandingsRecord.


        :param is_division_leader: The is_division_leader of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._is_division_leader = is_division_leader

    @property
    def division_records(self):
        """Gets the division_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The division_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._division_records

    @division_records.setter
    def division_records(self, division_records):
        """Sets the division_records of this BaseballTeamStandingsRecord.


        :param division_records: The division_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._division_records = division_records

    @property
    def conference_records(self):
        """Gets the conference_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The conference_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._conference_records

    @conference_records.setter
    def conference_records(self, conference_records):
        """Sets the conference_records of this BaseballTeamStandingsRecord.


        :param conference_records: The conference_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._conference_records = conference_records

    @property
    def league_records(self):
        """Gets the league_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The league_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._league_records

    @league_records.setter
    def league_records(self, league_records):
        """Sets the league_records of this BaseballTeamStandingsRecord.


        :param league_records: The league_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._league_records = league_records

    @property
    def split_records(self):
        """Gets the split_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The split_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._split_records

    @split_records.setter
    def split_records(self, split_records):
        """Sets the split_records of this BaseballTeamStandingsRecord.


        :param split_records: The split_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._split_records = split_records

    @property
    def expected_records(self):
        """Gets the expected_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The expected_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._expected_records

    @expected_records.setter
    def expected_records(self, expected_records):
        """Sets the expected_records of this BaseballTeamStandingsRecord.


        :param expected_records: The expected_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._expected_records = expected_records

    @property
    def overall_records(self):
        """Gets the overall_records of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The overall_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: list[WinLossRecord]
        """
        return self._overall_records

    @overall_records.setter
    def overall_records(self, overall_records):
        """Sets the overall_records of this BaseballTeamStandingsRecord.


        :param overall_records: The overall_records of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: list[WinLossRecord]
        """

        self._overall_records = overall_records

    @property
    def conference(self):
        """Gets the conference of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The conference of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: Conference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this BaseballTeamStandingsRecord.


        :param conference: The conference of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: Conference
        """

        self._conference = conference

    @property
    def run_differental(self):
        """Gets the run_differental of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The run_differental of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: int
        """
        return self._run_differental

    @run_differental.setter
    def run_differental(self, run_differental):
        """Sets the run_differental of this BaseballTeamStandingsRecord.


        :param run_differental: The run_differental of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: int
        """

        self._run_differental = run_differental

    @property
    def wild_card_leader(self):
        """Gets the wild_card_leader of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The wild_card_leader of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._wild_card_leader

    @wild_card_leader.setter
    def wild_card_leader(self, wild_card_leader):
        """Sets the wild_card_leader of this BaseballTeamStandingsRecord.


        :param wild_card_leader: The wild_card_leader of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: bool
        """

        self._wild_card_leader = wild_card_leader

    @property
    def winning_percentage(self):
        """Gets the winning_percentage of this BaseballTeamStandingsRecord.  # noqa: E501


        :return: The winning_percentage of this BaseballTeamStandingsRecord.  # noqa: E501
        :rtype: float
        """
        return self._winning_percentage

    @winning_percentage.setter
    def winning_percentage(self, winning_percentage):
        """Sets the winning_percentage of this BaseballTeamStandingsRecord.


        :param winning_percentage: The winning_percentage of this BaseballTeamStandingsRecord.  # noqa: E501
        :type: float
        """

        self._winning_percentage = winning_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballTeamStandingsRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballTeamStandingsRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
