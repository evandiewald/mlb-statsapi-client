# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerListPerson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_list_id': 'str',
        'player_list_name': 'str',
        'season': 'str',
        'player': 'BaseballPerson',
        'league': 'League',
        'team': 'BaseballTeam',
        'position': 'BaseballPosition'
    }

    attribute_map = {
        'player_list_id': 'playerListId',
        'player_list_name': 'playerListName',
        'season': 'season',
        'player': 'player',
        'league': 'league',
        'team': 'team',
        'position': 'position'
    }

    def __init__(self, player_list_id=None, player_list_name=None, season=None, player=None, league=None, team=None, position=None):  # noqa: E501
        """PlayerListPerson - a model defined in Swagger"""  # noqa: E501
        self._player_list_id = None
        self._player_list_name = None
        self._season = None
        self._player = None
        self._league = None
        self._team = None
        self._position = None
        self.discriminator = None
        if player_list_id is not None:
            self.player_list_id = player_list_id
        if player_list_name is not None:
            self.player_list_name = player_list_name
        if season is not None:
            self.season = season
        if player is not None:
            self.player = player
        if league is not None:
            self.league = league
        if team is not None:
            self.team = team
        if position is not None:
            self.position = position

    @property
    def player_list_id(self):
        """Gets the player_list_id of this PlayerListPerson.  # noqa: E501


        :return: The player_list_id of this PlayerListPerson.  # noqa: E501
        :rtype: str
        """
        return self._player_list_id

    @player_list_id.setter
    def player_list_id(self, player_list_id):
        """Sets the player_list_id of this PlayerListPerson.


        :param player_list_id: The player_list_id of this PlayerListPerson.  # noqa: E501
        :type: str
        """

        self._player_list_id = player_list_id

    @property
    def player_list_name(self):
        """Gets the player_list_name of this PlayerListPerson.  # noqa: E501


        :return: The player_list_name of this PlayerListPerson.  # noqa: E501
        :rtype: str
        """
        return self._player_list_name

    @player_list_name.setter
    def player_list_name(self, player_list_name):
        """Sets the player_list_name of this PlayerListPerson.


        :param player_list_name: The player_list_name of this PlayerListPerson.  # noqa: E501
        :type: str
        """

        self._player_list_name = player_list_name

    @property
    def season(self):
        """Gets the season of this PlayerListPerson.  # noqa: E501


        :return: The season of this PlayerListPerson.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PlayerListPerson.


        :param season: The season of this PlayerListPerson.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def player(self):
        """Gets the player of this PlayerListPerson.  # noqa: E501


        :return: The player of this PlayerListPerson.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this PlayerListPerson.


        :param player: The player of this PlayerListPerson.  # noqa: E501
        :type: BaseballPerson
        """

        self._player = player

    @property
    def league(self):
        """Gets the league of this PlayerListPerson.  # noqa: E501


        :return: The league of this PlayerListPerson.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this PlayerListPerson.


        :param league: The league of this PlayerListPerson.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def team(self):
        """Gets the team of this PlayerListPerson.  # noqa: E501


        :return: The team of this PlayerListPerson.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PlayerListPerson.


        :param team: The team of this PlayerListPerson.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def position(self):
        """Gets the position of this PlayerListPerson.  # noqa: E501


        :return: The position of this PlayerListPerson.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayerListPerson.


        :param position: The position of this PlayerListPerson.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerListPerson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerListPerson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
