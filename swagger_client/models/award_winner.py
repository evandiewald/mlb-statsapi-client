# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AwardWinner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'award_id': 'int',
        'team_id': 'int',
        'coach_id': 'int',
        'player_id': 'int',
        'rank': 'str',
        'person': 'BaseballPerson',
        'player': 'BaseballPerson',
        'coach': 'BaseballPerson',
        'team': 'BaseballTeam',
        'award_date': 'date',
        'season': 'str',
        'empty': 'bool',
        'not_empty': 'bool'
    }

    attribute_map = {
        'award_id': 'awardId',
        'team_id': 'teamId',
        'coach_id': 'coachId',
        'player_id': 'playerId',
        'rank': 'rank',
        'person': 'person',
        'player': 'player',
        'coach': 'coach',
        'team': 'team',
        'award_date': 'awardDate',
        'season': 'season',
        'empty': 'empty',
        'not_empty': 'notEmpty'
    }

    def __init__(self, award_id=None, team_id=None, coach_id=None, player_id=None, rank=None, person=None, player=None, coach=None, team=None, award_date=None, season=None, empty=None, not_empty=None):  # noqa: E501
        """AwardWinner - a model defined in Swagger"""  # noqa: E501
        self._award_id = None
        self._team_id = None
        self._coach_id = None
        self._player_id = None
        self._rank = None
        self._person = None
        self._player = None
        self._coach = None
        self._team = None
        self._award_date = None
        self._season = None
        self._empty = None
        self._not_empty = None
        self.discriminator = None
        if award_id is not None:
            self.award_id = award_id
        if team_id is not None:
            self.team_id = team_id
        if coach_id is not None:
            self.coach_id = coach_id
        if player_id is not None:
            self.player_id = player_id
        if rank is not None:
            self.rank = rank
        if person is not None:
            self.person = person
        if player is not None:
            self.player = player
        if coach is not None:
            self.coach = coach
        if team is not None:
            self.team = team
        if award_date is not None:
            self.award_date = award_date
        if season is not None:
            self.season = season
        if empty is not None:
            self.empty = empty
        if not_empty is not None:
            self.not_empty = not_empty

    @property
    def award_id(self):
        """Gets the award_id of this AwardWinner.  # noqa: E501


        :return: The award_id of this AwardWinner.  # noqa: E501
        :rtype: int
        """
        return self._award_id

    @award_id.setter
    def award_id(self, award_id):
        """Sets the award_id of this AwardWinner.


        :param award_id: The award_id of this AwardWinner.  # noqa: E501
        :type: int
        """

        self._award_id = award_id

    @property
    def team_id(self):
        """Gets the team_id of this AwardWinner.  # noqa: E501


        :return: The team_id of this AwardWinner.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this AwardWinner.


        :param team_id: The team_id of this AwardWinner.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def coach_id(self):
        """Gets the coach_id of this AwardWinner.  # noqa: E501


        :return: The coach_id of this AwardWinner.  # noqa: E501
        :rtype: int
        """
        return self._coach_id

    @coach_id.setter
    def coach_id(self, coach_id):
        """Sets the coach_id of this AwardWinner.


        :param coach_id: The coach_id of this AwardWinner.  # noqa: E501
        :type: int
        """

        self._coach_id = coach_id

    @property
    def player_id(self):
        """Gets the player_id of this AwardWinner.  # noqa: E501


        :return: The player_id of this AwardWinner.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this AwardWinner.


        :param player_id: The player_id of this AwardWinner.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def rank(self):
        """Gets the rank of this AwardWinner.  # noqa: E501


        :return: The rank of this AwardWinner.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this AwardWinner.


        :param rank: The rank of this AwardWinner.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def person(self):
        """Gets the person of this AwardWinner.  # noqa: E501


        :return: The person of this AwardWinner.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this AwardWinner.


        :param person: The person of this AwardWinner.  # noqa: E501
        :type: BaseballPerson
        """

        self._person = person

    @property
    def player(self):
        """Gets the player of this AwardWinner.  # noqa: E501


        :return: The player of this AwardWinner.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this AwardWinner.


        :param player: The player of this AwardWinner.  # noqa: E501
        :type: BaseballPerson
        """

        self._player = player

    @property
    def coach(self):
        """Gets the coach of this AwardWinner.  # noqa: E501


        :return: The coach of this AwardWinner.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this AwardWinner.


        :param coach: The coach of this AwardWinner.  # noqa: E501
        :type: BaseballPerson
        """

        self._coach = coach

    @property
    def team(self):
        """Gets the team of this AwardWinner.  # noqa: E501


        :return: The team of this AwardWinner.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AwardWinner.


        :param team: The team of this AwardWinner.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def award_date(self):
        """Gets the award_date of this AwardWinner.  # noqa: E501


        :return: The award_date of this AwardWinner.  # noqa: E501
        :rtype: date
        """
        return self._award_date

    @award_date.setter
    def award_date(self, award_date):
        """Sets the award_date of this AwardWinner.


        :param award_date: The award_date of this AwardWinner.  # noqa: E501
        :type: date
        """

        self._award_date = award_date

    @property
    def season(self):
        """Gets the season of this AwardWinner.  # noqa: E501


        :return: The season of this AwardWinner.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this AwardWinner.


        :param season: The season of this AwardWinner.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def empty(self):
        """Gets the empty of this AwardWinner.  # noqa: E501


        :return: The empty of this AwardWinner.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this AwardWinner.


        :param empty: The empty of this AwardWinner.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def not_empty(self):
        """Gets the not_empty of this AwardWinner.  # noqa: E501


        :return: The not_empty of this AwardWinner.  # noqa: E501
        :rtype: bool
        """
        return self._not_empty

    @not_empty.setter
    def not_empty(self, not_empty):
        """Sets the not_empty of this AwardWinner.


        :param not_empty: The not_empty of this AwardWinner.  # noqa: E501
        :type: bool
        """

        self._not_empty = not_empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwardWinner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwardWinner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
