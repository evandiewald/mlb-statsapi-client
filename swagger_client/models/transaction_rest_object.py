# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'id': 'int',
        'person': 'BaseballPersonRestObject',
        'from_team': 'BaseballTeamRestObject',
        'to_team': 'BaseballTeamRestObject',
        '_date': 'date',
        'effective_date': 'date',
        'resolution_date': 'date',
        'type': 'str',
        'type_code': 'str',
        'type_desc': 'str',
        'is_conditional': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'id': 'id',
        'person': 'person',
        'from_team': 'fromTeam',
        'to_team': 'toTeam',
        '_date': 'date',
        'effective_date': 'effectiveDate',
        'resolution_date': 'resolutionDate',
        'type': 'type',
        'type_code': 'typeCode',
        'type_desc': 'typeDesc',
        'is_conditional': 'isConditional',
        'description': 'description'
    }

    def __init__(self, copyright=None, id=None, person=None, from_team=None, to_team=None, _date=None, effective_date=None, resolution_date=None, type=None, type_code=None, type_desc=None, is_conditional=None, description=None):  # noqa: E501
        """TransactionRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._id = None
        self._person = None
        self._from_team = None
        self._to_team = None
        self.__date = None
        self._effective_date = None
        self._resolution_date = None
        self._type = None
        self._type_code = None
        self._type_desc = None
        self._is_conditional = None
        self._description = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if id is not None:
            self.id = id
        if person is not None:
            self.person = person
        if from_team is not None:
            self.from_team = from_team
        if to_team is not None:
            self.to_team = to_team
        if _date is not None:
            self._date = _date
        if effective_date is not None:
            self.effective_date = effective_date
        if resolution_date is not None:
            self.resolution_date = resolution_date
        if type is not None:
            self.type = type
        if type_code is not None:
            self.type_code = type_code
        if type_desc is not None:
            self.type_desc = type_desc
        if is_conditional is not None:
            self.is_conditional = is_conditional
        if description is not None:
            self.description = description

    @property
    def copyright(self):
        """Gets the copyright of this TransactionRestObject.  # noqa: E501


        :return: The copyright of this TransactionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this TransactionRestObject.


        :param copyright: The copyright of this TransactionRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def id(self):
        """Gets the id of this TransactionRestObject.  # noqa: E501


        :return: The id of this TransactionRestObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionRestObject.


        :param id: The id of this TransactionRestObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def person(self):
        """Gets the person of this TransactionRestObject.  # noqa: E501


        :return: The person of this TransactionRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this TransactionRestObject.


        :param person: The person of this TransactionRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._person = person

    @property
    def from_team(self):
        """Gets the from_team of this TransactionRestObject.  # noqa: E501


        :return: The from_team of this TransactionRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._from_team

    @from_team.setter
    def from_team(self, from_team):
        """Sets the from_team of this TransactionRestObject.


        :param from_team: The from_team of this TransactionRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._from_team = from_team

    @property
    def to_team(self):
        """Gets the to_team of this TransactionRestObject.  # noqa: E501


        :return: The to_team of this TransactionRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._to_team

    @to_team.setter
    def to_team(self, to_team):
        """Sets the to_team of this TransactionRestObject.


        :param to_team: The to_team of this TransactionRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._to_team = to_team

    @property
    def _date(self):
        """Gets the _date of this TransactionRestObject.  # noqa: E501


        :return: The _date of this TransactionRestObject.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransactionRestObject.


        :param _date: The _date of this TransactionRestObject.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def effective_date(self):
        """Gets the effective_date of this TransactionRestObject.  # noqa: E501


        :return: The effective_date of this TransactionRestObject.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this TransactionRestObject.


        :param effective_date: The effective_date of this TransactionRestObject.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def resolution_date(self):
        """Gets the resolution_date of this TransactionRestObject.  # noqa: E501


        :return: The resolution_date of this TransactionRestObject.  # noqa: E501
        :rtype: date
        """
        return self._resolution_date

    @resolution_date.setter
    def resolution_date(self, resolution_date):
        """Sets the resolution_date of this TransactionRestObject.


        :param resolution_date: The resolution_date of this TransactionRestObject.  # noqa: E501
        :type: date
        """

        self._resolution_date = resolution_date

    @property
    def type(self):
        """Gets the type of this TransactionRestObject.  # noqa: E501


        :return: The type of this TransactionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionRestObject.


        :param type: The type of this TransactionRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_code(self):
        """Gets the type_code of this TransactionRestObject.  # noqa: E501


        :return: The type_code of this TransactionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this TransactionRestObject.


        :param type_code: The type_code of this TransactionRestObject.  # noqa: E501
        :type: str
        """

        self._type_code = type_code

    @property
    def type_desc(self):
        """Gets the type_desc of this TransactionRestObject.  # noqa: E501


        :return: The type_desc of this TransactionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type_desc

    @type_desc.setter
    def type_desc(self, type_desc):
        """Sets the type_desc of this TransactionRestObject.


        :param type_desc: The type_desc of this TransactionRestObject.  # noqa: E501
        :type: str
        """

        self._type_desc = type_desc

    @property
    def is_conditional(self):
        """Gets the is_conditional of this TransactionRestObject.  # noqa: E501


        :return: The is_conditional of this TransactionRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_conditional

    @is_conditional.setter
    def is_conditional(self, is_conditional):
        """Sets the is_conditional of this TransactionRestObject.


        :param is_conditional: The is_conditional of this TransactionRestObject.  # noqa: E501
        :type: bool
        """

        self._is_conditional = is_conditional

    @property
    def description(self):
        """Gets the description of this TransactionRestObject.  # noqa: E501


        :return: The description of this TransactionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionRestObject.


        :param description: The description of this TransactionRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
