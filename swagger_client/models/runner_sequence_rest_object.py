# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunnerSequenceRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'position_id': 'int',
        'start_base': 'int',
        'end_base': 'int',
        'is_out': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'position_id': 'positionId',
        'start_base': 'startBase',
        'end_base': 'endBase',
        'is_out': 'isOut'
    }

    def __init__(self, copyright=None, position_id=None, start_base=None, end_base=None, is_out=None):  # noqa: E501
        """RunnerSequenceRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._position_id = None
        self._start_base = None
        self._end_base = None
        self._is_out = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if position_id is not None:
            self.position_id = position_id
        if start_base is not None:
            self.start_base = start_base
        if end_base is not None:
            self.end_base = end_base
        if is_out is not None:
            self.is_out = is_out

    @property
    def copyright(self):
        """Gets the copyright of this RunnerSequenceRestObject.  # noqa: E501


        :return: The copyright of this RunnerSequenceRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this RunnerSequenceRestObject.


        :param copyright: The copyright of this RunnerSequenceRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def position_id(self):
        """Gets the position_id of this RunnerSequenceRestObject.  # noqa: E501


        :return: The position_id of this RunnerSequenceRestObject.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this RunnerSequenceRestObject.


        :param position_id: The position_id of this RunnerSequenceRestObject.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def start_base(self):
        """Gets the start_base of this RunnerSequenceRestObject.  # noqa: E501


        :return: The start_base of this RunnerSequenceRestObject.  # noqa: E501
        :rtype: int
        """
        return self._start_base

    @start_base.setter
    def start_base(self, start_base):
        """Sets the start_base of this RunnerSequenceRestObject.


        :param start_base: The start_base of this RunnerSequenceRestObject.  # noqa: E501
        :type: int
        """

        self._start_base = start_base

    @property
    def end_base(self):
        """Gets the end_base of this RunnerSequenceRestObject.  # noqa: E501


        :return: The end_base of this RunnerSequenceRestObject.  # noqa: E501
        :rtype: int
        """
        return self._end_base

    @end_base.setter
    def end_base(self, end_base):
        """Sets the end_base of this RunnerSequenceRestObject.


        :param end_base: The end_base of this RunnerSequenceRestObject.  # noqa: E501
        :type: int
        """

        self._end_base = end_base

    @property
    def is_out(self):
        """Gets the is_out of this RunnerSequenceRestObject.  # noqa: E501


        :return: The is_out of this RunnerSequenceRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_out

    @is_out.setter
    def is_out(self, is_out):
        """Sets the is_out of this RunnerSequenceRestObject.


        :param is_out: The is_out of this RunnerSequenceRestObject.  # noqa: E501
        :type: bool
        """

        self._is_out = is_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunnerSequenceRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunnerSequenceRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
