# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UniformRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'uniform_asset_id': 'int',
        'uniform_asset_code': 'str',
        'uniform_asset_text': 'str',
        'uniform_asset_type': 'UniformAssetTypeRestObject',
        'active': 'bool',
        'start_season': 'str',
        'end_season': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'uniform_asset_id': 'uniformAssetId',
        'uniform_asset_code': 'uniformAssetCode',
        'uniform_asset_text': 'uniformAssetText',
        'uniform_asset_type': 'uniformAssetType',
        'active': 'active',
        'start_season': 'startSeason',
        'end_season': 'endSeason'
    }

    def __init__(self, copyright=None, uniform_asset_id=None, uniform_asset_code=None, uniform_asset_text=None, uniform_asset_type=None, active=None, start_season=None, end_season=None):  # noqa: E501
        """UniformRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._uniform_asset_id = None
        self._uniform_asset_code = None
        self._uniform_asset_text = None
        self._uniform_asset_type = None
        self._active = None
        self._start_season = None
        self._end_season = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if uniform_asset_id is not None:
            self.uniform_asset_id = uniform_asset_id
        if uniform_asset_code is not None:
            self.uniform_asset_code = uniform_asset_code
        if uniform_asset_text is not None:
            self.uniform_asset_text = uniform_asset_text
        if uniform_asset_type is not None:
            self.uniform_asset_type = uniform_asset_type
        if active is not None:
            self.active = active
        if start_season is not None:
            self.start_season = start_season
        if end_season is not None:
            self.end_season = end_season

    @property
    def copyright(self):
        """Gets the copyright of this UniformRestObject.  # noqa: E501


        :return: The copyright of this UniformRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this UniformRestObject.


        :param copyright: The copyright of this UniformRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def uniform_asset_id(self):
        """Gets the uniform_asset_id of this UniformRestObject.  # noqa: E501


        :return: The uniform_asset_id of this UniformRestObject.  # noqa: E501
        :rtype: int
        """
        return self._uniform_asset_id

    @uniform_asset_id.setter
    def uniform_asset_id(self, uniform_asset_id):
        """Sets the uniform_asset_id of this UniformRestObject.


        :param uniform_asset_id: The uniform_asset_id of this UniformRestObject.  # noqa: E501
        :type: int
        """

        self._uniform_asset_id = uniform_asset_id

    @property
    def uniform_asset_code(self):
        """Gets the uniform_asset_code of this UniformRestObject.  # noqa: E501


        :return: The uniform_asset_code of this UniformRestObject.  # noqa: E501
        :rtype: str
        """
        return self._uniform_asset_code

    @uniform_asset_code.setter
    def uniform_asset_code(self, uniform_asset_code):
        """Sets the uniform_asset_code of this UniformRestObject.


        :param uniform_asset_code: The uniform_asset_code of this UniformRestObject.  # noqa: E501
        :type: str
        """

        self._uniform_asset_code = uniform_asset_code

    @property
    def uniform_asset_text(self):
        """Gets the uniform_asset_text of this UniformRestObject.  # noqa: E501


        :return: The uniform_asset_text of this UniformRestObject.  # noqa: E501
        :rtype: str
        """
        return self._uniform_asset_text

    @uniform_asset_text.setter
    def uniform_asset_text(self, uniform_asset_text):
        """Sets the uniform_asset_text of this UniformRestObject.


        :param uniform_asset_text: The uniform_asset_text of this UniformRestObject.  # noqa: E501
        :type: str
        """

        self._uniform_asset_text = uniform_asset_text

    @property
    def uniform_asset_type(self):
        """Gets the uniform_asset_type of this UniformRestObject.  # noqa: E501


        :return: The uniform_asset_type of this UniformRestObject.  # noqa: E501
        :rtype: UniformAssetTypeRestObject
        """
        return self._uniform_asset_type

    @uniform_asset_type.setter
    def uniform_asset_type(self, uniform_asset_type):
        """Sets the uniform_asset_type of this UniformRestObject.


        :param uniform_asset_type: The uniform_asset_type of this UniformRestObject.  # noqa: E501
        :type: UniformAssetTypeRestObject
        """

        self._uniform_asset_type = uniform_asset_type

    @property
    def active(self):
        """Gets the active of this UniformRestObject.  # noqa: E501


        :return: The active of this UniformRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UniformRestObject.


        :param active: The active of this UniformRestObject.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def start_season(self):
        """Gets the start_season of this UniformRestObject.  # noqa: E501


        :return: The start_season of this UniformRestObject.  # noqa: E501
        :rtype: str
        """
        return self._start_season

    @start_season.setter
    def start_season(self, start_season):
        """Sets the start_season of this UniformRestObject.


        :param start_season: The start_season of this UniformRestObject.  # noqa: E501
        :type: str
        """

        self._start_season = start_season

    @property
    def end_season(self):
        """Gets the end_season of this UniformRestObject.  # noqa: E501


        :return: The end_season of this UniformRestObject.  # noqa: E501
        :rtype: str
        """
        return self._end_season

    @end_season.setter
    def end_season(self, end_season):
        """Sets the end_season of this UniformRestObject.


        :param end_season: The end_season of this UniformRestObject.  # noqa: E501
        :type: str
        """

        self._end_season = end_season

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UniformRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UniformRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
