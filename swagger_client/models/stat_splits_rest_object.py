# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatSplitsRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'season': 'str',
        'stat': 'StatDataRestObject',
        'stats': 'GroupedStatDataRestObject',
        'team': 'BaseballTeamRestObject',
        'player': 'BaseballPersonRestObject',
        'home_team': 'BaseballTeamRestObject',
        'away_team': 'BaseballTeamRestObject',
        'venue': 'VenueRestObject',
        'league': 'LeagueRestObject',
        'sport': 'SportRestObject',
        'opponent': 'BaseballTeamRestObject',
        'opponent_division': 'DivisionRestObject',
        'opponent_conference': 'ConferenceRestObject',
        '_date': 'date',
        'game_type': 'str',
        'is_home': 'bool',
        'is_win': 'bool',
        'day_of_week': 'int',
        'month': 'int',
        'num_teams': 'int',
        'num_occurrences': 'int',
        'rank': 'int',
        'type': 'str',
        'group': 'str',
        'split': 'DynamicEnumRestObject',
        'exemption': 'StatExemptionRestObject',
        'num_leagues': 'int',
        'game': 'BaseballScheduleItemRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'season': 'season',
        'stat': 'stat',
        'stats': 'stats',
        'team': 'team',
        'player': 'player',
        'home_team': 'homeTeam',
        'away_team': 'awayTeam',
        'venue': 'venue',
        'league': 'league',
        'sport': 'sport',
        'opponent': 'opponent',
        'opponent_division': 'opponentDivision',
        'opponent_conference': 'opponentConference',
        '_date': 'date',
        'game_type': 'gameType',
        'is_home': 'isHome',
        'is_win': 'isWin',
        'day_of_week': 'dayOfWeek',
        'month': 'month',
        'num_teams': 'numTeams',
        'num_occurrences': 'numOccurrences',
        'rank': 'rank',
        'type': 'type',
        'group': 'group',
        'split': 'split',
        'exemption': 'exemption',
        'num_leagues': 'numLeagues',
        'game': 'game'
    }

    def __init__(self, copyright=None, season=None, stat=None, stats=None, team=None, player=None, home_team=None, away_team=None, venue=None, league=None, sport=None, opponent=None, opponent_division=None, opponent_conference=None, _date=None, game_type=None, is_home=None, is_win=None, day_of_week=None, month=None, num_teams=None, num_occurrences=None, rank=None, type=None, group=None, split=None, exemption=None, num_leagues=None, game=None):  # noqa: E501
        """StatSplitsRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._season = None
        self._stat = None
        self._stats = None
        self._team = None
        self._player = None
        self._home_team = None
        self._away_team = None
        self._venue = None
        self._league = None
        self._sport = None
        self._opponent = None
        self._opponent_division = None
        self._opponent_conference = None
        self.__date = None
        self._game_type = None
        self._is_home = None
        self._is_win = None
        self._day_of_week = None
        self._month = None
        self._num_teams = None
        self._num_occurrences = None
        self._rank = None
        self._type = None
        self._group = None
        self._split = None
        self._exemption = None
        self._num_leagues = None
        self._game = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if season is not None:
            self.season = season
        if stat is not None:
            self.stat = stat
        if stats is not None:
            self.stats = stats
        if team is not None:
            self.team = team
        if player is not None:
            self.player = player
        if home_team is not None:
            self.home_team = home_team
        if away_team is not None:
            self.away_team = away_team
        if venue is not None:
            self.venue = venue
        if league is not None:
            self.league = league
        if sport is not None:
            self.sport = sport
        if opponent is not None:
            self.opponent = opponent
        if opponent_division is not None:
            self.opponent_division = opponent_division
        if opponent_conference is not None:
            self.opponent_conference = opponent_conference
        if _date is not None:
            self._date = _date
        if game_type is not None:
            self.game_type = game_type
        if is_home is not None:
            self.is_home = is_home
        if is_win is not None:
            self.is_win = is_win
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if month is not None:
            self.month = month
        if num_teams is not None:
            self.num_teams = num_teams
        if num_occurrences is not None:
            self.num_occurrences = num_occurrences
        if rank is not None:
            self.rank = rank
        if type is not None:
            self.type = type
        if group is not None:
            self.group = group
        if split is not None:
            self.split = split
        if exemption is not None:
            self.exemption = exemption
        if num_leagues is not None:
            self.num_leagues = num_leagues
        if game is not None:
            self.game = game

    @property
    def copyright(self):
        """Gets the copyright of this StatSplitsRestObject.  # noqa: E501


        :return: The copyright of this StatSplitsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this StatSplitsRestObject.


        :param copyright: The copyright of this StatSplitsRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def season(self):
        """Gets the season of this StatSplitsRestObject.  # noqa: E501


        :return: The season of this StatSplitsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this StatSplitsRestObject.


        :param season: The season of this StatSplitsRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def stat(self):
        """Gets the stat of this StatSplitsRestObject.  # noqa: E501


        :return: The stat of this StatSplitsRestObject.  # noqa: E501
        :rtype: StatDataRestObject
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this StatSplitsRestObject.


        :param stat: The stat of this StatSplitsRestObject.  # noqa: E501
        :type: StatDataRestObject
        """

        self._stat = stat

    @property
    def stats(self):
        """Gets the stats of this StatSplitsRestObject.  # noqa: E501


        :return: The stats of this StatSplitsRestObject.  # noqa: E501
        :rtype: GroupedStatDataRestObject
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this StatSplitsRestObject.


        :param stats: The stats of this StatSplitsRestObject.  # noqa: E501
        :type: GroupedStatDataRestObject
        """

        self._stats = stats

    @property
    def team(self):
        """Gets the team of this StatSplitsRestObject.  # noqa: E501


        :return: The team of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this StatSplitsRestObject.


        :param team: The team of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def player(self):
        """Gets the player of this StatSplitsRestObject.  # noqa: E501


        :return: The player of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this StatSplitsRestObject.


        :param player: The player of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def home_team(self):
        """Gets the home_team of this StatSplitsRestObject.  # noqa: E501


        :return: The home_team of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this StatSplitsRestObject.


        :param home_team: The home_team of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._home_team = home_team

    @property
    def away_team(self):
        """Gets the away_team of this StatSplitsRestObject.  # noqa: E501


        :return: The away_team of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this StatSplitsRestObject.


        :param away_team: The away_team of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._away_team = away_team

    @property
    def venue(self):
        """Gets the venue of this StatSplitsRestObject.  # noqa: E501


        :return: The venue of this StatSplitsRestObject.  # noqa: E501
        :rtype: VenueRestObject
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this StatSplitsRestObject.


        :param venue: The venue of this StatSplitsRestObject.  # noqa: E501
        :type: VenueRestObject
        """

        self._venue = venue

    @property
    def league(self):
        """Gets the league of this StatSplitsRestObject.  # noqa: E501


        :return: The league of this StatSplitsRestObject.  # noqa: E501
        :rtype: LeagueRestObject
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this StatSplitsRestObject.


        :param league: The league of this StatSplitsRestObject.  # noqa: E501
        :type: LeagueRestObject
        """

        self._league = league

    @property
    def sport(self):
        """Gets the sport of this StatSplitsRestObject.  # noqa: E501


        :return: The sport of this StatSplitsRestObject.  # noqa: E501
        :rtype: SportRestObject
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this StatSplitsRestObject.


        :param sport: The sport of this StatSplitsRestObject.  # noqa: E501
        :type: SportRestObject
        """

        self._sport = sport

    @property
    def opponent(self):
        """Gets the opponent of this StatSplitsRestObject.  # noqa: E501


        :return: The opponent of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this StatSplitsRestObject.


        :param opponent: The opponent of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._opponent = opponent

    @property
    def opponent_division(self):
        """Gets the opponent_division of this StatSplitsRestObject.  # noqa: E501


        :return: The opponent_division of this StatSplitsRestObject.  # noqa: E501
        :rtype: DivisionRestObject
        """
        return self._opponent_division

    @opponent_division.setter
    def opponent_division(self, opponent_division):
        """Sets the opponent_division of this StatSplitsRestObject.


        :param opponent_division: The opponent_division of this StatSplitsRestObject.  # noqa: E501
        :type: DivisionRestObject
        """

        self._opponent_division = opponent_division

    @property
    def opponent_conference(self):
        """Gets the opponent_conference of this StatSplitsRestObject.  # noqa: E501


        :return: The opponent_conference of this StatSplitsRestObject.  # noqa: E501
        :rtype: ConferenceRestObject
        """
        return self._opponent_conference

    @opponent_conference.setter
    def opponent_conference(self, opponent_conference):
        """Sets the opponent_conference of this StatSplitsRestObject.


        :param opponent_conference: The opponent_conference of this StatSplitsRestObject.  # noqa: E501
        :type: ConferenceRestObject
        """

        self._opponent_conference = opponent_conference

    @property
    def _date(self):
        """Gets the _date of this StatSplitsRestObject.  # noqa: E501


        :return: The _date of this StatSplitsRestObject.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StatSplitsRestObject.


        :param _date: The _date of this StatSplitsRestObject.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def game_type(self):
        """Gets the game_type of this StatSplitsRestObject.  # noqa: E501


        :return: The game_type of this StatSplitsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this StatSplitsRestObject.


        :param game_type: The game_type of this StatSplitsRestObject.  # noqa: E501
        :type: str
        """

        self._game_type = game_type

    @property
    def is_home(self):
        """Gets the is_home of this StatSplitsRestObject.  # noqa: E501


        :return: The is_home of this StatSplitsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_home

    @is_home.setter
    def is_home(self, is_home):
        """Sets the is_home of this StatSplitsRestObject.


        :param is_home: The is_home of this StatSplitsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_home = is_home

    @property
    def is_win(self):
        """Gets the is_win of this StatSplitsRestObject.  # noqa: E501


        :return: The is_win of this StatSplitsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_win

    @is_win.setter
    def is_win(self, is_win):
        """Sets the is_win of this StatSplitsRestObject.


        :param is_win: The is_win of this StatSplitsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_win = is_win

    @property
    def day_of_week(self):
        """Gets the day_of_week of this StatSplitsRestObject.  # noqa: E501


        :return: The day_of_week of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this StatSplitsRestObject.


        :param day_of_week: The day_of_week of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._day_of_week = day_of_week

    @property
    def month(self):
        """Gets the month of this StatSplitsRestObject.  # noqa: E501


        :return: The month of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this StatSplitsRestObject.


        :param month: The month of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def num_teams(self):
        """Gets the num_teams of this StatSplitsRestObject.  # noqa: E501


        :return: The num_teams of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_teams

    @num_teams.setter
    def num_teams(self, num_teams):
        """Sets the num_teams of this StatSplitsRestObject.


        :param num_teams: The num_teams of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._num_teams = num_teams

    @property
    def num_occurrences(self):
        """Gets the num_occurrences of this StatSplitsRestObject.  # noqa: E501


        :return: The num_occurrences of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_occurrences

    @num_occurrences.setter
    def num_occurrences(self, num_occurrences):
        """Sets the num_occurrences of this StatSplitsRestObject.


        :param num_occurrences: The num_occurrences of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._num_occurrences = num_occurrences

    @property
    def rank(self):
        """Gets the rank of this StatSplitsRestObject.  # noqa: E501


        :return: The rank of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this StatSplitsRestObject.


        :param rank: The rank of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def type(self):
        """Gets the type of this StatSplitsRestObject.  # noqa: E501


        :return: The type of this StatSplitsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatSplitsRestObject.


        :param type: The type of this StatSplitsRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def group(self):
        """Gets the group of this StatSplitsRestObject.  # noqa: E501


        :return: The group of this StatSplitsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this StatSplitsRestObject.


        :param group: The group of this StatSplitsRestObject.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def split(self):
        """Gets the split of this StatSplitsRestObject.  # noqa: E501


        :return: The split of this StatSplitsRestObject.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this StatSplitsRestObject.


        :param split: The split of this StatSplitsRestObject.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._split = split

    @property
    def exemption(self):
        """Gets the exemption of this StatSplitsRestObject.  # noqa: E501


        :return: The exemption of this StatSplitsRestObject.  # noqa: E501
        :rtype: StatExemptionRestObject
        """
        return self._exemption

    @exemption.setter
    def exemption(self, exemption):
        """Sets the exemption of this StatSplitsRestObject.


        :param exemption: The exemption of this StatSplitsRestObject.  # noqa: E501
        :type: StatExemptionRestObject
        """

        self._exemption = exemption

    @property
    def num_leagues(self):
        """Gets the num_leagues of this StatSplitsRestObject.  # noqa: E501


        :return: The num_leagues of this StatSplitsRestObject.  # noqa: E501
        :rtype: int
        """
        return self._num_leagues

    @num_leagues.setter
    def num_leagues(self, num_leagues):
        """Sets the num_leagues of this StatSplitsRestObject.


        :param num_leagues: The num_leagues of this StatSplitsRestObject.  # noqa: E501
        :type: int
        """

        self._num_leagues = num_leagues

    @property
    def game(self):
        """Gets the game of this StatSplitsRestObject.  # noqa: E501


        :return: The game of this StatSplitsRestObject.  # noqa: E501
        :rtype: BaseballScheduleItemRestObject
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this StatSplitsRestObject.


        :param game: The game of this StatSplitsRestObject.  # noqa: E501
        :type: BaseballScheduleItemRestObject
        """

        self._game = game

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatSplitsRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatSplitsRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
