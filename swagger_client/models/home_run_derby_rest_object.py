# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomeRunDerbyRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'info': 'ScheduleEventRestObject',
        'status': 'HomeRunDerbyStatusRestObject',
        'rounds': 'list[HomeRunDerbyRoundRestObject]',
        'players': 'list[BaseballPersonRestObject]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'info': 'info',
        'status': 'status',
        'rounds': 'rounds',
        'players': 'players'
    }

    def __init__(self, copyright=None, info=None, status=None, rounds=None, players=None):  # noqa: E501
        """HomeRunDerbyRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._info = None
        self._status = None
        self._rounds = None
        self._players = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if info is not None:
            self.info = info
        if status is not None:
            self.status = status
        if rounds is not None:
            self.rounds = rounds
        if players is not None:
            self.players = players

    @property
    def copyright(self):
        """Gets the copyright of this HomeRunDerbyRestObject.  # noqa: E501


        :return: The copyright of this HomeRunDerbyRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this HomeRunDerbyRestObject.


        :param copyright: The copyright of this HomeRunDerbyRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def info(self):
        """Gets the info of this HomeRunDerbyRestObject.  # noqa: E501


        :return: The info of this HomeRunDerbyRestObject.  # noqa: E501
        :rtype: ScheduleEventRestObject
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this HomeRunDerbyRestObject.


        :param info: The info of this HomeRunDerbyRestObject.  # noqa: E501
        :type: ScheduleEventRestObject
        """

        self._info = info

    @property
    def status(self):
        """Gets the status of this HomeRunDerbyRestObject.  # noqa: E501


        :return: The status of this HomeRunDerbyRestObject.  # noqa: E501
        :rtype: HomeRunDerbyStatusRestObject
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HomeRunDerbyRestObject.


        :param status: The status of this HomeRunDerbyRestObject.  # noqa: E501
        :type: HomeRunDerbyStatusRestObject
        """

        self._status = status

    @property
    def rounds(self):
        """Gets the rounds of this HomeRunDerbyRestObject.  # noqa: E501


        :return: The rounds of this HomeRunDerbyRestObject.  # noqa: E501
        :rtype: list[HomeRunDerbyRoundRestObject]
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this HomeRunDerbyRestObject.


        :param rounds: The rounds of this HomeRunDerbyRestObject.  # noqa: E501
        :type: list[HomeRunDerbyRoundRestObject]
        """

        self._rounds = rounds

    @property
    def players(self):
        """Gets the players of this HomeRunDerbyRestObject.  # noqa: E501


        :return: The players of this HomeRunDerbyRestObject.  # noqa: E501
        :rtype: list[BaseballPersonRestObject]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this HomeRunDerbyRestObject.


        :param players: The players of this HomeRunDerbyRestObject.  # noqa: E501
        :type: list[BaseballPersonRestObject]
        """

        self._players = players

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeRunDerbyRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeRunDerbyRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
