# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameAlertRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'type': 'str',
        'category': 'str',
        'description': 'str',
        'short_description': 'str',
        'team': 'BaseballTeamRestObject',
        'alert_id': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'type': 'type',
        'category': 'category',
        'description': 'description',
        'short_description': 'shortDescription',
        'team': 'team',
        'alert_id': 'alertId'
    }

    def __init__(self, copyright=None, type=None, category=None, description=None, short_description=None, team=None, alert_id=None):  # noqa: E501
        """BaseballGameAlertRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._type = None
        self._category = None
        self._description = None
        self._short_description = None
        self._team = None
        self._alert_id = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if short_description is not None:
            self.short_description = short_description
        if team is not None:
            self.team = team
        if alert_id is not None:
            self.alert_id = alert_id

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameAlertRestObject.


        :param copyright: The copyright of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def type(self):
        """Gets the type of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The type of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseballGameAlertRestObject.


        :param type: The type of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The category of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BaseballGameAlertRestObject.


        :param category: The category of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The description of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseballGameAlertRestObject.


        :param description: The description of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The short_description of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this BaseballGameAlertRestObject.


        :param short_description: The short_description of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def team(self):
        """Gets the team of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The team of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BaseballGameAlertRestObject.


        :param team: The team of this BaseballGameAlertRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def alert_id(self):
        """Gets the alert_id of this BaseballGameAlertRestObject.  # noqa: E501


        :return: The alert_id of this BaseballGameAlertRestObject.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this BaseballGameAlertRestObject.


        :param alert_id: The alert_id of this BaseballGameAlertRestObject.  # noqa: E501
        :type: str
        """

        self._alert_id = alert_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameAlertRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameAlertRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
