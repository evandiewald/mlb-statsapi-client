# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PromotionRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'offer_id': 'int',
        'name': 'str',
        'description': 'str',
        'alt_page_url': 'str',
        'tlink': 'str',
        'order': 'int',
        'presented_by': 'str',
        'thumbnail_url': 'str',
        'offer_type': 'str',
        'distribution': 'str',
        'sort_key': 'str',
        'team_id': 'int',
        'display_if_past': 'bool',
        'other': 'str',
        'image_url': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'offer_id': 'offerId',
        'name': 'name',
        'description': 'description',
        'alt_page_url': 'altPageUrl',
        'tlink': 'tlink',
        'order': 'order',
        'presented_by': 'presentedBy',
        'thumbnail_url': 'thumbnailUrl',
        'offer_type': 'offerType',
        'distribution': 'distribution',
        'sort_key': 'sortKey',
        'team_id': 'teamId',
        'display_if_past': 'displayIfPast',
        'other': 'other',
        'image_url': 'imageUrl'
    }

    def __init__(self, copyright=None, offer_id=None, name=None, description=None, alt_page_url=None, tlink=None, order=None, presented_by=None, thumbnail_url=None, offer_type=None, distribution=None, sort_key=None, team_id=None, display_if_past=None, other=None, image_url=None):  # noqa: E501
        """PromotionRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._offer_id = None
        self._name = None
        self._description = None
        self._alt_page_url = None
        self._tlink = None
        self._order = None
        self._presented_by = None
        self._thumbnail_url = None
        self._offer_type = None
        self._distribution = None
        self._sort_key = None
        self._team_id = None
        self._display_if_past = None
        self._other = None
        self._image_url = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if offer_id is not None:
            self.offer_id = offer_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if alt_page_url is not None:
            self.alt_page_url = alt_page_url
        if tlink is not None:
            self.tlink = tlink
        if order is not None:
            self.order = order
        if presented_by is not None:
            self.presented_by = presented_by
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if offer_type is not None:
            self.offer_type = offer_type
        if distribution is not None:
            self.distribution = distribution
        if sort_key is not None:
            self.sort_key = sort_key
        if team_id is not None:
            self.team_id = team_id
        if display_if_past is not None:
            self.display_if_past = display_if_past
        if other is not None:
            self.other = other
        if image_url is not None:
            self.image_url = image_url

    @property
    def copyright(self):
        """Gets the copyright of this PromotionRestObject.  # noqa: E501


        :return: The copyright of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PromotionRestObject.


        :param copyright: The copyright of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def offer_id(self):
        """Gets the offer_id of this PromotionRestObject.  # noqa: E501


        :return: The offer_id of this PromotionRestObject.  # noqa: E501
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this PromotionRestObject.


        :param offer_id: The offer_id of this PromotionRestObject.  # noqa: E501
        :type: int
        """

        self._offer_id = offer_id

    @property
    def name(self):
        """Gets the name of this PromotionRestObject.  # noqa: E501


        :return: The name of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionRestObject.


        :param name: The name of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PromotionRestObject.  # noqa: E501


        :return: The description of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PromotionRestObject.


        :param description: The description of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def alt_page_url(self):
        """Gets the alt_page_url of this PromotionRestObject.  # noqa: E501


        :return: The alt_page_url of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._alt_page_url

    @alt_page_url.setter
    def alt_page_url(self, alt_page_url):
        """Sets the alt_page_url of this PromotionRestObject.


        :param alt_page_url: The alt_page_url of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._alt_page_url = alt_page_url

    @property
    def tlink(self):
        """Gets the tlink of this PromotionRestObject.  # noqa: E501


        :return: The tlink of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._tlink

    @tlink.setter
    def tlink(self, tlink):
        """Sets the tlink of this PromotionRestObject.


        :param tlink: The tlink of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._tlink = tlink

    @property
    def order(self):
        """Gets the order of this PromotionRestObject.  # noqa: E501


        :return: The order of this PromotionRestObject.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PromotionRestObject.


        :param order: The order of this PromotionRestObject.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def presented_by(self):
        """Gets the presented_by of this PromotionRestObject.  # noqa: E501


        :return: The presented_by of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._presented_by

    @presented_by.setter
    def presented_by(self, presented_by):
        """Sets the presented_by of this PromotionRestObject.


        :param presented_by: The presented_by of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._presented_by = presented_by

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this PromotionRestObject.  # noqa: E501


        :return: The thumbnail_url of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this PromotionRestObject.


        :param thumbnail_url: The thumbnail_url of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def offer_type(self):
        """Gets the offer_type of this PromotionRestObject.  # noqa: E501


        :return: The offer_type of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this PromotionRestObject.


        :param offer_type: The offer_type of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._offer_type = offer_type

    @property
    def distribution(self):
        """Gets the distribution of this PromotionRestObject.  # noqa: E501


        :return: The distribution of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this PromotionRestObject.


        :param distribution: The distribution of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def sort_key(self):
        """Gets the sort_key of this PromotionRestObject.  # noqa: E501


        :return: The sort_key of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._sort_key

    @sort_key.setter
    def sort_key(self, sort_key):
        """Sets the sort_key of this PromotionRestObject.


        :param sort_key: The sort_key of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._sort_key = sort_key

    @property
    def team_id(self):
        """Gets the team_id of this PromotionRestObject.  # noqa: E501


        :return: The team_id of this PromotionRestObject.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this PromotionRestObject.


        :param team_id: The team_id of this PromotionRestObject.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def display_if_past(self):
        """Gets the display_if_past of this PromotionRestObject.  # noqa: E501


        :return: The display_if_past of this PromotionRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._display_if_past

    @display_if_past.setter
    def display_if_past(self, display_if_past):
        """Sets the display_if_past of this PromotionRestObject.


        :param display_if_past: The display_if_past of this PromotionRestObject.  # noqa: E501
        :type: bool
        """

        self._display_if_past = display_if_past

    @property
    def other(self):
        """Gets the other of this PromotionRestObject.  # noqa: E501


        :return: The other of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this PromotionRestObject.


        :param other: The other of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._other = other

    @property
    def image_url(self):
        """Gets the image_url of this PromotionRestObject.  # noqa: E501


        :return: The image_url of this PromotionRestObject.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PromotionRestObject.


        :param image_url: The image_url of this PromotionRestObject.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
