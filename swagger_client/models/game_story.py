# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameStory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_pk': 'int',
        'num_stories': 'int',
        'link': 'str',
        'thumbnail': 'str',
        'thumbnail_template': 'str',
        'last_updated_time': 'datetime',
        'name': 'str',
        'status': 'str',
        'pages': 'int'
    }

    attribute_map = {
        'game_pk': 'gamePk',
        'num_stories': 'numStories',
        'link': 'link',
        'thumbnail': 'thumbnail',
        'thumbnail_template': 'thumbnailTemplate',
        'last_updated_time': 'lastUpdatedTime',
        'name': 'name',
        'status': 'status',
        'pages': 'pages'
    }

    def __init__(self, game_pk=None, num_stories=None, link=None, thumbnail=None, thumbnail_template=None, last_updated_time=None, name=None, status=None, pages=None):  # noqa: E501
        """GameStory - a model defined in Swagger"""  # noqa: E501
        self._game_pk = None
        self._num_stories = None
        self._link = None
        self._thumbnail = None
        self._thumbnail_template = None
        self._last_updated_time = None
        self._name = None
        self._status = None
        self._pages = None
        self.discriminator = None
        if game_pk is not None:
            self.game_pk = game_pk
        if num_stories is not None:
            self.num_stories = num_stories
        if link is not None:
            self.link = link
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if thumbnail_template is not None:
            self.thumbnail_template = thumbnail_template
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if pages is not None:
            self.pages = pages

    @property
    def game_pk(self):
        """Gets the game_pk of this GameStory.  # noqa: E501


        :return: The game_pk of this GameStory.  # noqa: E501
        :rtype: int
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this GameStory.


        :param game_pk: The game_pk of this GameStory.  # noqa: E501
        :type: int
        """

        self._game_pk = game_pk

    @property
    def num_stories(self):
        """Gets the num_stories of this GameStory.  # noqa: E501


        :return: The num_stories of this GameStory.  # noqa: E501
        :rtype: int
        """
        return self._num_stories

    @num_stories.setter
    def num_stories(self, num_stories):
        """Sets the num_stories of this GameStory.


        :param num_stories: The num_stories of this GameStory.  # noqa: E501
        :type: int
        """

        self._num_stories = num_stories

    @property
    def link(self):
        """Gets the link of this GameStory.  # noqa: E501


        :return: The link of this GameStory.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this GameStory.


        :param link: The link of this GameStory.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def thumbnail(self):
        """Gets the thumbnail of this GameStory.  # noqa: E501


        :return: The thumbnail of this GameStory.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this GameStory.


        :param thumbnail: The thumbnail of this GameStory.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_template(self):
        """Gets the thumbnail_template of this GameStory.  # noqa: E501


        :return: The thumbnail_template of this GameStory.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_template

    @thumbnail_template.setter
    def thumbnail_template(self, thumbnail_template):
        """Sets the thumbnail_template of this GameStory.


        :param thumbnail_template: The thumbnail_template of this GameStory.  # noqa: E501
        :type: str
        """

        self._thumbnail_template = thumbnail_template

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this GameStory.  # noqa: E501


        :return: The last_updated_time of this GameStory.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this GameStory.


        :param last_updated_time: The last_updated_time of this GameStory.  # noqa: E501
        :type: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this GameStory.  # noqa: E501


        :return: The name of this GameStory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GameStory.


        :param name: The name of this GameStory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this GameStory.  # noqa: E501


        :return: The status of this GameStory.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GameStory.


        :param status: The status of this GameStory.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def pages(self):
        """Gets the pages of this GameStory.  # noqa: E501


        :return: The pages of this GameStory.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this GameStory.


        :param pages: The pages of this GameStory.  # noqa: E501
        :type: int
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameStory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameStory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
