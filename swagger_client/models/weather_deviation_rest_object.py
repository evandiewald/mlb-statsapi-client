# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherDeviationRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'distance': 'float',
        'horizontal': 'float',
        'time': 'float',
        'apex': 'float',
        'height': 'float'
    }

    attribute_map = {
        'copyright': 'copyright',
        'distance': 'distance',
        'horizontal': 'horizontal',
        'time': 'time',
        'apex': 'apex',
        'height': 'height'
    }

    def __init__(self, copyright=None, distance=None, horizontal=None, time=None, apex=None, height=None):  # noqa: E501
        """WeatherDeviationRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._distance = None
        self._horizontal = None
        self._time = None
        self._apex = None
        self._height = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if distance is not None:
            self.distance = distance
        if horizontal is not None:
            self.horizontal = horizontal
        if time is not None:
            self.time = time
        if apex is not None:
            self.apex = apex
        if height is not None:
            self.height = height

    @property
    def copyright(self):
        """Gets the copyright of this WeatherDeviationRestObject.  # noqa: E501


        :return: The copyright of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherDeviationRestObject.


        :param copyright: The copyright of this WeatherDeviationRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def distance(self):
        """Gets the distance of this WeatherDeviationRestObject.  # noqa: E501


        :return: The distance of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this WeatherDeviationRestObject.


        :param distance: The distance of this WeatherDeviationRestObject.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def horizontal(self):
        """Gets the horizontal of this WeatherDeviationRestObject.  # noqa: E501


        :return: The horizontal of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._horizontal

    @horizontal.setter
    def horizontal(self, horizontal):
        """Sets the horizontal of this WeatherDeviationRestObject.


        :param horizontal: The horizontal of this WeatherDeviationRestObject.  # noqa: E501
        :type: float
        """

        self._horizontal = horizontal

    @property
    def time(self):
        """Gets the time of this WeatherDeviationRestObject.  # noqa: E501


        :return: The time of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WeatherDeviationRestObject.


        :param time: The time of this WeatherDeviationRestObject.  # noqa: E501
        :type: float
        """

        self._time = time

    @property
    def apex(self):
        """Gets the apex of this WeatherDeviationRestObject.  # noqa: E501


        :return: The apex of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._apex

    @apex.setter
    def apex(self, apex):
        """Sets the apex of this WeatherDeviationRestObject.


        :param apex: The apex of this WeatherDeviationRestObject.  # noqa: E501
        :type: float
        """

        self._apex = apex

    @property
    def height(self):
        """Gets the height of this WeatherDeviationRestObject.  # noqa: E501


        :return: The height of this WeatherDeviationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this WeatherDeviationRestObject.


        :param height: The height of this WeatherDeviationRestObject.  # noqa: E501
        :type: float
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherDeviationRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherDeviationRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
