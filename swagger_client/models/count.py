# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Count(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'balls': 'int',
        'strikes': 'int',
        'outs': 'int',
        'inning': 'int',
        'is_top_inning': 'bool',
        'runner_on1b': 'bool',
        'runner_on2b': 'bool',
        'runner_on3b': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'balls': 'balls',
        'strikes': 'strikes',
        'outs': 'outs',
        'inning': 'inning',
        'is_top_inning': 'isTopInning',
        'runner_on1b': 'runnerOn1b',
        'runner_on2b': 'runnerOn2b',
        'runner_on3b': 'runnerOn3b'
    }

    def __init__(self, copyright=None, balls=None, strikes=None, outs=None, inning=None, is_top_inning=None, runner_on1b=None, runner_on2b=None, runner_on3b=None):  # noqa: E501
        """Count - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._balls = None
        self._strikes = None
        self._outs = None
        self._inning = None
        self._is_top_inning = None
        self._runner_on1b = None
        self._runner_on2b = None
        self._runner_on3b = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if balls is not None:
            self.balls = balls
        if strikes is not None:
            self.strikes = strikes
        if outs is not None:
            self.outs = outs
        if inning is not None:
            self.inning = inning
        if is_top_inning is not None:
            self.is_top_inning = is_top_inning
        if runner_on1b is not None:
            self.runner_on1b = runner_on1b
        if runner_on2b is not None:
            self.runner_on2b = runner_on2b
        if runner_on3b is not None:
            self.runner_on3b = runner_on3b

    @property
    def copyright(self):
        """Gets the copyright of this Count.  # noqa: E501


        :return: The copyright of this Count.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Count.


        :param copyright: The copyright of this Count.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def balls(self):
        """Gets the balls of this Count.  # noqa: E501


        :return: The balls of this Count.  # noqa: E501
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this Count.


        :param balls: The balls of this Count.  # noqa: E501
        :type: int
        """

        self._balls = balls

    @property
    def strikes(self):
        """Gets the strikes of this Count.  # noqa: E501


        :return: The strikes of this Count.  # noqa: E501
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this Count.


        :param strikes: The strikes of this Count.  # noqa: E501
        :type: int
        """

        self._strikes = strikes

    @property
    def outs(self):
        """Gets the outs of this Count.  # noqa: E501


        :return: The outs of this Count.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this Count.


        :param outs: The outs of this Count.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def inning(self):
        """Gets the inning of this Count.  # noqa: E501


        :return: The inning of this Count.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this Count.


        :param inning: The inning of this Count.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def is_top_inning(self):
        """Gets the is_top_inning of this Count.  # noqa: E501


        :return: The is_top_inning of this Count.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_inning

    @is_top_inning.setter
    def is_top_inning(self, is_top_inning):
        """Sets the is_top_inning of this Count.


        :param is_top_inning: The is_top_inning of this Count.  # noqa: E501
        :type: bool
        """

        self._is_top_inning = is_top_inning

    @property
    def runner_on1b(self):
        """Gets the runner_on1b of this Count.  # noqa: E501


        :return: The runner_on1b of this Count.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on1b

    @runner_on1b.setter
    def runner_on1b(self, runner_on1b):
        """Sets the runner_on1b of this Count.


        :param runner_on1b: The runner_on1b of this Count.  # noqa: E501
        :type: bool
        """

        self._runner_on1b = runner_on1b

    @property
    def runner_on2b(self):
        """Gets the runner_on2b of this Count.  # noqa: E501


        :return: The runner_on2b of this Count.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on2b

    @runner_on2b.setter
    def runner_on2b(self, runner_on2b):
        """Sets the runner_on2b of this Count.


        :param runner_on2b: The runner_on2b of this Count.  # noqa: E501
        :type: bool
        """

        self._runner_on2b = runner_on2b

    @property
    def runner_on3b(self):
        """Gets the runner_on3b of this Count.  # noqa: E501


        :return: The runner_on3b of this Count.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on3b

    @runner_on3b.setter
    def runner_on3b(self, runner_on3b):
        """Sets the runner_on3b of this Count.


        :param runner_on3b: The runner_on3b of this Count.  # noqa: E501
        :type: bool
        """

        self._runner_on3b = runner_on3b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Count, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Count):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
