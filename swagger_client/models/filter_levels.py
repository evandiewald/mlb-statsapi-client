# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterLevels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'pitch': 'bool',
        'at_bat': 'bool',
        'inning': 'bool',
        'game': 'bool',
        'season': 'bool',
        'career': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'pitch': 'pitch',
        'at_bat': 'atBat',
        'inning': 'inning',
        'game': 'game',
        'season': 'season',
        'career': 'career'
    }

    def __init__(self, copyright=None, pitch=None, at_bat=None, inning=None, game=None, season=None, career=None):  # noqa: E501
        """FilterLevels - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._pitch = None
        self._at_bat = None
        self._inning = None
        self._game = None
        self._season = None
        self._career = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if pitch is not None:
            self.pitch = pitch
        if at_bat is not None:
            self.at_bat = at_bat
        if inning is not None:
            self.inning = inning
        if game is not None:
            self.game = game
        if season is not None:
            self.season = season
        if career is not None:
            self.career = career

    @property
    def copyright(self):
        """Gets the copyright of this FilterLevels.  # noqa: E501


        :return: The copyright of this FilterLevels.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this FilterLevels.


        :param copyright: The copyright of this FilterLevels.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def pitch(self):
        """Gets the pitch of this FilterLevels.  # noqa: E501


        :return: The pitch of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this FilterLevels.


        :param pitch: The pitch of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._pitch = pitch

    @property
    def at_bat(self):
        """Gets the at_bat of this FilterLevels.  # noqa: E501


        :return: The at_bat of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._at_bat

    @at_bat.setter
    def at_bat(self, at_bat):
        """Sets the at_bat of this FilterLevels.


        :param at_bat: The at_bat of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._at_bat = at_bat

    @property
    def inning(self):
        """Gets the inning of this FilterLevels.  # noqa: E501


        :return: The inning of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this FilterLevels.


        :param inning: The inning of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._inning = inning

    @property
    def game(self):
        """Gets the game of this FilterLevels.  # noqa: E501


        :return: The game of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this FilterLevels.


        :param game: The game of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._game = game

    @property
    def season(self):
        """Gets the season of this FilterLevels.  # noqa: E501


        :return: The season of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this FilterLevels.


        :param season: The season of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._season = season

    @property
    def career(self):
        """Gets the career of this FilterLevels.  # noqa: E501


        :return: The career of this FilterLevels.  # noqa: E501
        :rtype: bool
        """
        return self._career

    @career.setter
    def career(self, career):
        """Sets the career of this FilterLevels.


        :param career: The career of this FilterLevels.  # noqa: E501
        :type: bool
        """

        self._career = career

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterLevels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterLevels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
