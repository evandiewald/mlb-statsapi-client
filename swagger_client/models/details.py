# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'call': 'DynamicEnumRestObject',
        'description': 'str',
        'event': 'str',
        'event_type': 'str',
        'code': 'str',
        'ball_color': 'str',
        'trail_color': 'str',
        'is_in_play': 'bool',
        'is_strike': 'bool',
        'is_ball': 'bool',
        'is_base_hit': 'bool',
        'is_at_bat': 'bool',
        'is_plate_appearance': 'bool',
        'type': 'DynamicEnumRestObject',
        'away_score': 'int',
        'home_score': 'int',
        'is_scoring_play': 'bool',
        'is_out': 'bool',
        'has_review': 'bool',
        'from_catcher': 'bool',
        'runner_going': 'bool',
        'bat_side': 'DynamicEnumRestObject',
        'pitch_hand': 'DynamicEnumRestObject',
        'disengagement_num': 'int',
        'violation': 'ViolationRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'call': 'call',
        'description': 'description',
        'event': 'event',
        'event_type': 'eventType',
        'code': 'code',
        'ball_color': 'ballColor',
        'trail_color': 'trailColor',
        'is_in_play': 'isInPlay',
        'is_strike': 'isStrike',
        'is_ball': 'isBall',
        'is_base_hit': 'isBaseHit',
        'is_at_bat': 'isAtBat',
        'is_plate_appearance': 'isPlateAppearance',
        'type': 'type',
        'away_score': 'awayScore',
        'home_score': 'homeScore',
        'is_scoring_play': 'isScoringPlay',
        'is_out': 'isOut',
        'has_review': 'hasReview',
        'from_catcher': 'fromCatcher',
        'runner_going': 'runnerGoing',
        'bat_side': 'batSide',
        'pitch_hand': 'pitchHand',
        'disengagement_num': 'disengagementNum',
        'violation': 'violation'
    }

    def __init__(self, copyright=None, call=None, description=None, event=None, event_type=None, code=None, ball_color=None, trail_color=None, is_in_play=None, is_strike=None, is_ball=None, is_base_hit=None, is_at_bat=None, is_plate_appearance=None, type=None, away_score=None, home_score=None, is_scoring_play=None, is_out=None, has_review=None, from_catcher=None, runner_going=None, bat_side=None, pitch_hand=None, disengagement_num=None, violation=None):  # noqa: E501
        """Details - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._call = None
        self._description = None
        self._event = None
        self._event_type = None
        self._code = None
        self._ball_color = None
        self._trail_color = None
        self._is_in_play = None
        self._is_strike = None
        self._is_ball = None
        self._is_base_hit = None
        self._is_at_bat = None
        self._is_plate_appearance = None
        self._type = None
        self._away_score = None
        self._home_score = None
        self._is_scoring_play = None
        self._is_out = None
        self._has_review = None
        self._from_catcher = None
        self._runner_going = None
        self._bat_side = None
        self._pitch_hand = None
        self._disengagement_num = None
        self._violation = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if call is not None:
            self.call = call
        if description is not None:
            self.description = description
        if event is not None:
            self.event = event
        if event_type is not None:
            self.event_type = event_type
        if code is not None:
            self.code = code
        if ball_color is not None:
            self.ball_color = ball_color
        if trail_color is not None:
            self.trail_color = trail_color
        if is_in_play is not None:
            self.is_in_play = is_in_play
        if is_strike is not None:
            self.is_strike = is_strike
        if is_ball is not None:
            self.is_ball = is_ball
        if is_base_hit is not None:
            self.is_base_hit = is_base_hit
        if is_at_bat is not None:
            self.is_at_bat = is_at_bat
        if is_plate_appearance is not None:
            self.is_plate_appearance = is_plate_appearance
        if type is not None:
            self.type = type
        if away_score is not None:
            self.away_score = away_score
        if home_score is not None:
            self.home_score = home_score
        if is_scoring_play is not None:
            self.is_scoring_play = is_scoring_play
        if is_out is not None:
            self.is_out = is_out
        if has_review is not None:
            self.has_review = has_review
        if from_catcher is not None:
            self.from_catcher = from_catcher
        if runner_going is not None:
            self.runner_going = runner_going
        if bat_side is not None:
            self.bat_side = bat_side
        if pitch_hand is not None:
            self.pitch_hand = pitch_hand
        if disengagement_num is not None:
            self.disengagement_num = disengagement_num
        if violation is not None:
            self.violation = violation

    @property
    def copyright(self):
        """Gets the copyright of this Details.  # noqa: E501


        :return: The copyright of this Details.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Details.


        :param copyright: The copyright of this Details.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def call(self):
        """Gets the call of this Details.  # noqa: E501


        :return: The call of this Details.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Details.


        :param call: The call of this Details.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._call = call

    @property
    def description(self):
        """Gets the description of this Details.  # noqa: E501


        :return: The description of this Details.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Details.


        :param description: The description of this Details.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this Details.  # noqa: E501


        :return: The event of this Details.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Details.


        :param event: The event of this Details.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def event_type(self):
        """Gets the event_type of this Details.  # noqa: E501


        :return: The event_type of this Details.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Details.


        :param event_type: The event_type of this Details.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def code(self):
        """Gets the code of this Details.  # noqa: E501


        :return: The code of this Details.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Details.


        :param code: The code of this Details.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def ball_color(self):
        """Gets the ball_color of this Details.  # noqa: E501


        :return: The ball_color of this Details.  # noqa: E501
        :rtype: str
        """
        return self._ball_color

    @ball_color.setter
    def ball_color(self, ball_color):
        """Sets the ball_color of this Details.


        :param ball_color: The ball_color of this Details.  # noqa: E501
        :type: str
        """

        self._ball_color = ball_color

    @property
    def trail_color(self):
        """Gets the trail_color of this Details.  # noqa: E501


        :return: The trail_color of this Details.  # noqa: E501
        :rtype: str
        """
        return self._trail_color

    @trail_color.setter
    def trail_color(self, trail_color):
        """Sets the trail_color of this Details.


        :param trail_color: The trail_color of this Details.  # noqa: E501
        :type: str
        """

        self._trail_color = trail_color

    @property
    def is_in_play(self):
        """Gets the is_in_play of this Details.  # noqa: E501


        :return: The is_in_play of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_play

    @is_in_play.setter
    def is_in_play(self, is_in_play):
        """Sets the is_in_play of this Details.


        :param is_in_play: The is_in_play of this Details.  # noqa: E501
        :type: bool
        """

        self._is_in_play = is_in_play

    @property
    def is_strike(self):
        """Gets the is_strike of this Details.  # noqa: E501


        :return: The is_strike of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_strike

    @is_strike.setter
    def is_strike(self, is_strike):
        """Sets the is_strike of this Details.


        :param is_strike: The is_strike of this Details.  # noqa: E501
        :type: bool
        """

        self._is_strike = is_strike

    @property
    def is_ball(self):
        """Gets the is_ball of this Details.  # noqa: E501


        :return: The is_ball of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_ball

    @is_ball.setter
    def is_ball(self, is_ball):
        """Sets the is_ball of this Details.


        :param is_ball: The is_ball of this Details.  # noqa: E501
        :type: bool
        """

        self._is_ball = is_ball

    @property
    def is_base_hit(self):
        """Gets the is_base_hit of this Details.  # noqa: E501


        :return: The is_base_hit of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_base_hit

    @is_base_hit.setter
    def is_base_hit(self, is_base_hit):
        """Sets the is_base_hit of this Details.


        :param is_base_hit: The is_base_hit of this Details.  # noqa: E501
        :type: bool
        """

        self._is_base_hit = is_base_hit

    @property
    def is_at_bat(self):
        """Gets the is_at_bat of this Details.  # noqa: E501


        :return: The is_at_bat of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_at_bat

    @is_at_bat.setter
    def is_at_bat(self, is_at_bat):
        """Sets the is_at_bat of this Details.


        :param is_at_bat: The is_at_bat of this Details.  # noqa: E501
        :type: bool
        """

        self._is_at_bat = is_at_bat

    @property
    def is_plate_appearance(self):
        """Gets the is_plate_appearance of this Details.  # noqa: E501


        :return: The is_plate_appearance of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_plate_appearance

    @is_plate_appearance.setter
    def is_plate_appearance(self, is_plate_appearance):
        """Sets the is_plate_appearance of this Details.


        :param is_plate_appearance: The is_plate_appearance of this Details.  # noqa: E501
        :type: bool
        """

        self._is_plate_appearance = is_plate_appearance

    @property
    def type(self):
        """Gets the type of this Details.  # noqa: E501


        :return: The type of this Details.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Details.


        :param type: The type of this Details.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._type = type

    @property
    def away_score(self):
        """Gets the away_score of this Details.  # noqa: E501


        :return: The away_score of this Details.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this Details.


        :param away_score: The away_score of this Details.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    @property
    def home_score(self):
        """Gets the home_score of this Details.  # noqa: E501


        :return: The home_score of this Details.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this Details.


        :param home_score: The home_score of this Details.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def is_scoring_play(self):
        """Gets the is_scoring_play of this Details.  # noqa: E501


        :return: The is_scoring_play of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_scoring_play

    @is_scoring_play.setter
    def is_scoring_play(self, is_scoring_play):
        """Sets the is_scoring_play of this Details.


        :param is_scoring_play: The is_scoring_play of this Details.  # noqa: E501
        :type: bool
        """

        self._is_scoring_play = is_scoring_play

    @property
    def is_out(self):
        """Gets the is_out of this Details.  # noqa: E501

        Does the play event include an out?  # noqa: E501

        :return: The is_out of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._is_out

    @is_out.setter
    def is_out(self, is_out):
        """Sets the is_out of this Details.

        Does the play event include an out?  # noqa: E501

        :param is_out: The is_out of this Details.  # noqa: E501
        :type: bool
        """

        self._is_out = is_out

    @property
    def has_review(self):
        """Gets the has_review of this Details.  # noqa: E501


        :return: The has_review of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._has_review

    @has_review.setter
    def has_review(self, has_review):
        """Sets the has_review of this Details.


        :param has_review: The has_review of this Details.  # noqa: E501
        :type: bool
        """

        self._has_review = has_review

    @property
    def from_catcher(self):
        """Gets the from_catcher of this Details.  # noqa: E501


        :return: The from_catcher of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._from_catcher

    @from_catcher.setter
    def from_catcher(self, from_catcher):
        """Sets the from_catcher of this Details.


        :param from_catcher: The from_catcher of this Details.  # noqa: E501
        :type: bool
        """

        self._from_catcher = from_catcher

    @property
    def runner_going(self):
        """Gets the runner_going of this Details.  # noqa: E501


        :return: The runner_going of this Details.  # noqa: E501
        :rtype: bool
        """
        return self._runner_going

    @runner_going.setter
    def runner_going(self, runner_going):
        """Sets the runner_going of this Details.


        :param runner_going: The runner_going of this Details.  # noqa: E501
        :type: bool
        """

        self._runner_going = runner_going

    @property
    def bat_side(self):
        """Gets the bat_side of this Details.  # noqa: E501


        :return: The bat_side of this Details.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._bat_side

    @bat_side.setter
    def bat_side(self, bat_side):
        """Sets the bat_side of this Details.


        :param bat_side: The bat_side of this Details.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._bat_side = bat_side

    @property
    def pitch_hand(self):
        """Gets the pitch_hand of this Details.  # noqa: E501


        :return: The pitch_hand of this Details.  # noqa: E501
        :rtype: DynamicEnumRestObject
        """
        return self._pitch_hand

    @pitch_hand.setter
    def pitch_hand(self, pitch_hand):
        """Sets the pitch_hand of this Details.


        :param pitch_hand: The pitch_hand of this Details.  # noqa: E501
        :type: DynamicEnumRestObject
        """

        self._pitch_hand = pitch_hand

    @property
    def disengagement_num(self):
        """Gets the disengagement_num of this Details.  # noqa: E501


        :return: The disengagement_num of this Details.  # noqa: E501
        :rtype: int
        """
        return self._disengagement_num

    @disengagement_num.setter
    def disengagement_num(self, disengagement_num):
        """Sets the disengagement_num of this Details.


        :param disengagement_num: The disengagement_num of this Details.  # noqa: E501
        :type: int
        """

        self._disengagement_num = disengagement_num

    @property
    def violation(self):
        """Gets the violation of this Details.  # noqa: E501


        :return: The violation of this Details.  # noqa: E501
        :rtype: ViolationRestObject
        """
        return self._violation

    @violation.setter
    def violation(self, violation):
        """Sets the violation of this Details.


        :param violation: The violation of this Details.  # noqa: E501
        :type: ViolationRestObject
        """

        self._violation = violation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
