# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherConditionFlagRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'home_run': 'bool',
        'home_run_change': 'bool',
        'off_the_wall': 'bool',
        'off_the_wall_change': 'bool',
        'foul': 'bool',
        'foul_change': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'home_run': 'homeRun',
        'home_run_change': 'homeRunChange',
        'off_the_wall': 'offTheWall',
        'off_the_wall_change': 'offTheWallChange',
        'foul': 'foul',
        'foul_change': 'foulChange'
    }

    def __init__(self, copyright=None, home_run=None, home_run_change=None, off_the_wall=None, off_the_wall_change=None, foul=None, foul_change=None):  # noqa: E501
        """WeatherConditionFlagRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._home_run = None
        self._home_run_change = None
        self._off_the_wall = None
        self._off_the_wall_change = None
        self._foul = None
        self._foul_change = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if home_run is not None:
            self.home_run = home_run
        if home_run_change is not None:
            self.home_run_change = home_run_change
        if off_the_wall is not None:
            self.off_the_wall = off_the_wall
        if off_the_wall_change is not None:
            self.off_the_wall_change = off_the_wall_change
        if foul is not None:
            self.foul = foul
        if foul_change is not None:
            self.foul_change = foul_change

    @property
    def copyright(self):
        """Gets the copyright of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The copyright of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherConditionFlagRestObject.


        :param copyright: The copyright of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def home_run(self):
        """Gets the home_run of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The home_run of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._home_run

    @home_run.setter
    def home_run(self, home_run):
        """Sets the home_run of this WeatherConditionFlagRestObject.


        :param home_run: The home_run of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._home_run = home_run

    @property
    def home_run_change(self):
        """Gets the home_run_change of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The home_run_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._home_run_change

    @home_run_change.setter
    def home_run_change(self, home_run_change):
        """Sets the home_run_change of this WeatherConditionFlagRestObject.


        :param home_run_change: The home_run_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._home_run_change = home_run_change

    @property
    def off_the_wall(self):
        """Gets the off_the_wall of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The off_the_wall of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._off_the_wall

    @off_the_wall.setter
    def off_the_wall(self, off_the_wall):
        """Sets the off_the_wall of this WeatherConditionFlagRestObject.


        :param off_the_wall: The off_the_wall of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._off_the_wall = off_the_wall

    @property
    def off_the_wall_change(self):
        """Gets the off_the_wall_change of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The off_the_wall_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._off_the_wall_change

    @off_the_wall_change.setter
    def off_the_wall_change(self, off_the_wall_change):
        """Sets the off_the_wall_change of this WeatherConditionFlagRestObject.


        :param off_the_wall_change: The off_the_wall_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._off_the_wall_change = off_the_wall_change

    @property
    def foul(self):
        """Gets the foul of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The foul of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._foul

    @foul.setter
    def foul(self, foul):
        """Sets the foul of this WeatherConditionFlagRestObject.


        :param foul: The foul of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._foul = foul

    @property
    def foul_change(self):
        """Gets the foul_change of this WeatherConditionFlagRestObject.  # noqa: E501


        :return: The foul_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._foul_change

    @foul_change.setter
    def foul_change(self, foul_change):
        """Sets the foul_change of this WeatherConditionFlagRestObject.


        :param foul_change: The foul_change of this WeatherConditionFlagRestObject.  # noqa: E501
        :type: bool
        """

        self._foul_change = foul_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherConditionFlagRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherConditionFlagRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
