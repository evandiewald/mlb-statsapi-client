# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    PITCHER = "PITCHER"
    CATCHER = "CATCHER"
    FIRST_BASE = "FIRST_BASE"
    SECOND_BASE = "SECOND_BASE"
    THIRD_BASE = "THIRD_BASE"
    SHORTSTOP = "SHORTSTOP"
    LEFT_FIELD = "LEFT_FIELD"
    CENTER_FIELD = "CENTER_FIELD"
    RIGHT_FIELD = "RIGHT_FIELD"
    DESIGNATED_HITTER = "DESIGNATED_HITTER"
    PINCH_HITTER = "PINCH_HITTER"
    PINCH_RUNNER = "PINCH_RUNNER"
    EXTRA_HITTER = "EXTRA_HITTER"
    BASE_RUNNER = "BASE_RUNNER"
    OUTFIELD = "OUTFIELD"
    INFIELD = "INFIELD"
    STARTING_PITCHER = "STARTING_PITCHER"
    RELIEF_PITCHER = "RELIEF_PITCHER"
    CLOSER = "CLOSER"
    UTLITY = "UTLITY"
    UTLITY_INFIELDER = "UTLITY_INFIELDER"
    UTLITY_OUTFIELDER = "UTLITY_OUTFIELDER"
    RIGHT_HANDED_PITCHER = "RIGHT_HANDED_PITCHER"
    LEFT_HANDED_PITCHER = "LEFT_HANDED_PITCHER"
    RIGHT_HANDED_STARTER = "RIGHT_HANDED_STARTER"
    LEFT_HANDED_STARTER = "LEFT_HANDED_STARTER"
    LEFT_HANDED_RELIEVER = "LEFT_HANDED_RELIEVER"
    RIGHT_HANDED_RELIEVER = "RIGHT_HANDED_RELIEVER"
    TWO_WAY_PITCHER_INFIELDER = "TWO_WAY_PITCHER_INFIELDER"
    TWO_WAY_PITCHER_OUTFIELDER = "TWO_WAY_PITCHER_OUTFIELDER"
    TWO_WAY_PITCHER_UTILITY = "TWO_WAY_PITCHER_UTILITY"
    TWO_WAY_PLAYER = "TWO_WAY_PLAYER"
    BATTER = "BATTER"
    UNKNOWN = "UNKNOWN"
    RUNNER_ON_FIRST = "RUNNER_ON_FIRST"
    RUNNER_ON_SECOND = "RUNNER_ON_SECOND"
    RUNNER_ON_THIRD = "RUNNER_ON_THIRD"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """BaseballPosition - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
