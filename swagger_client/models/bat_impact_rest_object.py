# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatImpactRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'attack_angle': 'float',
        'speed': 'BatImpactSpeedRestObject',
        'contact_point': 'ContactPointPositionRestObject',
        'head_position': 'HeadPositionRestObject',
        'handle_position': 'HandlePositionRestObject',
        'velocity': 'BatImpactVelocityRestObject',
        'time_stamp': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'attack_angle': 'attackAngle',
        'speed': 'speed',
        'contact_point': 'contactPoint',
        'head_position': 'headPosition',
        'handle_position': 'handlePosition',
        'velocity': 'velocity',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, copyright=None, attack_angle=None, speed=None, contact_point=None, head_position=None, handle_position=None, velocity=None, time_stamp=None):  # noqa: E501
        """BatImpactRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._attack_angle = None
        self._speed = None
        self._contact_point = None
        self._head_position = None
        self._handle_position = None
        self._velocity = None
        self._time_stamp = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if attack_angle is not None:
            self.attack_angle = attack_angle
        if speed is not None:
            self.speed = speed
        if contact_point is not None:
            self.contact_point = contact_point
        if head_position is not None:
            self.head_position = head_position
        if handle_position is not None:
            self.handle_position = handle_position
        if velocity is not None:
            self.velocity = velocity
        if time_stamp is not None:
            self.time_stamp = time_stamp

    @property
    def copyright(self):
        """Gets the copyright of this BatImpactRestObject.  # noqa: E501


        :return: The copyright of this BatImpactRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BatImpactRestObject.


        :param copyright: The copyright of this BatImpactRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def attack_angle(self):
        """Gets the attack_angle of this BatImpactRestObject.  # noqa: E501

        The angle of the bat's path, at impact, relative to horizontal. A negative value represents swinging downward, a positive value upward.  # noqa: E501

        :return: The attack_angle of this BatImpactRestObject.  # noqa: E501
        :rtype: float
        """
        return self._attack_angle

    @attack_angle.setter
    def attack_angle(self, attack_angle):
        """Sets the attack_angle of this BatImpactRestObject.

        The angle of the bat's path, at impact, relative to horizontal. A negative value represents swinging downward, a positive value upward.  # noqa: E501

        :param attack_angle: The attack_angle of this BatImpactRestObject.  # noqa: E501
        :type: float
        """

        self._attack_angle = attack_angle

    @property
    def speed(self):
        """Gets the speed of this BatImpactRestObject.  # noqa: E501


        :return: The speed of this BatImpactRestObject.  # noqa: E501
        :rtype: BatImpactSpeedRestObject
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this BatImpactRestObject.


        :param speed: The speed of this BatImpactRestObject.  # noqa: E501
        :type: BatImpactSpeedRestObject
        """

        self._speed = speed

    @property
    def contact_point(self):
        """Gets the contact_point of this BatImpactRestObject.  # noqa: E501


        :return: The contact_point of this BatImpactRestObject.  # noqa: E501
        :rtype: ContactPointPositionRestObject
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point):
        """Sets the contact_point of this BatImpactRestObject.


        :param contact_point: The contact_point of this BatImpactRestObject.  # noqa: E501
        :type: ContactPointPositionRestObject
        """

        self._contact_point = contact_point

    @property
    def head_position(self):
        """Gets the head_position of this BatImpactRestObject.  # noqa: E501


        :return: The head_position of this BatImpactRestObject.  # noqa: E501
        :rtype: HeadPositionRestObject
        """
        return self._head_position

    @head_position.setter
    def head_position(self, head_position):
        """Sets the head_position of this BatImpactRestObject.


        :param head_position: The head_position of this BatImpactRestObject.  # noqa: E501
        :type: HeadPositionRestObject
        """

        self._head_position = head_position

    @property
    def handle_position(self):
        """Gets the handle_position of this BatImpactRestObject.  # noqa: E501


        :return: The handle_position of this BatImpactRestObject.  # noqa: E501
        :rtype: HandlePositionRestObject
        """
        return self._handle_position

    @handle_position.setter
    def handle_position(self, handle_position):
        """Sets the handle_position of this BatImpactRestObject.


        :param handle_position: The handle_position of this BatImpactRestObject.  # noqa: E501
        :type: HandlePositionRestObject
        """

        self._handle_position = handle_position

    @property
    def velocity(self):
        """Gets the velocity of this BatImpactRestObject.  # noqa: E501


        :return: The velocity of this BatImpactRestObject.  # noqa: E501
        :rtype: BatImpactVelocityRestObject
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this BatImpactRestObject.


        :param velocity: The velocity of this BatImpactRestObject.  # noqa: E501
        :type: BatImpactVelocityRestObject
        """

        self._velocity = velocity

    @property
    def time_stamp(self):
        """Gets the time_stamp of this BatImpactRestObject.  # noqa: E501

        TimeStamp when bat and ball either intersect in case of contact, or in cases where they don’t collide, timeStamp where ball is closest to any point along the bat.  # noqa: E501

        :return: The time_stamp of this BatImpactRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this BatImpactRestObject.

        TimeStamp when bat and ball either intersect in case of contact, or in cases where they don’t collide, timeStamp where ball is closest to any point along the bat.  # noqa: E501

        :param time_stamp: The time_stamp of this BatImpactRestObject.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatImpactRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatImpactRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
