# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'address4': 'str',
        'city': 'str',
        'state': 'str',
        'state_abbrev': 'str',
        'postal_code': 'str',
        'default_coordinates': 'CoordinateRestObject',
        'coordinates': 'list[CoordinateRestObject]',
        'azimuth_angle': 'float',
        'elevation': 'int',
        'country': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'address4': 'address4',
        'city': 'city',
        'state': 'state',
        'state_abbrev': 'stateAbbrev',
        'postal_code': 'postalCode',
        'default_coordinates': 'defaultCoordinates',
        'coordinates': 'coordinates',
        'azimuth_angle': 'azimuthAngle',
        'elevation': 'elevation',
        'country': 'country',
        'phone': 'phone'
    }

    def __init__(self, copyright=None, address1=None, address2=None, address3=None, address4=None, city=None, state=None, state_abbrev=None, postal_code=None, default_coordinates=None, coordinates=None, azimuth_angle=None, elevation=None, country=None, phone=None):  # noqa: E501
        """LocationRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._address4 = None
        self._city = None
        self._state = None
        self._state_abbrev = None
        self._postal_code = None
        self._default_coordinates = None
        self._coordinates = None
        self._azimuth_angle = None
        self._elevation = None
        self._country = None
        self._phone = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if address4 is not None:
            self.address4 = address4
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if state_abbrev is not None:
            self.state_abbrev = state_abbrev
        if postal_code is not None:
            self.postal_code = postal_code
        if default_coordinates is not None:
            self.default_coordinates = default_coordinates
        if coordinates is not None:
            self.coordinates = coordinates
        if azimuth_angle is not None:
            self.azimuth_angle = azimuth_angle
        if elevation is not None:
            self.elevation = elevation
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone

    @property
    def copyright(self):
        """Gets the copyright of this LocationRestObject.  # noqa: E501


        :return: The copyright of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this LocationRestObject.


        :param copyright: The copyright of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def address1(self):
        """Gets the address1 of this LocationRestObject.  # noqa: E501


        :return: The address1 of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this LocationRestObject.


        :param address1: The address1 of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this LocationRestObject.  # noqa: E501


        :return: The address2 of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this LocationRestObject.


        :param address2: The address2 of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this LocationRestObject.  # noqa: E501


        :return: The address3 of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this LocationRestObject.


        :param address3: The address3 of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this LocationRestObject.  # noqa: E501


        :return: The address4 of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this LocationRestObject.


        :param address4: The address4 of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._address4 = address4

    @property
    def city(self):
        """Gets the city of this LocationRestObject.  # noqa: E501


        :return: The city of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationRestObject.


        :param city: The city of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this LocationRestObject.  # noqa: E501


        :return: The state of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocationRestObject.


        :param state: The state of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def state_abbrev(self):
        """Gets the state_abbrev of this LocationRestObject.  # noqa: E501


        :return: The state_abbrev of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._state_abbrev

    @state_abbrev.setter
    def state_abbrev(self, state_abbrev):
        """Sets the state_abbrev of this LocationRestObject.


        :param state_abbrev: The state_abbrev of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._state_abbrev = state_abbrev

    @property
    def postal_code(self):
        """Gets the postal_code of this LocationRestObject.  # noqa: E501


        :return: The postal_code of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this LocationRestObject.


        :param postal_code: The postal_code of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def default_coordinates(self):
        """Gets the default_coordinates of this LocationRestObject.  # noqa: E501


        :return: The default_coordinates of this LocationRestObject.  # noqa: E501
        :rtype: CoordinateRestObject
        """
        return self._default_coordinates

    @default_coordinates.setter
    def default_coordinates(self, default_coordinates):
        """Sets the default_coordinates of this LocationRestObject.


        :param default_coordinates: The default_coordinates of this LocationRestObject.  # noqa: E501
        :type: CoordinateRestObject
        """

        self._default_coordinates = default_coordinates

    @property
    def coordinates(self):
        """Gets the coordinates of this LocationRestObject.  # noqa: E501


        :return: The coordinates of this LocationRestObject.  # noqa: E501
        :rtype: list[CoordinateRestObject]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this LocationRestObject.


        :param coordinates: The coordinates of this LocationRestObject.  # noqa: E501
        :type: list[CoordinateRestObject]
        """

        self._coordinates = coordinates

    @property
    def azimuth_angle(self):
        """Gets the azimuth_angle of this LocationRestObject.  # noqa: E501


        :return: The azimuth_angle of this LocationRestObject.  # noqa: E501
        :rtype: float
        """
        return self._azimuth_angle

    @azimuth_angle.setter
    def azimuth_angle(self, azimuth_angle):
        """Sets the azimuth_angle of this LocationRestObject.


        :param azimuth_angle: The azimuth_angle of this LocationRestObject.  # noqa: E501
        :type: float
        """

        self._azimuth_angle = azimuth_angle

    @property
    def elevation(self):
        """Gets the elevation of this LocationRestObject.  # noqa: E501


        :return: The elevation of this LocationRestObject.  # noqa: E501
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this LocationRestObject.


        :param elevation: The elevation of this LocationRestObject.  # noqa: E501
        :type: int
        """

        self._elevation = elevation

    @property
    def country(self):
        """Gets the country of this LocationRestObject.  # noqa: E501


        :return: The country of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocationRestObject.


        :param country: The country of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this LocationRestObject.  # noqa: E501


        :return: The phone of this LocationRestObject.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LocationRestObject.


        :param phone: The phone of this LocationRestObject.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
