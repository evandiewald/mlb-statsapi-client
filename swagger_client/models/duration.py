# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Duration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standard_seconds': 'int',
        'standard_days': 'int',
        'standard_hours': 'int',
        'standard_minutes': 'int',
        'millis': 'int'
    }

    attribute_map = {
        'standard_seconds': 'standardSeconds',
        'standard_days': 'standardDays',
        'standard_hours': 'standardHours',
        'standard_minutes': 'standardMinutes',
        'millis': 'millis'
    }

    def __init__(self, standard_seconds=None, standard_days=None, standard_hours=None, standard_minutes=None, millis=None):  # noqa: E501
        """Duration - a model defined in Swagger"""  # noqa: E501
        self._standard_seconds = None
        self._standard_days = None
        self._standard_hours = None
        self._standard_minutes = None
        self._millis = None
        self.discriminator = None
        if standard_seconds is not None:
            self.standard_seconds = standard_seconds
        if standard_days is not None:
            self.standard_days = standard_days
        if standard_hours is not None:
            self.standard_hours = standard_hours
        if standard_minutes is not None:
            self.standard_minutes = standard_minutes
        if millis is not None:
            self.millis = millis

    @property
    def standard_seconds(self):
        """Gets the standard_seconds of this Duration.  # noqa: E501


        :return: The standard_seconds of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._standard_seconds

    @standard_seconds.setter
    def standard_seconds(self, standard_seconds):
        """Sets the standard_seconds of this Duration.


        :param standard_seconds: The standard_seconds of this Duration.  # noqa: E501
        :type: int
        """

        self._standard_seconds = standard_seconds

    @property
    def standard_days(self):
        """Gets the standard_days of this Duration.  # noqa: E501


        :return: The standard_days of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._standard_days

    @standard_days.setter
    def standard_days(self, standard_days):
        """Sets the standard_days of this Duration.


        :param standard_days: The standard_days of this Duration.  # noqa: E501
        :type: int
        """

        self._standard_days = standard_days

    @property
    def standard_hours(self):
        """Gets the standard_hours of this Duration.  # noqa: E501


        :return: The standard_hours of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._standard_hours

    @standard_hours.setter
    def standard_hours(self, standard_hours):
        """Sets the standard_hours of this Duration.


        :param standard_hours: The standard_hours of this Duration.  # noqa: E501
        :type: int
        """

        self._standard_hours = standard_hours

    @property
    def standard_minutes(self):
        """Gets the standard_minutes of this Duration.  # noqa: E501


        :return: The standard_minutes of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._standard_minutes

    @standard_minutes.setter
    def standard_minutes(self, standard_minutes):
        """Sets the standard_minutes of this Duration.


        :param standard_minutes: The standard_minutes of this Duration.  # noqa: E501
        :type: int
        """

        self._standard_minutes = standard_minutes

    @property
    def millis(self):
        """Gets the millis of this Duration.  # noqa: E501


        :return: The millis of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._millis

    @millis.setter
    def millis(self, millis):
        """Sets the millis of this Duration.


        :param millis: The millis of this Duration.  # noqa: E501
        :type: int
        """

        self._millis = millis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Duration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Duration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
