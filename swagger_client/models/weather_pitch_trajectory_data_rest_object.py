# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherPitchTrajectoryDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'trajectory_polynomial_x': 'list[float]',
        'trajectory_polynomial_y': 'list[float]',
        'trajectory_polynomial_z': 'list[float]',
        'location': 'CoordinatesRestObject',
        'wind_speed': 'WindSpeedRestObject',
        'apex': 'float',
        'trajectory_confidence': 'WeatherTrajectoryConfidenceTypeRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'trajectory_polynomial_x': 'trajectoryPolynomialX',
        'trajectory_polynomial_y': 'trajectoryPolynomialY',
        'trajectory_polynomial_z': 'trajectoryPolynomialZ',
        'location': 'location',
        'wind_speed': 'windSpeed',
        'apex': 'apex',
        'trajectory_confidence': 'trajectoryConfidence'
    }

    def __init__(self, copyright=None, trajectory_polynomial_x=None, trajectory_polynomial_y=None, trajectory_polynomial_z=None, location=None, wind_speed=None, apex=None, trajectory_confidence=None):  # noqa: E501
        """WeatherPitchTrajectoryDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._trajectory_polynomial_x = None
        self._trajectory_polynomial_y = None
        self._trajectory_polynomial_z = None
        self._location = None
        self._wind_speed = None
        self._apex = None
        self._trajectory_confidence = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if trajectory_polynomial_x is not None:
            self.trajectory_polynomial_x = trajectory_polynomial_x
        if trajectory_polynomial_y is not None:
            self.trajectory_polynomial_y = trajectory_polynomial_y
        if trajectory_polynomial_z is not None:
            self.trajectory_polynomial_z = trajectory_polynomial_z
        if location is not None:
            self.location = location
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if apex is not None:
            self.apex = apex
        if trajectory_confidence is not None:
            self.trajectory_confidence = trajectory_confidence

    @property
    def copyright(self):
        """Gets the copyright of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501


        :return: The copyright of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherPitchTrajectoryDataRestObject.


        :param copyright: The copyright of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def trajectory_polynomial_x(self):
        """Gets the trajectory_polynomial_x of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing x position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_x of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_x

    @trajectory_polynomial_x.setter
    def trajectory_polynomial_x(self, trajectory_polynomial_x):
        """Sets the trajectory_polynomial_x of this WeatherPitchTrajectoryDataRestObject.

        Polynomial describing x position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_x: The trajectory_polynomial_x of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_x = trajectory_polynomial_x

    @property
    def trajectory_polynomial_y(self):
        """Gets the trajectory_polynomial_y of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing y position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_y of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_y

    @trajectory_polynomial_y.setter
    def trajectory_polynomial_y(self, trajectory_polynomial_y):
        """Sets the trajectory_polynomial_y of this WeatherPitchTrajectoryDataRestObject.

        Polynomial describing y position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_y: The trajectory_polynomial_y of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_y = trajectory_polynomial_y

    @property
    def trajectory_polynomial_z(self):
        """Gets the trajectory_polynomial_z of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing z position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_z of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_z

    @trajectory_polynomial_z.setter
    def trajectory_polynomial_z(self, trajectory_polynomial_z):
        """Sets the trajectory_polynomial_z of this WeatherPitchTrajectoryDataRestObject.

        Polynomial describing z position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_z: The trajectory_polynomial_z of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_z = trajectory_polynomial_z

    @property
    def location(self):
        """Gets the location of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501


        :return: The location of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WeatherPitchTrajectoryDataRestObject.


        :param location: The location of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._location = location

    @property
    def wind_speed(self):
        """Gets the wind_speed of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501


        :return: The wind_speed of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: WindSpeedRestObject
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this WeatherPitchTrajectoryDataRestObject.


        :param wind_speed: The wind_speed of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: WindSpeedRestObject
        """

        self._wind_speed = wind_speed

    @property
    def apex(self):
        """Gets the apex of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501


        :return: The apex of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._apex

    @apex.setter
    def apex(self, apex):
        """Sets the apex of this WeatherPitchTrajectoryDataRestObject.


        :param apex: The apex of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._apex = apex

    @property
    def trajectory_confidence(self):
        """Gets the trajectory_confidence of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501


        :return: The trajectory_confidence of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: WeatherTrajectoryConfidenceTypeRestObject
        """
        return self._trajectory_confidence

    @trajectory_confidence.setter
    def trajectory_confidence(self, trajectory_confidence):
        """Sets the trajectory_confidence of this WeatherPitchTrajectoryDataRestObject.


        :param trajectory_confidence: The trajectory_confidence of this WeatherPitchTrajectoryDataRestObject.  # noqa: E501
        :type: WeatherTrajectoryConfidenceTypeRestObject
        """

        self._trajectory_confidence = trajectory_confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherPitchTrajectoryDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherPitchTrajectoryDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
