# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherWindRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'direction': 'float',
        'gust': 'float',
        'speed': 'float'
    }

    attribute_map = {
        'copyright': 'copyright',
        'direction': 'direction',
        'gust': 'gust',
        'speed': 'speed'
    }

    def __init__(self, copyright=None, direction=None, gust=None, speed=None):  # noqa: E501
        """WeatherWindRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._direction = None
        self._gust = None
        self._speed = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if direction is not None:
            self.direction = direction
        if gust is not None:
            self.gust = gust
        if speed is not None:
            self.speed = speed

    @property
    def copyright(self):
        """Gets the copyright of this WeatherWindRestObject.  # noqa: E501


        :return: The copyright of this WeatherWindRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherWindRestObject.


        :param copyright: The copyright of this WeatherWindRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def direction(self):
        """Gets the direction of this WeatherWindRestObject.  # noqa: E501

        Azimuth direction in degrees from North, of the prevailing wind. wind.direction increases clockwise from North.  # noqa: E501

        :return: The direction of this WeatherWindRestObject.  # noqa: E501
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this WeatherWindRestObject.

        Azimuth direction in degrees from North, of the prevailing wind. wind.direction increases clockwise from North.  # noqa: E501

        :param direction: The direction of this WeatherWindRestObject.  # noqa: E501
        :type: float
        """

        self._direction = direction

    @property
    def gust(self):
        """Gets the gust of this WeatherWindRestObject.  # noqa: E501

        Peak transient wind speed in mph.  # noqa: E501

        :return: The gust of this WeatherWindRestObject.  # noqa: E501
        :rtype: float
        """
        return self._gust

    @gust.setter
    def gust(self, gust):
        """Sets the gust of this WeatherWindRestObject.

        Peak transient wind speed in mph.  # noqa: E501

        :param gust: The gust of this WeatherWindRestObject.  # noqa: E501
        :type: float
        """

        self._gust = gust

    @property
    def speed(self):
        """Gets the speed of this WeatherWindRestObject.  # noqa: E501

        Prevailing wind speed in mph.  # noqa: E501

        :return: The speed of this WeatherWindRestObject.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this WeatherWindRestObject.

        Prevailing wind speed in mph.  # noqa: E501

        :param speed: The speed of this WeatherWindRestObject.  # noqa: E501
        :type: float
        """

        self._speed = speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherWindRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherWindRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
