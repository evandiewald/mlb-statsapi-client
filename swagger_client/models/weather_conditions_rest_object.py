# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherConditionsRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'dew_point': 'float',
        'analysed_time_stamp': 'str',
        'pressure': 'float',
        'observed_time_stamp': 'str',
        'relative_humidity': 'float',
        'temperature': 'float',
        'wind': 'WeatherWindRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'dew_point': 'dewPoint',
        'analysed_time_stamp': 'analysedTimeStamp',
        'pressure': 'pressure',
        'observed_time_stamp': 'observedTimeStamp',
        'relative_humidity': 'relativeHumidity',
        'temperature': 'temperature',
        'wind': 'wind'
    }

    def __init__(self, copyright=None, dew_point=None, analysed_time_stamp=None, pressure=None, observed_time_stamp=None, relative_humidity=None, temperature=None, wind=None):  # noqa: E501
        """WeatherConditionsRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._dew_point = None
        self._analysed_time_stamp = None
        self._pressure = None
        self._observed_time_stamp = None
        self._relative_humidity = None
        self._temperature = None
        self._wind = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if dew_point is not None:
            self.dew_point = dew_point
        if analysed_time_stamp is not None:
            self.analysed_time_stamp = analysed_time_stamp
        if pressure is not None:
            self.pressure = pressure
        if observed_time_stamp is not None:
            self.observed_time_stamp = observed_time_stamp
        if relative_humidity is not None:
            self.relative_humidity = relative_humidity
        if temperature is not None:
            self.temperature = temperature
        if wind is not None:
            self.wind = wind

    @property
    def copyright(self):
        """Gets the copyright of this WeatherConditionsRestObject.  # noqa: E501


        :return: The copyright of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherConditionsRestObject.


        :param copyright: The copyright of this WeatherConditionsRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def dew_point(self):
        """Gets the dew_point of this WeatherConditionsRestObject.  # noqa: E501

        The atmospheric temperature below which dew will form.  # noqa: E501

        :return: The dew_point of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: float
        """
        return self._dew_point

    @dew_point.setter
    def dew_point(self, dew_point):
        """Sets the dew_point of this WeatherConditionsRestObject.

        The atmospheric temperature below which dew will form.  # noqa: E501

        :param dew_point: The dew_point of this WeatherConditionsRestObject.  # noqa: E501
        :type: float
        """

        self._dew_point = dew_point

    @property
    def analysed_time_stamp(self):
        """Gets the analysed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501


        :return: The analysed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._analysed_time_stamp

    @analysed_time_stamp.setter
    def analysed_time_stamp(self, analysed_time_stamp):
        """Sets the analysed_time_stamp of this WeatherConditionsRestObject.


        :param analysed_time_stamp: The analysed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501
        :type: str
        """

        self._analysed_time_stamp = analysed_time_stamp

    @property
    def pressure(self):
        """Gets the pressure of this WeatherConditionsRestObject.  # noqa: E501

        Atmospheric pressure as measured in venue in mm of Hg.  # noqa: E501

        :return: The pressure of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this WeatherConditionsRestObject.

        Atmospheric pressure as measured in venue in mm of Hg.  # noqa: E501

        :param pressure: The pressure of this WeatherConditionsRestObject.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def observed_time_stamp(self):
        """Gets the observed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501


        :return: The observed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._observed_time_stamp

    @observed_time_stamp.setter
    def observed_time_stamp(self, observed_time_stamp):
        """Sets the observed_time_stamp of this WeatherConditionsRestObject.


        :param observed_time_stamp: The observed_time_stamp of this WeatherConditionsRestObject.  # noqa: E501
        :type: str
        """

        self._observed_time_stamp = observed_time_stamp

    @property
    def relative_humidity(self):
        """Gets the relative_humidity of this WeatherConditionsRestObject.  # noqa: E501

        Humidity as measured in venue in % relative humidity  # noqa: E501

        :return: The relative_humidity of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: float
        """
        return self._relative_humidity

    @relative_humidity.setter
    def relative_humidity(self, relative_humidity):
        """Sets the relative_humidity of this WeatherConditionsRestObject.

        Humidity as measured in venue in % relative humidity  # noqa: E501

        :param relative_humidity: The relative_humidity of this WeatherConditionsRestObject.  # noqa: E501
        :type: float
        """

        self._relative_humidity = relative_humidity

    @property
    def temperature(self):
        """Gets the temperature of this WeatherConditionsRestObject.  # noqa: E501


        :return: The temperature of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this WeatherConditionsRestObject.


        :param temperature: The temperature of this WeatherConditionsRestObject.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def wind(self):
        """Gets the wind of this WeatherConditionsRestObject.  # noqa: E501


        :return: The wind of this WeatherConditionsRestObject.  # noqa: E501
        :rtype: WeatherWindRestObject
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this WeatherConditionsRestObject.


        :param wind: The wind of this WeatherConditionsRestObject.  # noqa: E501
        :type: WeatherWindRestObject
        """

        self._wind = wind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherConditionsRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherConditionsRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
