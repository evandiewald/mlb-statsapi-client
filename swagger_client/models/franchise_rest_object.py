# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FranchiseRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'franchise_id': 'int',
        'first_season_id': 'int',
        'last_season_id': 'int',
        'most_recent_team_id': 'int',
        'team_name': 'str',
        'location_name': 'str',
        'link': 'str',
        'roster': 'RosterRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'franchise_id': 'franchiseId',
        'first_season_id': 'firstSeasonId',
        'last_season_id': 'lastSeasonId',
        'most_recent_team_id': 'mostRecentTeamId',
        'team_name': 'teamName',
        'location_name': 'locationName',
        'link': 'link',
        'roster': 'roster'
    }

    def __init__(self, copyright=None, franchise_id=None, first_season_id=None, last_season_id=None, most_recent_team_id=None, team_name=None, location_name=None, link=None, roster=None):  # noqa: E501
        """FranchiseRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._franchise_id = None
        self._first_season_id = None
        self._last_season_id = None
        self._most_recent_team_id = None
        self._team_name = None
        self._location_name = None
        self._link = None
        self._roster = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if franchise_id is not None:
            self.franchise_id = franchise_id
        if first_season_id is not None:
            self.first_season_id = first_season_id
        if last_season_id is not None:
            self.last_season_id = last_season_id
        if most_recent_team_id is not None:
            self.most_recent_team_id = most_recent_team_id
        if team_name is not None:
            self.team_name = team_name
        if location_name is not None:
            self.location_name = location_name
        if link is not None:
            self.link = link
        if roster is not None:
            self.roster = roster

    @property
    def copyright(self):
        """Gets the copyright of this FranchiseRestObject.  # noqa: E501


        :return: The copyright of this FranchiseRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this FranchiseRestObject.


        :param copyright: The copyright of this FranchiseRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def franchise_id(self):
        """Gets the franchise_id of this FranchiseRestObject.  # noqa: E501


        :return: The franchise_id of this FranchiseRestObject.  # noqa: E501
        :rtype: int
        """
        return self._franchise_id

    @franchise_id.setter
    def franchise_id(self, franchise_id):
        """Sets the franchise_id of this FranchiseRestObject.


        :param franchise_id: The franchise_id of this FranchiseRestObject.  # noqa: E501
        :type: int
        """

        self._franchise_id = franchise_id

    @property
    def first_season_id(self):
        """Gets the first_season_id of this FranchiseRestObject.  # noqa: E501


        :return: The first_season_id of this FranchiseRestObject.  # noqa: E501
        :rtype: int
        """
        return self._first_season_id

    @first_season_id.setter
    def first_season_id(self, first_season_id):
        """Sets the first_season_id of this FranchiseRestObject.


        :param first_season_id: The first_season_id of this FranchiseRestObject.  # noqa: E501
        :type: int
        """

        self._first_season_id = first_season_id

    @property
    def last_season_id(self):
        """Gets the last_season_id of this FranchiseRestObject.  # noqa: E501


        :return: The last_season_id of this FranchiseRestObject.  # noqa: E501
        :rtype: int
        """
        return self._last_season_id

    @last_season_id.setter
    def last_season_id(self, last_season_id):
        """Sets the last_season_id of this FranchiseRestObject.


        :param last_season_id: The last_season_id of this FranchiseRestObject.  # noqa: E501
        :type: int
        """

        self._last_season_id = last_season_id

    @property
    def most_recent_team_id(self):
        """Gets the most_recent_team_id of this FranchiseRestObject.  # noqa: E501


        :return: The most_recent_team_id of this FranchiseRestObject.  # noqa: E501
        :rtype: int
        """
        return self._most_recent_team_id

    @most_recent_team_id.setter
    def most_recent_team_id(self, most_recent_team_id):
        """Sets the most_recent_team_id of this FranchiseRestObject.


        :param most_recent_team_id: The most_recent_team_id of this FranchiseRestObject.  # noqa: E501
        :type: int
        """

        self._most_recent_team_id = most_recent_team_id

    @property
    def team_name(self):
        """Gets the team_name of this FranchiseRestObject.  # noqa: E501


        :return: The team_name of this FranchiseRestObject.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this FranchiseRestObject.


        :param team_name: The team_name of this FranchiseRestObject.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def location_name(self):
        """Gets the location_name of this FranchiseRestObject.  # noqa: E501


        :return: The location_name of this FranchiseRestObject.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this FranchiseRestObject.


        :param location_name: The location_name of this FranchiseRestObject.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def link(self):
        """Gets the link of this FranchiseRestObject.  # noqa: E501


        :return: The link of this FranchiseRestObject.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this FranchiseRestObject.


        :param link: The link of this FranchiseRestObject.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def roster(self):
        """Gets the roster of this FranchiseRestObject.  # noqa: E501


        :return: The roster of this FranchiseRestObject.  # noqa: E501
        :rtype: RosterRestObject
        """
        return self._roster

    @roster.setter
    def roster(self, roster):
        """Sets the roster of this FranchiseRestObject.


        :param roster: The roster of this FranchiseRestObject.  # noqa: E501
        :type: RosterRestObject
        """

        self._roster = roster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FranchiseRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FranchiseRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
