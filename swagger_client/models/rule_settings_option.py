# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuleSettingsOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'setting_value_id': 'int',
        'setting_id': 'int',
        'display_name': 'str',
        'description': 'str',
        'active_begin_date': 'date',
        'active_end_date': 'date',
        'value': 'object',
        'sort_order': 'int'
    }

    attribute_map = {
        'setting_value_id': 'settingValueId',
        'setting_id': 'settingId',
        'display_name': 'displayName',
        'description': 'description',
        'active_begin_date': 'activeBeginDate',
        'active_end_date': 'activeEndDate',
        'value': 'value',
        'sort_order': 'sortOrder'
    }

    def __init__(self, setting_value_id=None, setting_id=None, display_name=None, description=None, active_begin_date=None, active_end_date=None, value=None, sort_order=None):  # noqa: E501
        """RuleSettingsOption - a model defined in Swagger"""  # noqa: E501
        self._setting_value_id = None
        self._setting_id = None
        self._display_name = None
        self._description = None
        self._active_begin_date = None
        self._active_end_date = None
        self._value = None
        self._sort_order = None
        self.discriminator = None
        if setting_value_id is not None:
            self.setting_value_id = setting_value_id
        if setting_id is not None:
            self.setting_id = setting_id
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if active_begin_date is not None:
            self.active_begin_date = active_begin_date
        if active_end_date is not None:
            self.active_end_date = active_end_date
        if value is not None:
            self.value = value
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def setting_value_id(self):
        """Gets the setting_value_id of this RuleSettingsOption.  # noqa: E501


        :return: The setting_value_id of this RuleSettingsOption.  # noqa: E501
        :rtype: int
        """
        return self._setting_value_id

    @setting_value_id.setter
    def setting_value_id(self, setting_value_id):
        """Sets the setting_value_id of this RuleSettingsOption.


        :param setting_value_id: The setting_value_id of this RuleSettingsOption.  # noqa: E501
        :type: int
        """

        self._setting_value_id = setting_value_id

    @property
    def setting_id(self):
        """Gets the setting_id of this RuleSettingsOption.  # noqa: E501


        :return: The setting_id of this RuleSettingsOption.  # noqa: E501
        :rtype: int
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this RuleSettingsOption.


        :param setting_id: The setting_id of this RuleSettingsOption.  # noqa: E501
        :type: int
        """

        self._setting_id = setting_id

    @property
    def display_name(self):
        """Gets the display_name of this RuleSettingsOption.  # noqa: E501


        :return: The display_name of this RuleSettingsOption.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RuleSettingsOption.


        :param display_name: The display_name of this RuleSettingsOption.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this RuleSettingsOption.  # noqa: E501


        :return: The description of this RuleSettingsOption.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RuleSettingsOption.


        :param description: The description of this RuleSettingsOption.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active_begin_date(self):
        """Gets the active_begin_date of this RuleSettingsOption.  # noqa: E501


        :return: The active_begin_date of this RuleSettingsOption.  # noqa: E501
        :rtype: date
        """
        return self._active_begin_date

    @active_begin_date.setter
    def active_begin_date(self, active_begin_date):
        """Sets the active_begin_date of this RuleSettingsOption.


        :param active_begin_date: The active_begin_date of this RuleSettingsOption.  # noqa: E501
        :type: date
        """

        self._active_begin_date = active_begin_date

    @property
    def active_end_date(self):
        """Gets the active_end_date of this RuleSettingsOption.  # noqa: E501


        :return: The active_end_date of this RuleSettingsOption.  # noqa: E501
        :rtype: date
        """
        return self._active_end_date

    @active_end_date.setter
    def active_end_date(self, active_end_date):
        """Sets the active_end_date of this RuleSettingsOption.


        :param active_end_date: The active_end_date of this RuleSettingsOption.  # noqa: E501
        :type: date
        """

        self._active_end_date = active_end_date

    @property
    def value(self):
        """Gets the value of this RuleSettingsOption.  # noqa: E501


        :return: The value of this RuleSettingsOption.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RuleSettingsOption.


        :param value: The value of this RuleSettingsOption.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def sort_order(self):
        """Gets the sort_order of this RuleSettingsOption.  # noqa: E501


        :return: The sort_order of this RuleSettingsOption.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this RuleSettingsOption.


        :param sort_order: The sort_order of this RuleSettingsOption.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSettingsOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSettingsOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
