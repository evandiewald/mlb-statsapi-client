# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatTrackingRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'units': 'JsonNode',
        'game_pk': 'int',
        'play_id': 'str',
        'impact': 'BatImpactRestObject',
        'sweet_spot': 'BatSweetSpotRestObject',
        'bat_positions': 'list[BatPositionRestObject]',
        'system': 'BatTrackingSystemRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'units': 'units',
        'game_pk': 'gamePk',
        'play_id': 'playId',
        'impact': 'impact',
        'sweet_spot': 'sweetSpot',
        'bat_positions': 'batPositions',
        'system': 'system'
    }

    def __init__(self, copyright=None, units=None, game_pk=None, play_id=None, impact=None, sweet_spot=None, bat_positions=None, system=None):  # noqa: E501
        """BatTrackingRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._units = None
        self._game_pk = None
        self._play_id = None
        self._impact = None
        self._sweet_spot = None
        self._bat_positions = None
        self._system = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if units is not None:
            self.units = units
        if game_pk is not None:
            self.game_pk = game_pk
        if play_id is not None:
            self.play_id = play_id
        if impact is not None:
            self.impact = impact
        if sweet_spot is not None:
            self.sweet_spot = sweet_spot
        if bat_positions is not None:
            self.bat_positions = bat_positions
        if system is not None:
            self.system = system

    @property
    def copyright(self):
        """Gets the copyright of this BatTrackingRestObject.  # noqa: E501


        :return: The copyright of this BatTrackingRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BatTrackingRestObject.


        :param copyright: The copyright of this BatTrackingRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def units(self):
        """Gets the units of this BatTrackingRestObject.  # noqa: E501


        :return: The units of this BatTrackingRestObject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this BatTrackingRestObject.


        :param units: The units of this BatTrackingRestObject.  # noqa: E501
        :type: JsonNode
        """

        self._units = units

    @property
    def game_pk(self):
        """Gets the game_pk of this BatTrackingRestObject.  # noqa: E501

        Unique game identifier.  # noqa: E501

        :return: The game_pk of this BatTrackingRestObject.  # noqa: E501
        :rtype: int
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this BatTrackingRestObject.

        Unique game identifier.  # noqa: E501

        :param game_pk: The game_pk of this BatTrackingRestObject.  # noqa: E501
        :type: int
        """

        self._game_pk = game_pk

    @property
    def play_id(self):
        """Gets the play_id of this BatTrackingRestObject.  # noqa: E501

        Unique play identifier (per game).  # noqa: E501

        :return: The play_id of this BatTrackingRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this BatTrackingRestObject.

        Unique play identifier (per game).  # noqa: E501

        :param play_id: The play_id of this BatTrackingRestObject.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def impact(self):
        """Gets the impact of this BatTrackingRestObject.  # noqa: E501


        :return: The impact of this BatTrackingRestObject.  # noqa: E501
        :rtype: BatImpactRestObject
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this BatTrackingRestObject.


        :param impact: The impact of this BatTrackingRestObject.  # noqa: E501
        :type: BatImpactRestObject
        """

        self._impact = impact

    @property
    def sweet_spot(self):
        """Gets the sweet_spot of this BatTrackingRestObject.  # noqa: E501


        :return: The sweet_spot of this BatTrackingRestObject.  # noqa: E501
        :rtype: BatSweetSpotRestObject
        """
        return self._sweet_spot

    @sweet_spot.setter
    def sweet_spot(self, sweet_spot):
        """Sets the sweet_spot of this BatTrackingRestObject.


        :param sweet_spot: The sweet_spot of this BatTrackingRestObject.  # noqa: E501
        :type: BatSweetSpotRestObject
        """

        self._sweet_spot = sweet_spot

    @property
    def bat_positions(self):
        """Gets the bat_positions of this BatTrackingRestObject.  # noqa: E501


        :return: The bat_positions of this BatTrackingRestObject.  # noqa: E501
        :rtype: list[BatPositionRestObject]
        """
        return self._bat_positions

    @bat_positions.setter
    def bat_positions(self, bat_positions):
        """Sets the bat_positions of this BatTrackingRestObject.


        :param bat_positions: The bat_positions of this BatTrackingRestObject.  # noqa: E501
        :type: list[BatPositionRestObject]
        """

        self._bat_positions = bat_positions

    @property
    def system(self):
        """Gets the system of this BatTrackingRestObject.  # noqa: E501


        :return: The system of this BatTrackingRestObject.  # noqa: E501
        :rtype: BatTrackingSystemRestObject
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this BatTrackingRestObject.


        :param system: The system of this BatTrackingRestObject.  # noqa: E501
        :type: BatTrackingSystemRestObject
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatTrackingRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatTrackingRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
