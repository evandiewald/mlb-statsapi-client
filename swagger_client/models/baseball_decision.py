# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballDecision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'winner': 'BaseballPerson',
        'loser': 'BaseballPerson',
        'save': 'BaseballPerson',
        'empty': 'bool',
        'not_empty': 'bool',
        'hydrated_people': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'winner': 'winner',
        'loser': 'loser',
        'save': 'save',
        'empty': 'empty',
        'not_empty': 'notEmpty',
        'hydrated_people': 'hydratedPeople',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, winner=None, loser=None, save=None, empty=None, not_empty=None, hydrated_people=None, user_privileges=None):  # noqa: E501
        """BaseballDecision - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._winner = None
        self._loser = None
        self._save = None
        self._empty = None
        self._not_empty = None
        self._hydrated_people = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if winner is not None:
            self.winner = winner
        if loser is not None:
            self.loser = loser
        if save is not None:
            self.save = save
        if empty is not None:
            self.empty = empty
        if not_empty is not None:
            self.not_empty = not_empty
        if hydrated_people is not None:
            self.hydrated_people = hydrated_people
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this BaseballDecision.  # noqa: E501


        :return: The requesting_user_role of this BaseballDecision.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this BaseballDecision.


        :param requesting_user_role: The requesting_user_role of this BaseballDecision.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def winner(self):
        """Gets the winner of this BaseballDecision.  # noqa: E501


        :return: The winner of this BaseballDecision.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this BaseballDecision.


        :param winner: The winner of this BaseballDecision.  # noqa: E501
        :type: BaseballPerson
        """

        self._winner = winner

    @property
    def loser(self):
        """Gets the loser of this BaseballDecision.  # noqa: E501


        :return: The loser of this BaseballDecision.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._loser

    @loser.setter
    def loser(self, loser):
        """Sets the loser of this BaseballDecision.


        :param loser: The loser of this BaseballDecision.  # noqa: E501
        :type: BaseballPerson
        """

        self._loser = loser

    @property
    def save(self):
        """Gets the save of this BaseballDecision.  # noqa: E501


        :return: The save of this BaseballDecision.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._save

    @save.setter
    def save(self, save):
        """Sets the save of this BaseballDecision.


        :param save: The save of this BaseballDecision.  # noqa: E501
        :type: BaseballPerson
        """

        self._save = save

    @property
    def empty(self):
        """Gets the empty of this BaseballDecision.  # noqa: E501


        :return: The empty of this BaseballDecision.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this BaseballDecision.


        :param empty: The empty of this BaseballDecision.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def not_empty(self):
        """Gets the not_empty of this BaseballDecision.  # noqa: E501


        :return: The not_empty of this BaseballDecision.  # noqa: E501
        :rtype: bool
        """
        return self._not_empty

    @not_empty.setter
    def not_empty(self, not_empty):
        """Sets the not_empty of this BaseballDecision.


        :param not_empty: The not_empty of this BaseballDecision.  # noqa: E501
        :type: bool
        """

        self._not_empty = not_empty

    @property
    def hydrated_people(self):
        """Gets the hydrated_people of this BaseballDecision.  # noqa: E501


        :return: The hydrated_people of this BaseballDecision.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_people

    @hydrated_people.setter
    def hydrated_people(self, hydrated_people):
        """Sets the hydrated_people of this BaseballDecision.


        :param hydrated_people: The hydrated_people of this BaseballDecision.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_people = hydrated_people

    @property
    def user_privileges(self):
        """Gets the user_privileges of this BaseballDecision.  # noqa: E501


        :return: The user_privileges of this BaseballDecision.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this BaseballDecision.


        :param user_privileges: The user_privileges of this BaseballDecision.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballDecision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballDecision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
