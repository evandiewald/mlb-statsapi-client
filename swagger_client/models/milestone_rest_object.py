# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MilestoneRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'milestone_achievement_id': 'int',
        'milestone_projection_id': 'int',
        'projection_value': 'int',
        'projection_rank': 'int',
        'current_value': 'int',
        'achievement_value': 'int',
        'achievement_rank': 'int',
        'achievement_date': 'date',
        'is_last_achievement_status': 'bool',
        'game_id': 'int',
        'play_id': 'str',
        'at_bat_number': 'int',
        'pitch_number': 'int',
        'player': 'BaseballPersonRestObject',
        'team': 'BaseballTeamRestObject',
        'organization_id': 'int',
        'achievement_status': 'MilestoneAchievementStatusRestObject',
        'milestone_rule': 'MilestoneRuleRestObject',
        'rule_count': 'int',
        'stat_difference': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'milestone_achievement_id': 'milestoneAchievementId',
        'milestone_projection_id': 'milestoneProjectionId',
        'projection_value': 'projectionValue',
        'projection_rank': 'projectionRank',
        'current_value': 'currentValue',
        'achievement_value': 'achievementValue',
        'achievement_rank': 'achievementRank',
        'achievement_date': 'achievementDate',
        'is_last_achievement_status': 'isLastAchievementStatus',
        'game_id': 'gameId',
        'play_id': 'playId',
        'at_bat_number': 'atBatNumber',
        'pitch_number': 'pitchNumber',
        'player': 'player',
        'team': 'team',
        'organization_id': 'organizationId',
        'achievement_status': 'achievementStatus',
        'milestone_rule': 'milestoneRule',
        'rule_count': 'ruleCount',
        'stat_difference': 'statDifference'
    }

    def __init__(self, copyright=None, milestone_achievement_id=None, milestone_projection_id=None, projection_value=None, projection_rank=None, current_value=None, achievement_value=None, achievement_rank=None, achievement_date=None, is_last_achievement_status=None, game_id=None, play_id=None, at_bat_number=None, pitch_number=None, player=None, team=None, organization_id=None, achievement_status=None, milestone_rule=None, rule_count=None, stat_difference=None):  # noqa: E501
        """MilestoneRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._milestone_achievement_id = None
        self._milestone_projection_id = None
        self._projection_value = None
        self._projection_rank = None
        self._current_value = None
        self._achievement_value = None
        self._achievement_rank = None
        self._achievement_date = None
        self._is_last_achievement_status = None
        self._game_id = None
        self._play_id = None
        self._at_bat_number = None
        self._pitch_number = None
        self._player = None
        self._team = None
        self._organization_id = None
        self._achievement_status = None
        self._milestone_rule = None
        self._rule_count = None
        self._stat_difference = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if milestone_achievement_id is not None:
            self.milestone_achievement_id = milestone_achievement_id
        if milestone_projection_id is not None:
            self.milestone_projection_id = milestone_projection_id
        if projection_value is not None:
            self.projection_value = projection_value
        if projection_rank is not None:
            self.projection_rank = projection_rank
        if current_value is not None:
            self.current_value = current_value
        if achievement_value is not None:
            self.achievement_value = achievement_value
        if achievement_rank is not None:
            self.achievement_rank = achievement_rank
        if achievement_date is not None:
            self.achievement_date = achievement_date
        if is_last_achievement_status is not None:
            self.is_last_achievement_status = is_last_achievement_status
        if game_id is not None:
            self.game_id = game_id
        if play_id is not None:
            self.play_id = play_id
        if at_bat_number is not None:
            self.at_bat_number = at_bat_number
        if pitch_number is not None:
            self.pitch_number = pitch_number
        if player is not None:
            self.player = player
        if team is not None:
            self.team = team
        if organization_id is not None:
            self.organization_id = organization_id
        if achievement_status is not None:
            self.achievement_status = achievement_status
        if milestone_rule is not None:
            self.milestone_rule = milestone_rule
        if rule_count is not None:
            self.rule_count = rule_count
        if stat_difference is not None:
            self.stat_difference = stat_difference

    @property
    def copyright(self):
        """Gets the copyright of this MilestoneRestObject.  # noqa: E501


        :return: The copyright of this MilestoneRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this MilestoneRestObject.


        :param copyright: The copyright of this MilestoneRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def milestone_achievement_id(self):
        """Gets the milestone_achievement_id of this MilestoneRestObject.  # noqa: E501


        :return: The milestone_achievement_id of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._milestone_achievement_id

    @milestone_achievement_id.setter
    def milestone_achievement_id(self, milestone_achievement_id):
        """Sets the milestone_achievement_id of this MilestoneRestObject.


        :param milestone_achievement_id: The milestone_achievement_id of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._milestone_achievement_id = milestone_achievement_id

    @property
    def milestone_projection_id(self):
        """Gets the milestone_projection_id of this MilestoneRestObject.  # noqa: E501


        :return: The milestone_projection_id of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._milestone_projection_id

    @milestone_projection_id.setter
    def milestone_projection_id(self, milestone_projection_id):
        """Sets the milestone_projection_id of this MilestoneRestObject.


        :param milestone_projection_id: The milestone_projection_id of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._milestone_projection_id = milestone_projection_id

    @property
    def projection_value(self):
        """Gets the projection_value of this MilestoneRestObject.  # noqa: E501


        :return: The projection_value of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._projection_value

    @projection_value.setter
    def projection_value(self, projection_value):
        """Sets the projection_value of this MilestoneRestObject.


        :param projection_value: The projection_value of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._projection_value = projection_value

    @property
    def projection_rank(self):
        """Gets the projection_rank of this MilestoneRestObject.  # noqa: E501


        :return: The projection_rank of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._projection_rank

    @projection_rank.setter
    def projection_rank(self, projection_rank):
        """Sets the projection_rank of this MilestoneRestObject.


        :param projection_rank: The projection_rank of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._projection_rank = projection_rank

    @property
    def current_value(self):
        """Gets the current_value of this MilestoneRestObject.  # noqa: E501


        :return: The current_value of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this MilestoneRestObject.


        :param current_value: The current_value of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._current_value = current_value

    @property
    def achievement_value(self):
        """Gets the achievement_value of this MilestoneRestObject.  # noqa: E501


        :return: The achievement_value of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._achievement_value

    @achievement_value.setter
    def achievement_value(self, achievement_value):
        """Sets the achievement_value of this MilestoneRestObject.


        :param achievement_value: The achievement_value of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._achievement_value = achievement_value

    @property
    def achievement_rank(self):
        """Gets the achievement_rank of this MilestoneRestObject.  # noqa: E501


        :return: The achievement_rank of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._achievement_rank

    @achievement_rank.setter
    def achievement_rank(self, achievement_rank):
        """Sets the achievement_rank of this MilestoneRestObject.


        :param achievement_rank: The achievement_rank of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._achievement_rank = achievement_rank

    @property
    def achievement_date(self):
        """Gets the achievement_date of this MilestoneRestObject.  # noqa: E501


        :return: The achievement_date of this MilestoneRestObject.  # noqa: E501
        :rtype: date
        """
        return self._achievement_date

    @achievement_date.setter
    def achievement_date(self, achievement_date):
        """Sets the achievement_date of this MilestoneRestObject.


        :param achievement_date: The achievement_date of this MilestoneRestObject.  # noqa: E501
        :type: date
        """

        self._achievement_date = achievement_date

    @property
    def is_last_achievement_status(self):
        """Gets the is_last_achievement_status of this MilestoneRestObject.  # noqa: E501


        :return: The is_last_achievement_status of this MilestoneRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_last_achievement_status

    @is_last_achievement_status.setter
    def is_last_achievement_status(self, is_last_achievement_status):
        """Sets the is_last_achievement_status of this MilestoneRestObject.


        :param is_last_achievement_status: The is_last_achievement_status of this MilestoneRestObject.  # noqa: E501
        :type: bool
        """

        self._is_last_achievement_status = is_last_achievement_status

    @property
    def game_id(self):
        """Gets the game_id of this MilestoneRestObject.  # noqa: E501


        :return: The game_id of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this MilestoneRestObject.


        :param game_id: The game_id of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def play_id(self):
        """Gets the play_id of this MilestoneRestObject.  # noqa: E501


        :return: The play_id of this MilestoneRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this MilestoneRestObject.


        :param play_id: The play_id of this MilestoneRestObject.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def at_bat_number(self):
        """Gets the at_bat_number of this MilestoneRestObject.  # noqa: E501


        :return: The at_bat_number of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_number

    @at_bat_number.setter
    def at_bat_number(self, at_bat_number):
        """Sets the at_bat_number of this MilestoneRestObject.


        :param at_bat_number: The at_bat_number of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._at_bat_number = at_bat_number

    @property
    def pitch_number(self):
        """Gets the pitch_number of this MilestoneRestObject.  # noqa: E501


        :return: The pitch_number of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number

    @pitch_number.setter
    def pitch_number(self, pitch_number):
        """Sets the pitch_number of this MilestoneRestObject.


        :param pitch_number: The pitch_number of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._pitch_number = pitch_number

    @property
    def player(self):
        """Gets the player of this MilestoneRestObject.  # noqa: E501


        :return: The player of this MilestoneRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this MilestoneRestObject.


        :param player: The player of this MilestoneRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def team(self):
        """Gets the team of this MilestoneRestObject.  # noqa: E501


        :return: The team of this MilestoneRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this MilestoneRestObject.


        :param team: The team of this MilestoneRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def organization_id(self):
        """Gets the organization_id of this MilestoneRestObject.  # noqa: E501


        :return: The organization_id of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this MilestoneRestObject.


        :param organization_id: The organization_id of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def achievement_status(self):
        """Gets the achievement_status of this MilestoneRestObject.  # noqa: E501


        :return: The achievement_status of this MilestoneRestObject.  # noqa: E501
        :rtype: MilestoneAchievementStatusRestObject
        """
        return self._achievement_status

    @achievement_status.setter
    def achievement_status(self, achievement_status):
        """Sets the achievement_status of this MilestoneRestObject.


        :param achievement_status: The achievement_status of this MilestoneRestObject.  # noqa: E501
        :type: MilestoneAchievementStatusRestObject
        """

        self._achievement_status = achievement_status

    @property
    def milestone_rule(self):
        """Gets the milestone_rule of this MilestoneRestObject.  # noqa: E501


        :return: The milestone_rule of this MilestoneRestObject.  # noqa: E501
        :rtype: MilestoneRuleRestObject
        """
        return self._milestone_rule

    @milestone_rule.setter
    def milestone_rule(self, milestone_rule):
        """Sets the milestone_rule of this MilestoneRestObject.


        :param milestone_rule: The milestone_rule of this MilestoneRestObject.  # noqa: E501
        :type: MilestoneRuleRestObject
        """

        self._milestone_rule = milestone_rule

    @property
    def rule_count(self):
        """Gets the rule_count of this MilestoneRestObject.  # noqa: E501


        :return: The rule_count of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._rule_count

    @rule_count.setter
    def rule_count(self, rule_count):
        """Sets the rule_count of this MilestoneRestObject.


        :param rule_count: The rule_count of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._rule_count = rule_count

    @property
    def stat_difference(self):
        """Gets the stat_difference of this MilestoneRestObject.  # noqa: E501


        :return: The stat_difference of this MilestoneRestObject.  # noqa: E501
        :rtype: int
        """
        return self._stat_difference

    @stat_difference.setter
    def stat_difference(self, stat_difference):
        """Sets the stat_difference of this MilestoneRestObject.


        :param stat_difference: The stat_difference of this MilestoneRestObject.  # noqa: E501
        :type: int
        """

        self._stat_difference = stat_difference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MilestoneRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MilestoneRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
