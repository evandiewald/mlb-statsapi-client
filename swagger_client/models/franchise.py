# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Franchise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'franchise_id': 'int',
        'first_season_id': 'int',
        'last_season_id': 'int',
        'most_recent_team_id': 'int',
        'team_name': 'str',
        'location_name': 'str',
        'team_ids': 'list[int]',
        'roster': 'BaseballRoster',
        'hydrated_rosters': 'dict(str, object)',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'franchise_id': 'franchiseId',
        'first_season_id': 'firstSeasonId',
        'last_season_id': 'lastSeasonId',
        'most_recent_team_id': 'mostRecentTeamId',
        'team_name': 'teamName',
        'location_name': 'locationName',
        'team_ids': 'teamIds',
        'roster': 'roster',
        'hydrated_rosters': 'hydratedRosters',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, franchise_id=None, first_season_id=None, last_season_id=None, most_recent_team_id=None, team_name=None, location_name=None, team_ids=None, roster=None, hydrated_rosters=None, user_privileges=None):  # noqa: E501
        """Franchise - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._franchise_id = None
        self._first_season_id = None
        self._last_season_id = None
        self._most_recent_team_id = None
        self._team_name = None
        self._location_name = None
        self._team_ids = None
        self._roster = None
        self._hydrated_rosters = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if franchise_id is not None:
            self.franchise_id = franchise_id
        if first_season_id is not None:
            self.first_season_id = first_season_id
        if last_season_id is not None:
            self.last_season_id = last_season_id
        if most_recent_team_id is not None:
            self.most_recent_team_id = most_recent_team_id
        if team_name is not None:
            self.team_name = team_name
        if location_name is not None:
            self.location_name = location_name
        if team_ids is not None:
            self.team_ids = team_ids
        if roster is not None:
            self.roster = roster
        if hydrated_rosters is not None:
            self.hydrated_rosters = hydrated_rosters
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this Franchise.  # noqa: E501


        :return: The requesting_user_role of this Franchise.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this Franchise.


        :param requesting_user_role: The requesting_user_role of this Franchise.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def franchise_id(self):
        """Gets the franchise_id of this Franchise.  # noqa: E501


        :return: The franchise_id of this Franchise.  # noqa: E501
        :rtype: int
        """
        return self._franchise_id

    @franchise_id.setter
    def franchise_id(self, franchise_id):
        """Sets the franchise_id of this Franchise.


        :param franchise_id: The franchise_id of this Franchise.  # noqa: E501
        :type: int
        """

        self._franchise_id = franchise_id

    @property
    def first_season_id(self):
        """Gets the first_season_id of this Franchise.  # noqa: E501


        :return: The first_season_id of this Franchise.  # noqa: E501
        :rtype: int
        """
        return self._first_season_id

    @first_season_id.setter
    def first_season_id(self, first_season_id):
        """Sets the first_season_id of this Franchise.


        :param first_season_id: The first_season_id of this Franchise.  # noqa: E501
        :type: int
        """

        self._first_season_id = first_season_id

    @property
    def last_season_id(self):
        """Gets the last_season_id of this Franchise.  # noqa: E501


        :return: The last_season_id of this Franchise.  # noqa: E501
        :rtype: int
        """
        return self._last_season_id

    @last_season_id.setter
    def last_season_id(self, last_season_id):
        """Sets the last_season_id of this Franchise.


        :param last_season_id: The last_season_id of this Franchise.  # noqa: E501
        :type: int
        """

        self._last_season_id = last_season_id

    @property
    def most_recent_team_id(self):
        """Gets the most_recent_team_id of this Franchise.  # noqa: E501


        :return: The most_recent_team_id of this Franchise.  # noqa: E501
        :rtype: int
        """
        return self._most_recent_team_id

    @most_recent_team_id.setter
    def most_recent_team_id(self, most_recent_team_id):
        """Sets the most_recent_team_id of this Franchise.


        :param most_recent_team_id: The most_recent_team_id of this Franchise.  # noqa: E501
        :type: int
        """

        self._most_recent_team_id = most_recent_team_id

    @property
    def team_name(self):
        """Gets the team_name of this Franchise.  # noqa: E501


        :return: The team_name of this Franchise.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Franchise.


        :param team_name: The team_name of this Franchise.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def location_name(self):
        """Gets the location_name of this Franchise.  # noqa: E501


        :return: The location_name of this Franchise.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Franchise.


        :param location_name: The location_name of this Franchise.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def team_ids(self):
        """Gets the team_ids of this Franchise.  # noqa: E501


        :return: The team_ids of this Franchise.  # noqa: E501
        :rtype: list[int]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """Sets the team_ids of this Franchise.


        :param team_ids: The team_ids of this Franchise.  # noqa: E501
        :type: list[int]
        """

        self._team_ids = team_ids

    @property
    def roster(self):
        """Gets the roster of this Franchise.  # noqa: E501


        :return: The roster of this Franchise.  # noqa: E501
        :rtype: BaseballRoster
        """
        return self._roster

    @roster.setter
    def roster(self, roster):
        """Sets the roster of this Franchise.


        :param roster: The roster of this Franchise.  # noqa: E501
        :type: BaseballRoster
        """

        self._roster = roster

    @property
    def hydrated_rosters(self):
        """Gets the hydrated_rosters of this Franchise.  # noqa: E501


        :return: The hydrated_rosters of this Franchise.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._hydrated_rosters

    @hydrated_rosters.setter
    def hydrated_rosters(self, hydrated_rosters):
        """Sets the hydrated_rosters of this Franchise.


        :param hydrated_rosters: The hydrated_rosters of this Franchise.  # noqa: E501
        :type: dict(str, object)
        """

        self._hydrated_rosters = hydrated_rosters

    @property
    def user_privileges(self):
        """Gets the user_privileges of this Franchise.  # noqa: E501


        :return: The user_privileges of this Franchise.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this Franchise.


        :param user_privileges: The user_privileges of this Franchise.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Franchise, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Franchise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
