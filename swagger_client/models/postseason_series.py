# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostseasonSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort_order': 'int',
        'series_id': 'str',
        'is_default': 'bool',
        'game_type': 'GameTypeEnum',
        'series_config_id': 'str'
    }

    attribute_map = {
        'sort_order': 'sortOrder',
        'series_id': 'seriesId',
        'is_default': 'isDefault',
        'game_type': 'gameType',
        'series_config_id': 'seriesConfigId'
    }

    def __init__(self, sort_order=None, series_id=None, is_default=None, game_type=None, series_config_id=None):  # noqa: E501
        """PostseasonSeries - a model defined in Swagger"""  # noqa: E501
        self._sort_order = None
        self._series_id = None
        self._is_default = None
        self._game_type = None
        self._series_config_id = None
        self.discriminator = None
        if sort_order is not None:
            self.sort_order = sort_order
        if series_id is not None:
            self.series_id = series_id
        if is_default is not None:
            self.is_default = is_default
        if game_type is not None:
            self.game_type = game_type
        if series_config_id is not None:
            self.series_config_id = series_config_id

    @property
    def sort_order(self):
        """Gets the sort_order of this PostseasonSeries.  # noqa: E501


        :return: The sort_order of this PostseasonSeries.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this PostseasonSeries.


        :param sort_order: The sort_order of this PostseasonSeries.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def series_id(self):
        """Gets the series_id of this PostseasonSeries.  # noqa: E501


        :return: The series_id of this PostseasonSeries.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this PostseasonSeries.


        :param series_id: The series_id of this PostseasonSeries.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def is_default(self):
        """Gets the is_default of this PostseasonSeries.  # noqa: E501


        :return: The is_default of this PostseasonSeries.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PostseasonSeries.


        :param is_default: The is_default of this PostseasonSeries.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def game_type(self):
        """Gets the game_type of this PostseasonSeries.  # noqa: E501


        :return: The game_type of this PostseasonSeries.  # noqa: E501
        :rtype: GameTypeEnum
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this PostseasonSeries.


        :param game_type: The game_type of this PostseasonSeries.  # noqa: E501
        :type: GameTypeEnum
        """

        self._game_type = game_type

    @property
    def series_config_id(self):
        """Gets the series_config_id of this PostseasonSeries.  # noqa: E501


        :return: The series_config_id of this PostseasonSeries.  # noqa: E501
        :rtype: str
        """
        return self._series_config_id

    @series_config_id.setter
    def series_config_id(self, series_config_id):
        """Sets the series_config_id of this PostseasonSeries.


        :param series_config_id: The series_config_id of this PostseasonSeries.  # noqa: E501
        :type: str
        """

        self._series_config_id = series_config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostseasonSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostseasonSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
