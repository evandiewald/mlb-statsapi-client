# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DepthChart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'depth': 'int',
        'position': 'BaseballPosition',
        'status': 'DynamicLookupEnum',
        'team': 'BaseballTeam',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'depth': 'depth',
        'position': 'position',
        'status': 'status',
        'team': 'team',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, depth=None, position=None, status=None, team=None, user_privileges=None):  # noqa: E501
        """DepthChart - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._depth = None
        self._position = None
        self._status = None
        self._team = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if depth is not None:
            self.depth = depth
        if position is not None:
            self.position = position
        if status is not None:
            self.status = status
        if team is not None:
            self.team = team
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this DepthChart.  # noqa: E501


        :return: The requesting_user_role of this DepthChart.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this DepthChart.


        :param requesting_user_role: The requesting_user_role of this DepthChart.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def depth(self):
        """Gets the depth of this DepthChart.  # noqa: E501


        :return: The depth of this DepthChart.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this DepthChart.


        :param depth: The depth of this DepthChart.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def position(self):
        """Gets the position of this DepthChart.  # noqa: E501


        :return: The position of this DepthChart.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DepthChart.


        :param position: The position of this DepthChart.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def status(self):
        """Gets the status of this DepthChart.  # noqa: E501


        :return: The status of this DepthChart.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DepthChart.


        :param status: The status of this DepthChart.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._status = status

    @property
    def team(self):
        """Gets the team of this DepthChart.  # noqa: E501


        :return: The team of this DepthChart.  # noqa: E501
        :rtype: BaseballTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this DepthChart.


        :param team: The team of this DepthChart.  # noqa: E501
        :type: BaseballTeam
        """

        self._team = team

    @property
    def user_privileges(self):
        """Gets the user_privileges of this DepthChart.  # noqa: E501


        :return: The user_privileges of this DepthChart.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this DepthChart.


        :param user_privileges: The user_privileges of this DepthChart.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepthChart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepthChart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
