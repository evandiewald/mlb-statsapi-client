# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricWarningRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'actionable': 'bool',
        'content': 'str',
        'type': 'str',
        'play_time': 'int',
        'operation_type': 'str',
        'level': 'str',
        'type_id': 'str',
        'value': 'str',
        'id': 'str',
        'time': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'actionable': 'actionable',
        'content': 'content',
        'type': 'type',
        'play_time': 'playTime',
        'operation_type': 'operationType',
        'level': 'level',
        'type_id': 'typeId',
        'value': 'value',
        'id': 'id',
        'time': 'time'
    }

    def __init__(self, copyright=None, actionable=None, content=None, type=None, play_time=None, operation_type=None, level=None, type_id=None, value=None, id=None, time=None):  # noqa: E501
        """MetricWarningRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._actionable = None
        self._content = None
        self._type = None
        self._play_time = None
        self._operation_type = None
        self._level = None
        self._type_id = None
        self._value = None
        self._id = None
        self._time = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if actionable is not None:
            self.actionable = actionable
        if content is not None:
            self.content = content
        if type is not None:
            self.type = type
        if play_time is not None:
            self.play_time = play_time
        if operation_type is not None:
            self.operation_type = operation_type
        if level is not None:
            self.level = level
        if type_id is not None:
            self.type_id = type_id
        if value is not None:
            self.value = value
        if id is not None:
            self.id = id
        if time is not None:
            self.time = time

    @property
    def copyright(self):
        """Gets the copyright of this MetricWarningRestObject.  # noqa: E501


        :return: The copyright of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this MetricWarningRestObject.


        :param copyright: The copyright of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def actionable(self):
        """Gets the actionable of this MetricWarningRestObject.  # noqa: E501


        :return: The actionable of this MetricWarningRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._actionable

    @actionable.setter
    def actionable(self, actionable):
        """Sets the actionable of this MetricWarningRestObject.


        :param actionable: The actionable of this MetricWarningRestObject.  # noqa: E501
        :type: bool
        """

        self._actionable = actionable

    @property
    def content(self):
        """Gets the content of this MetricWarningRestObject.  # noqa: E501


        :return: The content of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MetricWarningRestObject.


        :param content: The content of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def type(self):
        """Gets the type of this MetricWarningRestObject.  # noqa: E501


        :return: The type of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricWarningRestObject.


        :param type: The type of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def play_time(self):
        """Gets the play_time of this MetricWarningRestObject.  # noqa: E501


        :return: The play_time of this MetricWarningRestObject.  # noqa: E501
        :rtype: int
        """
        return self._play_time

    @play_time.setter
    def play_time(self, play_time):
        """Sets the play_time of this MetricWarningRestObject.


        :param play_time: The play_time of this MetricWarningRestObject.  # noqa: E501
        :type: int
        """

        self._play_time = play_time

    @property
    def operation_type(self):
        """Gets the operation_type of this MetricWarningRestObject.  # noqa: E501


        :return: The operation_type of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this MetricWarningRestObject.


        :param operation_type: The operation_type of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def level(self):
        """Gets the level of this MetricWarningRestObject.  # noqa: E501


        :return: The level of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this MetricWarningRestObject.


        :param level: The level of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def type_id(self):
        """Gets the type_id of this MetricWarningRestObject.  # noqa: E501


        :return: The type_id of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this MetricWarningRestObject.


        :param type_id: The type_id of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def value(self):
        """Gets the value of this MetricWarningRestObject.  # noqa: E501


        :return: The value of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricWarningRestObject.


        :param value: The value of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def id(self):
        """Gets the id of this MetricWarningRestObject.  # noqa: E501


        :return: The id of this MetricWarningRestObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricWarningRestObject.


        :param id: The id of this MetricWarningRestObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this MetricWarningRestObject.  # noqa: E501


        :return: The time of this MetricWarningRestObject.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MetricWarningRestObject.


        :param time: The time of this MetricWarningRestObject.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricWarningRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricWarningRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
