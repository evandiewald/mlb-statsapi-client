# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomeRunDerbyStatusRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'regulation_round_lenth': 'str',
        'state': 'str',
        'current_round': 'int',
        'current_round_in_progress': 'bool',
        'current_round_time_left': 'str',
        'scheduled_rounds': 'int',
        'in_tie_breaker': 'bool',
        'tie_breaker_num': 'int',
        'current_batter': 'BaseballPersonRestObject',
        'clock_stopped': 'bool',
        'bonus_time': 'bool',
        'regulation_round_length': 'str',
        'bonus_distance_needed_per_round': 'int',
        'bonus_count_needed_per_round': 'int',
        'pitches_in_round': 'int',
        'pitches_remaining': 'int',
        'bonus_outs_current': 'int',
        'bonus_outs_total': 'int',
        'bonus_type_outs': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'regulation_round_lenth': 'regulationRoundLenth',
        'state': 'state',
        'current_round': 'currentRound',
        'current_round_in_progress': 'currentRoundInProgress',
        'current_round_time_left': 'currentRoundTimeLeft',
        'scheduled_rounds': 'scheduledRounds',
        'in_tie_breaker': 'inTieBreaker',
        'tie_breaker_num': 'tieBreakerNum',
        'current_batter': 'currentBatter',
        'clock_stopped': 'clockStopped',
        'bonus_time': 'bonusTime',
        'regulation_round_length': 'regulationRoundLength',
        'bonus_distance_needed_per_round': 'bonusDistanceNeededPerRound',
        'bonus_count_needed_per_round': 'bonusCountNeededPerRound',
        'pitches_in_round': 'pitchesInRound',
        'pitches_remaining': 'pitchesRemaining',
        'bonus_outs_current': 'bonusOutsCurrent',
        'bonus_outs_total': 'bonusOutsTotal',
        'bonus_type_outs': 'bonusTypeOuts'
    }

    def __init__(self, copyright=None, regulation_round_lenth=None, state=None, current_round=None, current_round_in_progress=None, current_round_time_left=None, scheduled_rounds=None, in_tie_breaker=None, tie_breaker_num=None, current_batter=None, clock_stopped=None, bonus_time=None, regulation_round_length=None, bonus_distance_needed_per_round=None, bonus_count_needed_per_round=None, pitches_in_round=None, pitches_remaining=None, bonus_outs_current=None, bonus_outs_total=None, bonus_type_outs=None):  # noqa: E501
        """HomeRunDerbyStatusRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._regulation_round_lenth = None
        self._state = None
        self._current_round = None
        self._current_round_in_progress = None
        self._current_round_time_left = None
        self._scheduled_rounds = None
        self._in_tie_breaker = None
        self._tie_breaker_num = None
        self._current_batter = None
        self._clock_stopped = None
        self._bonus_time = None
        self._regulation_round_length = None
        self._bonus_distance_needed_per_round = None
        self._bonus_count_needed_per_round = None
        self._pitches_in_round = None
        self._pitches_remaining = None
        self._bonus_outs_current = None
        self._bonus_outs_total = None
        self._bonus_type_outs = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if regulation_round_lenth is not None:
            self.regulation_round_lenth = regulation_round_lenth
        if state is not None:
            self.state = state
        if current_round is not None:
            self.current_round = current_round
        if current_round_in_progress is not None:
            self.current_round_in_progress = current_round_in_progress
        if current_round_time_left is not None:
            self.current_round_time_left = current_round_time_left
        if scheduled_rounds is not None:
            self.scheduled_rounds = scheduled_rounds
        if in_tie_breaker is not None:
            self.in_tie_breaker = in_tie_breaker
        if tie_breaker_num is not None:
            self.tie_breaker_num = tie_breaker_num
        if current_batter is not None:
            self.current_batter = current_batter
        if clock_stopped is not None:
            self.clock_stopped = clock_stopped
        if bonus_time is not None:
            self.bonus_time = bonus_time
        if regulation_round_length is not None:
            self.regulation_round_length = regulation_round_length
        if bonus_distance_needed_per_round is not None:
            self.bonus_distance_needed_per_round = bonus_distance_needed_per_round
        if bonus_count_needed_per_round is not None:
            self.bonus_count_needed_per_round = bonus_count_needed_per_round
        if pitches_in_round is not None:
            self.pitches_in_round = pitches_in_round
        if pitches_remaining is not None:
            self.pitches_remaining = pitches_remaining
        if bonus_outs_current is not None:
            self.bonus_outs_current = bonus_outs_current
        if bonus_outs_total is not None:
            self.bonus_outs_total = bonus_outs_total
        if bonus_type_outs is not None:
            self.bonus_type_outs = bonus_type_outs

    @property
    def copyright(self):
        """Gets the copyright of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The copyright of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this HomeRunDerbyStatusRestObject.


        :param copyright: The copyright of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def regulation_round_lenth(self):
        """Gets the regulation_round_lenth of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The regulation_round_lenth of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._regulation_round_lenth

    @regulation_round_lenth.setter
    def regulation_round_lenth(self, regulation_round_lenth):
        """Sets the regulation_round_lenth of this HomeRunDerbyStatusRestObject.


        :param regulation_round_lenth: The regulation_round_lenth of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: str
        """

        self._regulation_round_lenth = regulation_round_lenth

    @property
    def state(self):
        """Gets the state of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The state of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HomeRunDerbyStatusRestObject.


        :param state: The state of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def current_round(self):
        """Gets the current_round of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The current_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._current_round

    @current_round.setter
    def current_round(self, current_round):
        """Sets the current_round of this HomeRunDerbyStatusRestObject.


        :param current_round: The current_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._current_round = current_round

    @property
    def current_round_in_progress(self):
        """Gets the current_round_in_progress of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The current_round_in_progress of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._current_round_in_progress

    @current_round_in_progress.setter
    def current_round_in_progress(self, current_round_in_progress):
        """Sets the current_round_in_progress of this HomeRunDerbyStatusRestObject.


        :param current_round_in_progress: The current_round_in_progress of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: bool
        """

        self._current_round_in_progress = current_round_in_progress

    @property
    def current_round_time_left(self):
        """Gets the current_round_time_left of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The current_round_time_left of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._current_round_time_left

    @current_round_time_left.setter
    def current_round_time_left(self, current_round_time_left):
        """Sets the current_round_time_left of this HomeRunDerbyStatusRestObject.


        :param current_round_time_left: The current_round_time_left of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: str
        """

        self._current_round_time_left = current_round_time_left

    @property
    def scheduled_rounds(self):
        """Gets the scheduled_rounds of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The scheduled_rounds of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_rounds

    @scheduled_rounds.setter
    def scheduled_rounds(self, scheduled_rounds):
        """Sets the scheduled_rounds of this HomeRunDerbyStatusRestObject.


        :param scheduled_rounds: The scheduled_rounds of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._scheduled_rounds = scheduled_rounds

    @property
    def in_tie_breaker(self):
        """Gets the in_tie_breaker of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The in_tie_breaker of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._in_tie_breaker

    @in_tie_breaker.setter
    def in_tie_breaker(self, in_tie_breaker):
        """Sets the in_tie_breaker of this HomeRunDerbyStatusRestObject.


        :param in_tie_breaker: The in_tie_breaker of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: bool
        """

        self._in_tie_breaker = in_tie_breaker

    @property
    def tie_breaker_num(self):
        """Gets the tie_breaker_num of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The tie_breaker_num of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._tie_breaker_num

    @tie_breaker_num.setter
    def tie_breaker_num(self, tie_breaker_num):
        """Sets the tie_breaker_num of this HomeRunDerbyStatusRestObject.


        :param tie_breaker_num: The tie_breaker_num of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._tie_breaker_num = tie_breaker_num

    @property
    def current_batter(self):
        """Gets the current_batter of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The current_batter of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._current_batter

    @current_batter.setter
    def current_batter(self, current_batter):
        """Sets the current_batter of this HomeRunDerbyStatusRestObject.


        :param current_batter: The current_batter of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._current_batter = current_batter

    @property
    def clock_stopped(self):
        """Gets the clock_stopped of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The clock_stopped of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._clock_stopped

    @clock_stopped.setter
    def clock_stopped(self, clock_stopped):
        """Sets the clock_stopped of this HomeRunDerbyStatusRestObject.


        :param clock_stopped: The clock_stopped of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: bool
        """

        self._clock_stopped = clock_stopped

    @property
    def bonus_time(self):
        """Gets the bonus_time of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_time of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._bonus_time

    @bonus_time.setter
    def bonus_time(self, bonus_time):
        """Sets the bonus_time of this HomeRunDerbyStatusRestObject.


        :param bonus_time: The bonus_time of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: bool
        """

        self._bonus_time = bonus_time

    @property
    def regulation_round_length(self):
        """Gets the regulation_round_length of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The regulation_round_length of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: str
        """
        return self._regulation_round_length

    @regulation_round_length.setter
    def regulation_round_length(self, regulation_round_length):
        """Sets the regulation_round_length of this HomeRunDerbyStatusRestObject.


        :param regulation_round_length: The regulation_round_length of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: str
        """

        self._regulation_round_length = regulation_round_length

    @property
    def bonus_distance_needed_per_round(self):
        """Gets the bonus_distance_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_distance_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_distance_needed_per_round

    @bonus_distance_needed_per_round.setter
    def bonus_distance_needed_per_round(self, bonus_distance_needed_per_round):
        """Sets the bonus_distance_needed_per_round of this HomeRunDerbyStatusRestObject.


        :param bonus_distance_needed_per_round: The bonus_distance_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_distance_needed_per_round = bonus_distance_needed_per_round

    @property
    def bonus_count_needed_per_round(self):
        """Gets the bonus_count_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_count_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_count_needed_per_round

    @bonus_count_needed_per_round.setter
    def bonus_count_needed_per_round(self, bonus_count_needed_per_round):
        """Sets the bonus_count_needed_per_round of this HomeRunDerbyStatusRestObject.


        :param bonus_count_needed_per_round: The bonus_count_needed_per_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_count_needed_per_round = bonus_count_needed_per_round

    @property
    def pitches_in_round(self):
        """Gets the pitches_in_round of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The pitches_in_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pitches_in_round

    @pitches_in_round.setter
    def pitches_in_round(self, pitches_in_round):
        """Sets the pitches_in_round of this HomeRunDerbyStatusRestObject.


        :param pitches_in_round: The pitches_in_round of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._pitches_in_round = pitches_in_round

    @property
    def pitches_remaining(self):
        """Gets the pitches_remaining of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The pitches_remaining of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._pitches_remaining

    @pitches_remaining.setter
    def pitches_remaining(self, pitches_remaining):
        """Sets the pitches_remaining of this HomeRunDerbyStatusRestObject.


        :param pitches_remaining: The pitches_remaining of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._pitches_remaining = pitches_remaining

    @property
    def bonus_outs_current(self):
        """Gets the bonus_outs_current of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_outs_current of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_outs_current

    @bonus_outs_current.setter
    def bonus_outs_current(self, bonus_outs_current):
        """Sets the bonus_outs_current of this HomeRunDerbyStatusRestObject.


        :param bonus_outs_current: The bonus_outs_current of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_outs_current = bonus_outs_current

    @property
    def bonus_outs_total(self):
        """Gets the bonus_outs_total of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_outs_total of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: int
        """
        return self._bonus_outs_total

    @bonus_outs_total.setter
    def bonus_outs_total(self, bonus_outs_total):
        """Sets the bonus_outs_total of this HomeRunDerbyStatusRestObject.


        :param bonus_outs_total: The bonus_outs_total of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: int
        """

        self._bonus_outs_total = bonus_outs_total

    @property
    def bonus_type_outs(self):
        """Gets the bonus_type_outs of this HomeRunDerbyStatusRestObject.  # noqa: E501


        :return: The bonus_type_outs of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._bonus_type_outs

    @bonus_type_outs.setter
    def bonus_type_outs(self, bonus_type_outs):
        """Sets the bonus_type_outs of this HomeRunDerbyStatusRestObject.


        :param bonus_type_outs: The bonus_type_outs of this HomeRunDerbyStatusRestObject.  # noqa: E501
        :type: bool
        """

        self._bonus_type_outs = bonus_type_outs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeRunDerbyStatusRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeRunDerbyStatusRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
