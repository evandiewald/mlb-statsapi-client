# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AwardRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hydrations': 'list[str]',
        'id': 'str',
        'name': 'str',
        'short_name': 'str',
        'description': 'str',
        'recipient_type': 'str',
        'history': 'str',
        'image_url': 'str',
        'home_page_url': 'str',
        '_date': 'date',
        'season': 'str',
        'results': 'list[AwardResultRestObject]',
        'team': 'BaseballTeamRestObject',
        'sort_order': 'int',
        'player': 'BaseballPersonRestObject',
        'votes': 'int',
        'votes_available': 'int',
        'sport': 'SportRestObject',
        'league': 'LeagueRestObject',
        'notes': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hydrations': 'hydrations',
        'id': 'id',
        'name': 'name',
        'short_name': 'shortName',
        'description': 'description',
        'recipient_type': 'recipientType',
        'history': 'history',
        'image_url': 'imageUrl',
        'home_page_url': 'homePageUrl',
        '_date': 'date',
        'season': 'season',
        'results': 'results',
        'team': 'team',
        'sort_order': 'sortOrder',
        'player': 'player',
        'votes': 'votes',
        'votes_available': 'votesAvailable',
        'sport': 'sport',
        'league': 'league',
        'notes': 'notes'
    }

    def __init__(self, copyright=None, hydrations=None, id=None, name=None, short_name=None, description=None, recipient_type=None, history=None, image_url=None, home_page_url=None, _date=None, season=None, results=None, team=None, sort_order=None, player=None, votes=None, votes_available=None, sport=None, league=None, notes=None):  # noqa: E501
        """AwardRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hydrations = None
        self._id = None
        self._name = None
        self._short_name = None
        self._description = None
        self._recipient_type = None
        self._history = None
        self._image_url = None
        self._home_page_url = None
        self.__date = None
        self._season = None
        self._results = None
        self._team = None
        self._sort_order = None
        self._player = None
        self._votes = None
        self._votes_available = None
        self._sport = None
        self._league = None
        self._notes = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hydrations is not None:
            self.hydrations = hydrations
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if short_name is not None:
            self.short_name = short_name
        if description is not None:
            self.description = description
        if recipient_type is not None:
            self.recipient_type = recipient_type
        if history is not None:
            self.history = history
        if image_url is not None:
            self.image_url = image_url
        if home_page_url is not None:
            self.home_page_url = home_page_url
        if _date is not None:
            self._date = _date
        if season is not None:
            self.season = season
        if results is not None:
            self.results = results
        if team is not None:
            self.team = team
        if sort_order is not None:
            self.sort_order = sort_order
        if player is not None:
            self.player = player
        if votes is not None:
            self.votes = votes
        if votes_available is not None:
            self.votes_available = votes_available
        if sport is not None:
            self.sport = sport
        if league is not None:
            self.league = league
        if notes is not None:
            self.notes = notes

    @property
    def copyright(self):
        """Gets the copyright of this AwardRestObject.  # noqa: E501


        :return: The copyright of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this AwardRestObject.


        :param copyright: The copyright of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hydrations(self):
        """Gets the hydrations of this AwardRestObject.  # noqa: E501


        :return: The hydrations of this AwardRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """Sets the hydrations of this AwardRestObject.


        :param hydrations: The hydrations of this AwardRestObject.  # noqa: E501
        :type: list[str]
        """

        self._hydrations = hydrations

    @property
    def id(self):
        """Gets the id of this AwardRestObject.  # noqa: E501


        :return: The id of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AwardRestObject.


        :param id: The id of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AwardRestObject.  # noqa: E501


        :return: The name of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwardRestObject.


        :param name: The name of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this AwardRestObject.  # noqa: E501


        :return: The short_name of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AwardRestObject.


        :param short_name: The short_name of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def description(self):
        """Gets the description of this AwardRestObject.  # noqa: E501


        :return: The description of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AwardRestObject.


        :param description: The description of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def recipient_type(self):
        """Gets the recipient_type of this AwardRestObject.  # noqa: E501


        :return: The recipient_type of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """Sets the recipient_type of this AwardRestObject.


        :param recipient_type: The recipient_type of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._recipient_type = recipient_type

    @property
    def history(self):
        """Gets the history of this AwardRestObject.  # noqa: E501


        :return: The history of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this AwardRestObject.


        :param history: The history of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._history = history

    @property
    def image_url(self):
        """Gets the image_url of this AwardRestObject.  # noqa: E501


        :return: The image_url of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AwardRestObject.


        :param image_url: The image_url of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def home_page_url(self):
        """Gets the home_page_url of this AwardRestObject.  # noqa: E501


        :return: The home_page_url of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._home_page_url

    @home_page_url.setter
    def home_page_url(self, home_page_url):
        """Sets the home_page_url of this AwardRestObject.


        :param home_page_url: The home_page_url of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._home_page_url = home_page_url

    @property
    def _date(self):
        """Gets the _date of this AwardRestObject.  # noqa: E501


        :return: The _date of this AwardRestObject.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AwardRestObject.


        :param _date: The _date of this AwardRestObject.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def season(self):
        """Gets the season of this AwardRestObject.  # noqa: E501


        :return: The season of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this AwardRestObject.


        :param season: The season of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def results(self):
        """Gets the results of this AwardRestObject.  # noqa: E501


        :return: The results of this AwardRestObject.  # noqa: E501
        :rtype: list[AwardResultRestObject]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AwardRestObject.


        :param results: The results of this AwardRestObject.  # noqa: E501
        :type: list[AwardResultRestObject]
        """

        self._results = results

    @property
    def team(self):
        """Gets the team of this AwardRestObject.  # noqa: E501


        :return: The team of this AwardRestObject.  # noqa: E501
        :rtype: BaseballTeamRestObject
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AwardRestObject.


        :param team: The team of this AwardRestObject.  # noqa: E501
        :type: BaseballTeamRestObject
        """

        self._team = team

    @property
    def sort_order(self):
        """Gets the sort_order of this AwardRestObject.  # noqa: E501


        :return: The sort_order of this AwardRestObject.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AwardRestObject.


        :param sort_order: The sort_order of this AwardRestObject.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def player(self):
        """Gets the player of this AwardRestObject.  # noqa: E501


        :return: The player of this AwardRestObject.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this AwardRestObject.


        :param player: The player of this AwardRestObject.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._player = player

    @property
    def votes(self):
        """Gets the votes of this AwardRestObject.  # noqa: E501


        :return: The votes of this AwardRestObject.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this AwardRestObject.


        :param votes: The votes of this AwardRestObject.  # noqa: E501
        :type: int
        """

        self._votes = votes

    @property
    def votes_available(self):
        """Gets the votes_available of this AwardRestObject.  # noqa: E501


        :return: The votes_available of this AwardRestObject.  # noqa: E501
        :rtype: int
        """
        return self._votes_available

    @votes_available.setter
    def votes_available(self, votes_available):
        """Sets the votes_available of this AwardRestObject.


        :param votes_available: The votes_available of this AwardRestObject.  # noqa: E501
        :type: int
        """

        self._votes_available = votes_available

    @property
    def sport(self):
        """Gets the sport of this AwardRestObject.  # noqa: E501


        :return: The sport of this AwardRestObject.  # noqa: E501
        :rtype: SportRestObject
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this AwardRestObject.


        :param sport: The sport of this AwardRestObject.  # noqa: E501
        :type: SportRestObject
        """

        self._sport = sport

    @property
    def league(self):
        """Gets the league of this AwardRestObject.  # noqa: E501


        :return: The league of this AwardRestObject.  # noqa: E501
        :rtype: LeagueRestObject
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this AwardRestObject.


        :param league: The league of this AwardRestObject.  # noqa: E501
        :type: LeagueRestObject
        """

        self._league = league

    @property
    def notes(self):
        """Gets the notes of this AwardRestObject.  # noqa: E501


        :return: The notes of this AwardRestObject.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AwardRestObject.


        :param notes: The notes of this AwardRestObject.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwardRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwardRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
