# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SacFlyProbability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inner_distance': 'int',
        'outer_distance': 'int',
        'fielder': 'BaseballPersonRestObject'
    }

    attribute_map = {
        'inner_distance': 'innerDistance',
        'outer_distance': 'outerDistance',
        'fielder': 'fielder'
    }

    def __init__(self, inner_distance=None, outer_distance=None, fielder=None):  # noqa: E501
        """SacFlyProbability - a model defined in Swagger"""  # noqa: E501
        self._inner_distance = None
        self._outer_distance = None
        self._fielder = None
        self.discriminator = None
        if inner_distance is not None:
            self.inner_distance = inner_distance
        if outer_distance is not None:
            self.outer_distance = outer_distance
        if fielder is not None:
            self.fielder = fielder

    @property
    def inner_distance(self):
        """Gets the inner_distance of this SacFlyProbability.  # noqa: E501


        :return: The inner_distance of this SacFlyProbability.  # noqa: E501
        :rtype: int
        """
        return self._inner_distance

    @inner_distance.setter
    def inner_distance(self, inner_distance):
        """Sets the inner_distance of this SacFlyProbability.


        :param inner_distance: The inner_distance of this SacFlyProbability.  # noqa: E501
        :type: int
        """

        self._inner_distance = inner_distance

    @property
    def outer_distance(self):
        """Gets the outer_distance of this SacFlyProbability.  # noqa: E501


        :return: The outer_distance of this SacFlyProbability.  # noqa: E501
        :rtype: int
        """
        return self._outer_distance

    @outer_distance.setter
    def outer_distance(self, outer_distance):
        """Sets the outer_distance of this SacFlyProbability.


        :param outer_distance: The outer_distance of this SacFlyProbability.  # noqa: E501
        :type: int
        """

        self._outer_distance = outer_distance

    @property
    def fielder(self):
        """Gets the fielder of this SacFlyProbability.  # noqa: E501


        :return: The fielder of this SacFlyProbability.  # noqa: E501
        :rtype: BaseballPersonRestObject
        """
        return self._fielder

    @fielder.setter
    def fielder(self, fielder):
        """Sets the fielder of this SacFlyProbability.


        :param fielder: The fielder of this SacFlyProbability.  # noqa: E501
        :type: BaseballPersonRestObject
        """

        self._fielder = fielder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SacFlyProbability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SacFlyProbability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
