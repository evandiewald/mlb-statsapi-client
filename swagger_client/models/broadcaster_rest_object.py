# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BroadcasterRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'language': 'str',
        'copyright': 'str',
        'is_national': 'bool',
        'call_sign': 'str',
        'availability': 'BroadcastAvailabilityRestObject',
        'active_status': 'bool',
        'mvpd_auth_required': 'bool',
        'source_comment': 'str',
        'team_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'language': 'language',
        'copyright': 'copyright',
        'is_national': 'isNational',
        'call_sign': 'callSign',
        'availability': 'availability',
        'active_status': 'activeStatus',
        'mvpd_auth_required': 'mvpdAuthRequired',
        'source_comment': 'sourceComment',
        'team_id': 'teamId'
    }

    def __init__(self, id=None, name=None, type=None, language=None, copyright=None, is_national=None, call_sign=None, availability=None, active_status=None, mvpd_auth_required=None, source_comment=None, team_id=None):  # noqa: E501
        """BroadcasterRestObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._language = None
        self._copyright = None
        self._is_national = None
        self._call_sign = None
        self._availability = None
        self._active_status = None
        self._mvpd_auth_required = None
        self._source_comment = None
        self._team_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if language is not None:
            self.language = language
        if copyright is not None:
            self.copyright = copyright
        if is_national is not None:
            self.is_national = is_national
        if call_sign is not None:
            self.call_sign = call_sign
        if availability is not None:
            self.availability = availability
        if active_status is not None:
            self.active_status = active_status
        if mvpd_auth_required is not None:
            self.mvpd_auth_required = mvpd_auth_required
        if source_comment is not None:
            self.source_comment = source_comment
        if team_id is not None:
            self.team_id = team_id

    @property
    def id(self):
        """Gets the id of this BroadcasterRestObject.  # noqa: E501


        :return: The id of this BroadcasterRestObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BroadcasterRestObject.


        :param id: The id of this BroadcasterRestObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BroadcasterRestObject.  # noqa: E501


        :return: The name of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BroadcasterRestObject.


        :param name: The name of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BroadcasterRestObject.  # noqa: E501


        :return: The type of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BroadcasterRestObject.


        :param type: The type of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def language(self):
        """Gets the language of this BroadcasterRestObject.  # noqa: E501


        :return: The language of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BroadcasterRestObject.


        :param language: The language of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def copyright(self):
        """Gets the copyright of this BroadcasterRestObject.  # noqa: E501


        :return: The copyright of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BroadcasterRestObject.


        :param copyright: The copyright of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def is_national(self):
        """Gets the is_national of this BroadcasterRestObject.  # noqa: E501


        :return: The is_national of this BroadcasterRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_national

    @is_national.setter
    def is_national(self, is_national):
        """Sets the is_national of this BroadcasterRestObject.


        :param is_national: The is_national of this BroadcasterRestObject.  # noqa: E501
        :type: bool
        """

        self._is_national = is_national

    @property
    def call_sign(self):
        """Gets the call_sign of this BroadcasterRestObject.  # noqa: E501


        :return: The call_sign of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._call_sign

    @call_sign.setter
    def call_sign(self, call_sign):
        """Sets the call_sign of this BroadcasterRestObject.


        :param call_sign: The call_sign of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._call_sign = call_sign

    @property
    def availability(self):
        """Gets the availability of this BroadcasterRestObject.  # noqa: E501


        :return: The availability of this BroadcasterRestObject.  # noqa: E501
        :rtype: BroadcastAvailabilityRestObject
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this BroadcasterRestObject.


        :param availability: The availability of this BroadcasterRestObject.  # noqa: E501
        :type: BroadcastAvailabilityRestObject
        """

        self._availability = availability

    @property
    def active_status(self):
        """Gets the active_status of this BroadcasterRestObject.  # noqa: E501


        :return: The active_status of this BroadcasterRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._active_status

    @active_status.setter
    def active_status(self, active_status):
        """Sets the active_status of this BroadcasterRestObject.


        :param active_status: The active_status of this BroadcasterRestObject.  # noqa: E501
        :type: bool
        """

        self._active_status = active_status

    @property
    def mvpd_auth_required(self):
        """Gets the mvpd_auth_required of this BroadcasterRestObject.  # noqa: E501


        :return: The mvpd_auth_required of this BroadcasterRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._mvpd_auth_required

    @mvpd_auth_required.setter
    def mvpd_auth_required(self, mvpd_auth_required):
        """Sets the mvpd_auth_required of this BroadcasterRestObject.


        :param mvpd_auth_required: The mvpd_auth_required of this BroadcasterRestObject.  # noqa: E501
        :type: bool
        """

        self._mvpd_auth_required = mvpd_auth_required

    @property
    def source_comment(self):
        """Gets the source_comment of this BroadcasterRestObject.  # noqa: E501


        :return: The source_comment of this BroadcasterRestObject.  # noqa: E501
        :rtype: str
        """
        return self._source_comment

    @source_comment.setter
    def source_comment(self, source_comment):
        """Sets the source_comment of this BroadcasterRestObject.


        :param source_comment: The source_comment of this BroadcasterRestObject.  # noqa: E501
        :type: str
        """

        self._source_comment = source_comment

    @property
    def team_id(self):
        """Gets the team_id of this BroadcasterRestObject.  # noqa: E501


        :return: The team_id of this BroadcasterRestObject.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this BroadcasterRestObject.


        :param team_id: The team_id of this BroadcasterRestObject.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BroadcasterRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BroadcasterRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
