# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballGameLiveDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'plays': 'BaseballPlayByPlayRestObject',
        'linescore': 'BaseballLinescoreRestObject',
        'boxscore': 'BaseballBoxscoreRestObject',
        'decisions': 'BaseballDecisionRestObject',
        'leaders': 'BaseballGameLeadersRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'plays': 'plays',
        'linescore': 'linescore',
        'boxscore': 'boxscore',
        'decisions': 'decisions',
        'leaders': 'leaders'
    }

    def __init__(self, copyright=None, plays=None, linescore=None, boxscore=None, decisions=None, leaders=None):  # noqa: E501
        """BaseballGameLiveDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._plays = None
        self._linescore = None
        self._boxscore = None
        self._decisions = None
        self._leaders = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if plays is not None:
            self.plays = plays
        if linescore is not None:
            self.linescore = linescore
        if boxscore is not None:
            self.boxscore = boxscore
        if decisions is not None:
            self.decisions = decisions
        if leaders is not None:
            self.leaders = leaders

    @property
    def copyright(self):
        """Gets the copyright of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The copyright of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballGameLiveDataRestObject.


        :param copyright: The copyright of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def plays(self):
        """Gets the plays of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The plays of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: BaseballPlayByPlayRestObject
        """
        return self._plays

    @plays.setter
    def plays(self, plays):
        """Sets the plays of this BaseballGameLiveDataRestObject.


        :param plays: The plays of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: BaseballPlayByPlayRestObject
        """

        self._plays = plays

    @property
    def linescore(self):
        """Gets the linescore of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The linescore of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: BaseballLinescoreRestObject
        """
        return self._linescore

    @linescore.setter
    def linescore(self, linescore):
        """Sets the linescore of this BaseballGameLiveDataRestObject.


        :param linescore: The linescore of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: BaseballLinescoreRestObject
        """

        self._linescore = linescore

    @property
    def boxscore(self):
        """Gets the boxscore of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The boxscore of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: BaseballBoxscoreRestObject
        """
        return self._boxscore

    @boxscore.setter
    def boxscore(self, boxscore):
        """Sets the boxscore of this BaseballGameLiveDataRestObject.


        :param boxscore: The boxscore of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: BaseballBoxscoreRestObject
        """

        self._boxscore = boxscore

    @property
    def decisions(self):
        """Gets the decisions of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The decisions of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: BaseballDecisionRestObject
        """
        return self._decisions

    @decisions.setter
    def decisions(self, decisions):
        """Sets the decisions of this BaseballGameLiveDataRestObject.


        :param decisions: The decisions of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: BaseballDecisionRestObject
        """

        self._decisions = decisions

    @property
    def leaders(self):
        """Gets the leaders of this BaseballGameLiveDataRestObject.  # noqa: E501


        :return: The leaders of this BaseballGameLiveDataRestObject.  # noqa: E501
        :rtype: BaseballGameLeadersRestObject
        """
        return self._leaders

    @leaders.setter
    def leaders(self, leaders):
        """Sets the leaders of this BaseballGameLiveDataRestObject.


        :param leaders: The leaders of this BaseballGameLiveDataRestObject.  # noqa: E501
        :type: BaseballGameLeadersRestObject
        """

        self._leaders = leaders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballGameLiveDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballGameLiveDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
