# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_stats': 'list[StatContainer]',
        'batting_stats': 'BattingData',
        'pitching_stats': 'PitchingData',
        'fielding_stats': 'FieldingData',
        'game_stats': 'GameStatData',
        'team_stats': 'TeamStatData'
    }

    attribute_map = {
        'all_stats': 'allStats',
        'batting_stats': 'battingStats',
        'pitching_stats': 'pitchingStats',
        'fielding_stats': 'fieldingStats',
        'game_stats': 'gameStats',
        'team_stats': 'teamStats'
    }

    def __init__(self, all_stats=None, batting_stats=None, pitching_stats=None, fielding_stats=None, game_stats=None, team_stats=None):  # noqa: E501
        """BaseballStats - a model defined in Swagger"""  # noqa: E501
        self._all_stats = None
        self._batting_stats = None
        self._pitching_stats = None
        self._fielding_stats = None
        self._game_stats = None
        self._team_stats = None
        self.discriminator = None
        if all_stats is not None:
            self.all_stats = all_stats
        if batting_stats is not None:
            self.batting_stats = batting_stats
        if pitching_stats is not None:
            self.pitching_stats = pitching_stats
        if fielding_stats is not None:
            self.fielding_stats = fielding_stats
        if game_stats is not None:
            self.game_stats = game_stats
        if team_stats is not None:
            self.team_stats = team_stats

    @property
    def all_stats(self):
        """Gets the all_stats of this BaseballStats.  # noqa: E501


        :return: The all_stats of this BaseballStats.  # noqa: E501
        :rtype: list[StatContainer]
        """
        return self._all_stats

    @all_stats.setter
    def all_stats(self, all_stats):
        """Sets the all_stats of this BaseballStats.


        :param all_stats: The all_stats of this BaseballStats.  # noqa: E501
        :type: list[StatContainer]
        """

        self._all_stats = all_stats

    @property
    def batting_stats(self):
        """Gets the batting_stats of this BaseballStats.  # noqa: E501


        :return: The batting_stats of this BaseballStats.  # noqa: E501
        :rtype: BattingData
        """
        return self._batting_stats

    @batting_stats.setter
    def batting_stats(self, batting_stats):
        """Sets the batting_stats of this BaseballStats.


        :param batting_stats: The batting_stats of this BaseballStats.  # noqa: E501
        :type: BattingData
        """

        self._batting_stats = batting_stats

    @property
    def pitching_stats(self):
        """Gets the pitching_stats of this BaseballStats.  # noqa: E501


        :return: The pitching_stats of this BaseballStats.  # noqa: E501
        :rtype: PitchingData
        """
        return self._pitching_stats

    @pitching_stats.setter
    def pitching_stats(self, pitching_stats):
        """Sets the pitching_stats of this BaseballStats.


        :param pitching_stats: The pitching_stats of this BaseballStats.  # noqa: E501
        :type: PitchingData
        """

        self._pitching_stats = pitching_stats

    @property
    def fielding_stats(self):
        """Gets the fielding_stats of this BaseballStats.  # noqa: E501


        :return: The fielding_stats of this BaseballStats.  # noqa: E501
        :rtype: FieldingData
        """
        return self._fielding_stats

    @fielding_stats.setter
    def fielding_stats(self, fielding_stats):
        """Sets the fielding_stats of this BaseballStats.


        :param fielding_stats: The fielding_stats of this BaseballStats.  # noqa: E501
        :type: FieldingData
        """

        self._fielding_stats = fielding_stats

    @property
    def game_stats(self):
        """Gets the game_stats of this BaseballStats.  # noqa: E501


        :return: The game_stats of this BaseballStats.  # noqa: E501
        :rtype: GameStatData
        """
        return self._game_stats

    @game_stats.setter
    def game_stats(self, game_stats):
        """Sets the game_stats of this BaseballStats.


        :param game_stats: The game_stats of this BaseballStats.  # noqa: E501
        :type: GameStatData
        """

        self._game_stats = game_stats

    @property
    def team_stats(self):
        """Gets the team_stats of this BaseballStats.  # noqa: E501


        :return: The team_stats of this BaseballStats.  # noqa: E501
        :rtype: TeamStatData
        """
        return self._team_stats

    @team_stats.setter
    def team_stats(self, team_stats):
        """Sets the team_stats of this BaseballStats.


        :param team_stats: The team_stats of this BaseballStats.  # noqa: E501
        :type: TeamStatData
        """

        self._team_stats = team_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
