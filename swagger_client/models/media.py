# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Media(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'epg': 'JsonNode',
        'epg_alternate': 'JsonNode',
        'milestones': 'JsonNode',
        'featured_media': 'JsonNode',
        'preview_story': 'JsonNode',
        'game_story': 'JsonNode',
        'free_game': 'bool',
        'enhanced_game': 'bool',
        'broadcasts': 'list[GameDateBroadcast]'
    }

    attribute_map = {
        'epg': 'epg',
        'epg_alternate': 'epgAlternate',
        'milestones': 'milestones',
        'featured_media': 'featuredMedia',
        'preview_story': 'previewStory',
        'game_story': 'gameStory',
        'free_game': 'freeGame',
        'enhanced_game': 'enhancedGame',
        'broadcasts': 'broadcasts'
    }

    def __init__(self, epg=None, epg_alternate=None, milestones=None, featured_media=None, preview_story=None, game_story=None, free_game=None, enhanced_game=None, broadcasts=None):  # noqa: E501
        """Media - a model defined in Swagger"""  # noqa: E501
        self._epg = None
        self._epg_alternate = None
        self._milestones = None
        self._featured_media = None
        self._preview_story = None
        self._game_story = None
        self._free_game = None
        self._enhanced_game = None
        self._broadcasts = None
        self.discriminator = None
        if epg is not None:
            self.epg = epg
        if epg_alternate is not None:
            self.epg_alternate = epg_alternate
        if milestones is not None:
            self.milestones = milestones
        if featured_media is not None:
            self.featured_media = featured_media
        if preview_story is not None:
            self.preview_story = preview_story
        if game_story is not None:
            self.game_story = game_story
        if free_game is not None:
            self.free_game = free_game
        if enhanced_game is not None:
            self.enhanced_game = enhanced_game
        if broadcasts is not None:
            self.broadcasts = broadcasts

    @property
    def epg(self):
        """Gets the epg of this Media.  # noqa: E501


        :return: The epg of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._epg

    @epg.setter
    def epg(self, epg):
        """Sets the epg of this Media.


        :param epg: The epg of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._epg = epg

    @property
    def epg_alternate(self):
        """Gets the epg_alternate of this Media.  # noqa: E501


        :return: The epg_alternate of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._epg_alternate

    @epg_alternate.setter
    def epg_alternate(self, epg_alternate):
        """Sets the epg_alternate of this Media.


        :param epg_alternate: The epg_alternate of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._epg_alternate = epg_alternate

    @property
    def milestones(self):
        """Gets the milestones of this Media.  # noqa: E501


        :return: The milestones of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._milestones

    @milestones.setter
    def milestones(self, milestones):
        """Sets the milestones of this Media.


        :param milestones: The milestones of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._milestones = milestones

    @property
    def featured_media(self):
        """Gets the featured_media of this Media.  # noqa: E501


        :return: The featured_media of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._featured_media

    @featured_media.setter
    def featured_media(self, featured_media):
        """Sets the featured_media of this Media.


        :param featured_media: The featured_media of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._featured_media = featured_media

    @property
    def preview_story(self):
        """Gets the preview_story of this Media.  # noqa: E501


        :return: The preview_story of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._preview_story

    @preview_story.setter
    def preview_story(self, preview_story):
        """Sets the preview_story of this Media.


        :param preview_story: The preview_story of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._preview_story = preview_story

    @property
    def game_story(self):
        """Gets the game_story of this Media.  # noqa: E501


        :return: The game_story of this Media.  # noqa: E501
        :rtype: JsonNode
        """
        return self._game_story

    @game_story.setter
    def game_story(self, game_story):
        """Sets the game_story of this Media.


        :param game_story: The game_story of this Media.  # noqa: E501
        :type: JsonNode
        """

        self._game_story = game_story

    @property
    def free_game(self):
        """Gets the free_game of this Media.  # noqa: E501


        :return: The free_game of this Media.  # noqa: E501
        :rtype: bool
        """
        return self._free_game

    @free_game.setter
    def free_game(self, free_game):
        """Sets the free_game of this Media.


        :param free_game: The free_game of this Media.  # noqa: E501
        :type: bool
        """

        self._free_game = free_game

    @property
    def enhanced_game(self):
        """Gets the enhanced_game of this Media.  # noqa: E501


        :return: The enhanced_game of this Media.  # noqa: E501
        :rtype: bool
        """
        return self._enhanced_game

    @enhanced_game.setter
    def enhanced_game(self, enhanced_game):
        """Sets the enhanced_game of this Media.


        :param enhanced_game: The enhanced_game of this Media.  # noqa: E501
        :type: bool
        """

        self._enhanced_game = enhanced_game

    @property
    def broadcasts(self):
        """Gets the broadcasts of this Media.  # noqa: E501


        :return: The broadcasts of this Media.  # noqa: E501
        :rtype: list[GameDateBroadcast]
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this Media.


        :param broadcasts: The broadcasts of this Media.  # noqa: E501
        :type: list[GameDateBroadcast]
        """

        self._broadcasts = broadcasts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Media, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Media):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
