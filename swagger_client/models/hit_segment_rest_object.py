# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HitSegmentRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'launch_data': 'LaunchDataRestObject',
        'trajectory_data': 'HitTrajectoryDataRestObject',
        'landing_data': 'StartEndDataRestObject',
        'last_measured_data': 'StartEndDataRestObject',
        'reduced_confidence': 'list[str]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'launch_data': 'launchData',
        'trajectory_data': 'trajectoryData',
        'landing_data': 'landingData',
        'last_measured_data': 'lastMeasuredData',
        'reduced_confidence': 'reducedConfidence'
    }

    def __init__(self, copyright=None, launch_data=None, trajectory_data=None, landing_data=None, last_measured_data=None, reduced_confidence=None):  # noqa: E501
        """HitSegmentRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._launch_data = None
        self._trajectory_data = None
        self._landing_data = None
        self._last_measured_data = None
        self._reduced_confidence = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if launch_data is not None:
            self.launch_data = launch_data
        if trajectory_data is not None:
            self.trajectory_data = trajectory_data
        if landing_data is not None:
            self.landing_data = landing_data
        if last_measured_data is not None:
            self.last_measured_data = last_measured_data
        if reduced_confidence is not None:
            self.reduced_confidence = reduced_confidence

    @property
    def copyright(self):
        """Gets the copyright of this HitSegmentRestObject.  # noqa: E501


        :return: The copyright of this HitSegmentRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this HitSegmentRestObject.


        :param copyright: The copyright of this HitSegmentRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def launch_data(self):
        """Gets the launch_data of this HitSegmentRestObject.  # noqa: E501


        :return: The launch_data of this HitSegmentRestObject.  # noqa: E501
        :rtype: LaunchDataRestObject
        """
        return self._launch_data

    @launch_data.setter
    def launch_data(self, launch_data):
        """Sets the launch_data of this HitSegmentRestObject.


        :param launch_data: The launch_data of this HitSegmentRestObject.  # noqa: E501
        :type: LaunchDataRestObject
        """

        self._launch_data = launch_data

    @property
    def trajectory_data(self):
        """Gets the trajectory_data of this HitSegmentRestObject.  # noqa: E501


        :return: The trajectory_data of this HitSegmentRestObject.  # noqa: E501
        :rtype: HitTrajectoryDataRestObject
        """
        return self._trajectory_data

    @trajectory_data.setter
    def trajectory_data(self, trajectory_data):
        """Sets the trajectory_data of this HitSegmentRestObject.


        :param trajectory_data: The trajectory_data of this HitSegmentRestObject.  # noqa: E501
        :type: HitTrajectoryDataRestObject
        """

        self._trajectory_data = trajectory_data

    @property
    def landing_data(self):
        """Gets the landing_data of this HitSegmentRestObject.  # noqa: E501


        :return: The landing_data of this HitSegmentRestObject.  # noqa: E501
        :rtype: StartEndDataRestObject
        """
        return self._landing_data

    @landing_data.setter
    def landing_data(self, landing_data):
        """Sets the landing_data of this HitSegmentRestObject.


        :param landing_data: The landing_data of this HitSegmentRestObject.  # noqa: E501
        :type: StartEndDataRestObject
        """

        self._landing_data = landing_data

    @property
    def last_measured_data(self):
        """Gets the last_measured_data of this HitSegmentRestObject.  # noqa: E501


        :return: The last_measured_data of this HitSegmentRestObject.  # noqa: E501
        :rtype: StartEndDataRestObject
        """
        return self._last_measured_data

    @last_measured_data.setter
    def last_measured_data(self, last_measured_data):
        """Sets the last_measured_data of this HitSegmentRestObject.


        :param last_measured_data: The last_measured_data of this HitSegmentRestObject.  # noqa: E501
        :type: StartEndDataRestObject
        """

        self._last_measured_data = last_measured_data

    @property
    def reduced_confidence(self):
        """Gets the reduced_confidence of this HitSegmentRestObject.  # noqa: E501


        :return: The reduced_confidence of this HitSegmentRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._reduced_confidence

    @reduced_confidence.setter
    def reduced_confidence(self, reduced_confidence):
        """Sets the reduced_confidence of this HitSegmentRestObject.


        :param reduced_confidence: The reduced_confidence of this HitSegmentRestObject.  # noqa: E501
        :type: list[str]
        """

        self._reduced_confidence = reduced_confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HitSegmentRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HitSegmentRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
