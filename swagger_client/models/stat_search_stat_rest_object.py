# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatSearchStatRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'description': 'str',
        'abbreviation': 'str',
        'sort_stat': 'str',
        'stat_fields': 'StatFields',
        'stat_group': 'str',
        'filter_levels': 'FilterLevels',
        'is_counting': 'bool',
        'is_instance_stat': 'bool',
        'sort_order': 'str',
        'units': 'str',
        'aggregation': 'str',
        'decimals': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'description': 'description',
        'abbreviation': 'abbreviation',
        'sort_stat': 'sortStat',
        'stat_fields': 'statFields',
        'stat_group': 'statGroup',
        'filter_levels': 'filterLevels',
        'is_counting': 'isCounting',
        'is_instance_stat': 'isInstanceStat',
        'sort_order': 'sortOrder',
        'units': 'units',
        'aggregation': 'aggregation',
        'decimals': 'decimals'
    }

    def __init__(self, copyright=None, description=None, abbreviation=None, sort_stat=None, stat_fields=None, stat_group=None, filter_levels=None, is_counting=None, is_instance_stat=None, sort_order=None, units=None, aggregation=None, decimals=None):  # noqa: E501
        """StatSearchStatRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._description = None
        self._abbreviation = None
        self._sort_stat = None
        self._stat_fields = None
        self._stat_group = None
        self._filter_levels = None
        self._is_counting = None
        self._is_instance_stat = None
        self._sort_order = None
        self._units = None
        self._aggregation = None
        self._decimals = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if description is not None:
            self.description = description
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if sort_stat is not None:
            self.sort_stat = sort_stat
        if stat_fields is not None:
            self.stat_fields = stat_fields
        if stat_group is not None:
            self.stat_group = stat_group
        if filter_levels is not None:
            self.filter_levels = filter_levels
        if is_counting is not None:
            self.is_counting = is_counting
        if is_instance_stat is not None:
            self.is_instance_stat = is_instance_stat
        if sort_order is not None:
            self.sort_order = sort_order
        if units is not None:
            self.units = units
        if aggregation is not None:
            self.aggregation = aggregation
        if decimals is not None:
            self.decimals = decimals

    @property
    def copyright(self):
        """Gets the copyright of this StatSearchStatRestObject.  # noqa: E501


        :return: The copyright of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this StatSearchStatRestObject.


        :param copyright: The copyright of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def description(self):
        """Gets the description of this StatSearchStatRestObject.  # noqa: E501


        :return: The description of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatSearchStatRestObject.


        :param description: The description of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def abbreviation(self):
        """Gets the abbreviation of this StatSearchStatRestObject.  # noqa: E501


        :return: The abbreviation of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this StatSearchStatRestObject.


        :param abbreviation: The abbreviation of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def sort_stat(self):
        """Gets the sort_stat of this StatSearchStatRestObject.  # noqa: E501


        :return: The sort_stat of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._sort_stat

    @sort_stat.setter
    def sort_stat(self, sort_stat):
        """Sets the sort_stat of this StatSearchStatRestObject.


        :param sort_stat: The sort_stat of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._sort_stat = sort_stat

    @property
    def stat_fields(self):
        """Gets the stat_fields of this StatSearchStatRestObject.  # noqa: E501


        :return: The stat_fields of this StatSearchStatRestObject.  # noqa: E501
        :rtype: StatFields
        """
        return self._stat_fields

    @stat_fields.setter
    def stat_fields(self, stat_fields):
        """Sets the stat_fields of this StatSearchStatRestObject.


        :param stat_fields: The stat_fields of this StatSearchStatRestObject.  # noqa: E501
        :type: StatFields
        """

        self._stat_fields = stat_fields

    @property
    def stat_group(self):
        """Gets the stat_group of this StatSearchStatRestObject.  # noqa: E501


        :return: The stat_group of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._stat_group

    @stat_group.setter
    def stat_group(self, stat_group):
        """Sets the stat_group of this StatSearchStatRestObject.


        :param stat_group: The stat_group of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._stat_group = stat_group

    @property
    def filter_levels(self):
        """Gets the filter_levels of this StatSearchStatRestObject.  # noqa: E501


        :return: The filter_levels of this StatSearchStatRestObject.  # noqa: E501
        :rtype: FilterLevels
        """
        return self._filter_levels

    @filter_levels.setter
    def filter_levels(self, filter_levels):
        """Sets the filter_levels of this StatSearchStatRestObject.


        :param filter_levels: The filter_levels of this StatSearchStatRestObject.  # noqa: E501
        :type: FilterLevels
        """

        self._filter_levels = filter_levels

    @property
    def is_counting(self):
        """Gets the is_counting of this StatSearchStatRestObject.  # noqa: E501


        :return: The is_counting of this StatSearchStatRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_counting

    @is_counting.setter
    def is_counting(self, is_counting):
        """Sets the is_counting of this StatSearchStatRestObject.


        :param is_counting: The is_counting of this StatSearchStatRestObject.  # noqa: E501
        :type: bool
        """

        self._is_counting = is_counting

    @property
    def is_instance_stat(self):
        """Gets the is_instance_stat of this StatSearchStatRestObject.  # noqa: E501


        :return: The is_instance_stat of this StatSearchStatRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_instance_stat

    @is_instance_stat.setter
    def is_instance_stat(self, is_instance_stat):
        """Sets the is_instance_stat of this StatSearchStatRestObject.


        :param is_instance_stat: The is_instance_stat of this StatSearchStatRestObject.  # noqa: E501
        :type: bool
        """

        self._is_instance_stat = is_instance_stat

    @property
    def sort_order(self):
        """Gets the sort_order of this StatSearchStatRestObject.  # noqa: E501


        :return: The sort_order of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this StatSearchStatRestObject.


        :param sort_order: The sort_order of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def units(self):
        """Gets the units of this StatSearchStatRestObject.  # noqa: E501


        :return: The units of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this StatSearchStatRestObject.


        :param units: The units of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def aggregation(self):
        """Gets the aggregation of this StatSearchStatRestObject.  # noqa: E501


        :return: The aggregation of this StatSearchStatRestObject.  # noqa: E501
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this StatSearchStatRestObject.


        :param aggregation: The aggregation of this StatSearchStatRestObject.  # noqa: E501
        :type: str
        """

        self._aggregation = aggregation

    @property
    def decimals(self):
        """Gets the decimals of this StatSearchStatRestObject.  # noqa: E501


        :return: The decimals of this StatSearchStatRestObject.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this StatSearchStatRestObject.


        :param decimals: The decimals of this StatSearchStatRestObject.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatSearchStatRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatSearchStatRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
