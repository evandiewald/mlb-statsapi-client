# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ViolationTypeRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'violation_type_desc': 'str',
        'violation_type_desc': 'str',
        'violation_type_code': 'str',
        'event_type': 'str',
        'event_type_code': 'str',
        'parent_id': 'int',
        'violator_code': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'violation_type_desc': 'violation_type_desc',
        'violation_type_desc': 'violationTypeDesc',
        'violation_type_code': 'violationTypeCode',
        'event_type': 'eventType',
        'event_type_code': 'eventTypeCode',
        'parent_id': 'parentId',
        'violator_code': 'violatorCode'
    }

    def __init__(self, copyright=None, violation_type_desc=None, violation_type_desc=None, violation_type_code=None, event_type=None, event_type_code=None, parent_id=None, violator_code=None):  # noqa: E501
        """ViolationTypeRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._violation_type_desc = None
        self._violation_type_desc = None
        self._violation_type_code = None
        self._event_type = None
        self._event_type_code = None
        self._parent_id = None
        self._violator_code = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if violation_type_desc is not None:
            self.violation_type_desc = violation_type_desc
        if violation_type_desc is not None:
            self.violation_type_desc = violation_type_desc
        if violation_type_code is not None:
            self.violation_type_code = violation_type_code
        if event_type is not None:
            self.event_type = event_type
        if event_type_code is not None:
            self.event_type_code = event_type_code
        if parent_id is not None:
            self.parent_id = parent_id
        if violator_code is not None:
            self.violator_code = violator_code

    @property
    def copyright(self):
        """Gets the copyright of this ViolationTypeRestObject.  # noqa: E501


        :return: The copyright of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ViolationTypeRestObject.


        :param copyright: The copyright of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def violation_type_desc(self):
        """Gets the violation_type_desc of this ViolationTypeRestObject.  # noqa: E501


        :return: The violation_type_desc of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._violation_type_desc

    @violation_type_desc.setter
    def violation_type_desc(self, violation_type_desc):
        """Sets the violation_type_desc of this ViolationTypeRestObject.


        :param violation_type_desc: The violation_type_desc of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._violation_type_desc = violation_type_desc

    @property
    def violation_type_desc(self):
        """Gets the violation_type_desc of this ViolationTypeRestObject.  # noqa: E501


        :return: The violation_type_desc of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._violation_type_desc

    @violation_type_desc.setter
    def violation_type_desc(self, violation_type_desc):
        """Sets the violation_type_desc of this ViolationTypeRestObject.


        :param violation_type_desc: The violation_type_desc of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._violation_type_desc = violation_type_desc

    @property
    def violation_type_code(self):
        """Gets the violation_type_code of this ViolationTypeRestObject.  # noqa: E501


        :return: The violation_type_code of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._violation_type_code

    @violation_type_code.setter
    def violation_type_code(self, violation_type_code):
        """Sets the violation_type_code of this ViolationTypeRestObject.


        :param violation_type_code: The violation_type_code of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._violation_type_code = violation_type_code

    @property
    def event_type(self):
        """Gets the event_type of this ViolationTypeRestObject.  # noqa: E501


        :return: The event_type of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ViolationTypeRestObject.


        :param event_type: The event_type of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def event_type_code(self):
        """Gets the event_type_code of this ViolationTypeRestObject.  # noqa: E501


        :return: The event_type_code of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._event_type_code

    @event_type_code.setter
    def event_type_code(self, event_type_code):
        """Sets the event_type_code of this ViolationTypeRestObject.


        :param event_type_code: The event_type_code of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._event_type_code = event_type_code

    @property
    def parent_id(self):
        """Gets the parent_id of this ViolationTypeRestObject.  # noqa: E501


        :return: The parent_id of this ViolationTypeRestObject.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ViolationTypeRestObject.


        :param parent_id: The parent_id of this ViolationTypeRestObject.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def violator_code(self):
        """Gets the violator_code of this ViolationTypeRestObject.  # noqa: E501


        :return: The violator_code of this ViolationTypeRestObject.  # noqa: E501
        :rtype: str
        """
        return self._violator_code

    @violator_code.setter
    def violator_code(self, violator_code):
        """Sets the violator_code of this ViolationTypeRestObject.


        :param violator_code: The violator_code of this ViolationTypeRestObject.  # noqa: E501
        :type: str
        """

        self._violator_code = violator_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViolationTypeRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViolationTypeRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
