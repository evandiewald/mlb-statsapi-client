# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupedStatData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standard': 'StatData',
        'advanced': 'StatData',
        'expected': 'StatData',
        'projected': 'StatData',
        'tracking': 'StatData',
        'pitching': 'GroupedStatData',
        'hitting': 'GroupedStatData',
        'fielding': 'GroupedStatData',
        'running': 'GroupedStatData',
        'catching': 'GroupedStatData',
        'rankings': 'GroupedStatData',
        'percentiles': 'GroupedStatData'
    }

    attribute_map = {
        'standard': 'standard',
        'advanced': 'advanced',
        'expected': 'expected',
        'projected': 'projected',
        'tracking': 'tracking',
        'pitching': 'pitching',
        'hitting': 'hitting',
        'fielding': 'fielding',
        'running': 'running',
        'catching': 'catching',
        'rankings': 'rankings',
        'percentiles': 'percentiles'
    }

    def __init__(self, standard=None, advanced=None, expected=None, projected=None, tracking=None, pitching=None, hitting=None, fielding=None, running=None, catching=None, rankings=None, percentiles=None):  # noqa: E501
        """GroupedStatData - a model defined in Swagger"""  # noqa: E501
        self._standard = None
        self._advanced = None
        self._expected = None
        self._projected = None
        self._tracking = None
        self._pitching = None
        self._hitting = None
        self._fielding = None
        self._running = None
        self._catching = None
        self._rankings = None
        self._percentiles = None
        self.discriminator = None
        if standard is not None:
            self.standard = standard
        if advanced is not None:
            self.advanced = advanced
        if expected is not None:
            self.expected = expected
        if projected is not None:
            self.projected = projected
        if tracking is not None:
            self.tracking = tracking
        if pitching is not None:
            self.pitching = pitching
        if hitting is not None:
            self.hitting = hitting
        if fielding is not None:
            self.fielding = fielding
        if running is not None:
            self.running = running
        if catching is not None:
            self.catching = catching
        if rankings is not None:
            self.rankings = rankings
        if percentiles is not None:
            self.percentiles = percentiles

    @property
    def standard(self):
        """Gets the standard of this GroupedStatData.  # noqa: E501


        :return: The standard of this GroupedStatData.  # noqa: E501
        :rtype: StatData
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this GroupedStatData.


        :param standard: The standard of this GroupedStatData.  # noqa: E501
        :type: StatData
        """

        self._standard = standard

    @property
    def advanced(self):
        """Gets the advanced of this GroupedStatData.  # noqa: E501


        :return: The advanced of this GroupedStatData.  # noqa: E501
        :rtype: StatData
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this GroupedStatData.


        :param advanced: The advanced of this GroupedStatData.  # noqa: E501
        :type: StatData
        """

        self._advanced = advanced

    @property
    def expected(self):
        """Gets the expected of this GroupedStatData.  # noqa: E501


        :return: The expected of this GroupedStatData.  # noqa: E501
        :rtype: StatData
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this GroupedStatData.


        :param expected: The expected of this GroupedStatData.  # noqa: E501
        :type: StatData
        """

        self._expected = expected

    @property
    def projected(self):
        """Gets the projected of this GroupedStatData.  # noqa: E501


        :return: The projected of this GroupedStatData.  # noqa: E501
        :rtype: StatData
        """
        return self._projected

    @projected.setter
    def projected(self, projected):
        """Sets the projected of this GroupedStatData.


        :param projected: The projected of this GroupedStatData.  # noqa: E501
        :type: StatData
        """

        self._projected = projected

    @property
    def tracking(self):
        """Gets the tracking of this GroupedStatData.  # noqa: E501


        :return: The tracking of this GroupedStatData.  # noqa: E501
        :rtype: StatData
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this GroupedStatData.


        :param tracking: The tracking of this GroupedStatData.  # noqa: E501
        :type: StatData
        """

        self._tracking = tracking

    @property
    def pitching(self):
        """Gets the pitching of this GroupedStatData.  # noqa: E501


        :return: The pitching of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._pitching

    @pitching.setter
    def pitching(self, pitching):
        """Sets the pitching of this GroupedStatData.


        :param pitching: The pitching of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._pitching = pitching

    @property
    def hitting(self):
        """Gets the hitting of this GroupedStatData.  # noqa: E501


        :return: The hitting of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._hitting

    @hitting.setter
    def hitting(self, hitting):
        """Sets the hitting of this GroupedStatData.


        :param hitting: The hitting of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._hitting = hitting

    @property
    def fielding(self):
        """Gets the fielding of this GroupedStatData.  # noqa: E501


        :return: The fielding of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._fielding

    @fielding.setter
    def fielding(self, fielding):
        """Sets the fielding of this GroupedStatData.


        :param fielding: The fielding of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._fielding = fielding

    @property
    def running(self):
        """Gets the running of this GroupedStatData.  # noqa: E501


        :return: The running of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this GroupedStatData.


        :param running: The running of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._running = running

    @property
    def catching(self):
        """Gets the catching of this GroupedStatData.  # noqa: E501


        :return: The catching of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._catching

    @catching.setter
    def catching(self, catching):
        """Sets the catching of this GroupedStatData.


        :param catching: The catching of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._catching = catching

    @property
    def rankings(self):
        """Gets the rankings of this GroupedStatData.  # noqa: E501


        :return: The rankings of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._rankings

    @rankings.setter
    def rankings(self, rankings):
        """Sets the rankings of this GroupedStatData.


        :param rankings: The rankings of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._rankings = rankings

    @property
    def percentiles(self):
        """Gets the percentiles of this GroupedStatData.  # noqa: E501


        :return: The percentiles of this GroupedStatData.  # noqa: E501
        :rtype: GroupedStatData
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this GroupedStatData.


        :param percentiles: The percentiles of this GroupedStatData.  # noqa: E501
        :type: GroupedStatData
        """

        self._percentiles = percentiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupedStatData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupedStatData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
