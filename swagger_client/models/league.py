# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class League(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'id': 'int',
        'name': 'str',
        'name_short': 'str',
        'name_abbreviation': 'str',
        'org_code': 'str',
        'sport': 'Sport',
        'season_state': 'str',
        'has_wildcard': 'bool',
        'has_split_season': 'bool',
        'season_date_info': 'Season',
        'season': 'str',
        'league_time_zone': 'TimeZone',
        'games': 'int',
        'has_playoff_points': 'bool',
        'total_teams': 'int',
        'total_wildcard_teams': 'int',
        'has_divisions': 'bool',
        'has_conferences': 'bool',
        'time_zone': 'TimeZone',
        'default_venue_id': 'int',
        'sort_order': 'int',
        'rule_settings': 'list[RuleSettings]',
        'active': 'bool',
        'affiliated': 'bool',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'id': 'id',
        'name': 'name',
        'name_short': 'nameShort',
        'name_abbreviation': 'nameAbbreviation',
        'org_code': 'orgCode',
        'sport': 'sport',
        'season_state': 'seasonState',
        'has_wildcard': 'hasWildcard',
        'has_split_season': 'hasSplitSeason',
        'season_date_info': 'seasonDateInfo',
        'season': 'season',
        'league_time_zone': 'leagueTimeZone',
        'games': 'games',
        'has_playoff_points': 'hasPlayoffPoints',
        'total_teams': 'totalTeams',
        'total_wildcard_teams': 'totalWildcardTeams',
        'has_divisions': 'hasDivisions',
        'has_conferences': 'hasConferences',
        'time_zone': 'timeZone',
        'default_venue_id': 'defaultVenueId',
        'sort_order': 'sortOrder',
        'rule_settings': 'ruleSettings',
        'active': 'active',
        'affiliated': 'affiliated',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, id=None, name=None, name_short=None, name_abbreviation=None, org_code=None, sport=None, season_state=None, has_wildcard=None, has_split_season=None, season_date_info=None, season=None, league_time_zone=None, games=None, has_playoff_points=None, total_teams=None, total_wildcard_teams=None, has_divisions=None, has_conferences=None, time_zone=None, default_venue_id=None, sort_order=None, rule_settings=None, active=None, affiliated=None, user_privileges=None):  # noqa: E501
        """League - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._id = None
        self._name = None
        self._name_short = None
        self._name_abbreviation = None
        self._org_code = None
        self._sport = None
        self._season_state = None
        self._has_wildcard = None
        self._has_split_season = None
        self._season_date_info = None
        self._season = None
        self._league_time_zone = None
        self._games = None
        self._has_playoff_points = None
        self._total_teams = None
        self._total_wildcard_teams = None
        self._has_divisions = None
        self._has_conferences = None
        self._time_zone = None
        self._default_venue_id = None
        self._sort_order = None
        self._rule_settings = None
        self._active = None
        self._affiliated = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if name_short is not None:
            self.name_short = name_short
        if name_abbreviation is not None:
            self.name_abbreviation = name_abbreviation
        if org_code is not None:
            self.org_code = org_code
        if sport is not None:
            self.sport = sport
        if season_state is not None:
            self.season_state = season_state
        if has_wildcard is not None:
            self.has_wildcard = has_wildcard
        if has_split_season is not None:
            self.has_split_season = has_split_season
        if season_date_info is not None:
            self.season_date_info = season_date_info
        if season is not None:
            self.season = season
        if league_time_zone is not None:
            self.league_time_zone = league_time_zone
        if games is not None:
            self.games = games
        if has_playoff_points is not None:
            self.has_playoff_points = has_playoff_points
        if total_teams is not None:
            self.total_teams = total_teams
        if total_wildcard_teams is not None:
            self.total_wildcard_teams = total_wildcard_teams
        if has_divisions is not None:
            self.has_divisions = has_divisions
        if has_conferences is not None:
            self.has_conferences = has_conferences
        if time_zone is not None:
            self.time_zone = time_zone
        if default_venue_id is not None:
            self.default_venue_id = default_venue_id
        if sort_order is not None:
            self.sort_order = sort_order
        if rule_settings is not None:
            self.rule_settings = rule_settings
        if active is not None:
            self.active = active
        if affiliated is not None:
            self.affiliated = affiliated
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this League.  # noqa: E501


        :return: The requesting_user_role of this League.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this League.


        :param requesting_user_role: The requesting_user_role of this League.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def id(self):
        """Gets the id of this League.  # noqa: E501


        :return: The id of this League.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this League.


        :param id: The id of this League.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this League.  # noqa: E501


        :return: The name of this League.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this League.


        :param name: The name of this League.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_short(self):
        """Gets the name_short of this League.  # noqa: E501


        :return: The name_short of this League.  # noqa: E501
        :rtype: str
        """
        return self._name_short

    @name_short.setter
    def name_short(self, name_short):
        """Sets the name_short of this League.


        :param name_short: The name_short of this League.  # noqa: E501
        :type: str
        """

        self._name_short = name_short

    @property
    def name_abbreviation(self):
        """Gets the name_abbreviation of this League.  # noqa: E501


        :return: The name_abbreviation of this League.  # noqa: E501
        :rtype: str
        """
        return self._name_abbreviation

    @name_abbreviation.setter
    def name_abbreviation(self, name_abbreviation):
        """Sets the name_abbreviation of this League.


        :param name_abbreviation: The name_abbreviation of this League.  # noqa: E501
        :type: str
        """

        self._name_abbreviation = name_abbreviation

    @property
    def org_code(self):
        """Gets the org_code of this League.  # noqa: E501


        :return: The org_code of this League.  # noqa: E501
        :rtype: str
        """
        return self._org_code

    @org_code.setter
    def org_code(self, org_code):
        """Sets the org_code of this League.


        :param org_code: The org_code of this League.  # noqa: E501
        :type: str
        """

        self._org_code = org_code

    @property
    def sport(self):
        """Gets the sport of this League.  # noqa: E501


        :return: The sport of this League.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this League.


        :param sport: The sport of this League.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def season_state(self):
        """Gets the season_state of this League.  # noqa: E501


        :return: The season_state of this League.  # noqa: E501
        :rtype: str
        """
        return self._season_state

    @season_state.setter
    def season_state(self, season_state):
        """Sets the season_state of this League.


        :param season_state: The season_state of this League.  # noqa: E501
        :type: str
        """

        self._season_state = season_state

    @property
    def has_wildcard(self):
        """Gets the has_wildcard of this League.  # noqa: E501


        :return: The has_wildcard of this League.  # noqa: E501
        :rtype: bool
        """
        return self._has_wildcard

    @has_wildcard.setter
    def has_wildcard(self, has_wildcard):
        """Sets the has_wildcard of this League.


        :param has_wildcard: The has_wildcard of this League.  # noqa: E501
        :type: bool
        """

        self._has_wildcard = has_wildcard

    @property
    def has_split_season(self):
        """Gets the has_split_season of this League.  # noqa: E501


        :return: The has_split_season of this League.  # noqa: E501
        :rtype: bool
        """
        return self._has_split_season

    @has_split_season.setter
    def has_split_season(self, has_split_season):
        """Sets the has_split_season of this League.


        :param has_split_season: The has_split_season of this League.  # noqa: E501
        :type: bool
        """

        self._has_split_season = has_split_season

    @property
    def season_date_info(self):
        """Gets the season_date_info of this League.  # noqa: E501


        :return: The season_date_info of this League.  # noqa: E501
        :rtype: Season
        """
        return self._season_date_info

    @season_date_info.setter
    def season_date_info(self, season_date_info):
        """Sets the season_date_info of this League.


        :param season_date_info: The season_date_info of this League.  # noqa: E501
        :type: Season
        """

        self._season_date_info = season_date_info

    @property
    def season(self):
        """Gets the season of this League.  # noqa: E501


        :return: The season of this League.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this League.


        :param season: The season of this League.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def league_time_zone(self):
        """Gets the league_time_zone of this League.  # noqa: E501


        :return: The league_time_zone of this League.  # noqa: E501
        :rtype: TimeZone
        """
        return self._league_time_zone

    @league_time_zone.setter
    def league_time_zone(self, league_time_zone):
        """Sets the league_time_zone of this League.


        :param league_time_zone: The league_time_zone of this League.  # noqa: E501
        :type: TimeZone
        """

        self._league_time_zone = league_time_zone

    @property
    def games(self):
        """Gets the games of this League.  # noqa: E501


        :return: The games of this League.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this League.


        :param games: The games of this League.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def has_playoff_points(self):
        """Gets the has_playoff_points of this League.  # noqa: E501


        :return: The has_playoff_points of this League.  # noqa: E501
        :rtype: bool
        """
        return self._has_playoff_points

    @has_playoff_points.setter
    def has_playoff_points(self, has_playoff_points):
        """Sets the has_playoff_points of this League.


        :param has_playoff_points: The has_playoff_points of this League.  # noqa: E501
        :type: bool
        """

        self._has_playoff_points = has_playoff_points

    @property
    def total_teams(self):
        """Gets the total_teams of this League.  # noqa: E501


        :return: The total_teams of this League.  # noqa: E501
        :rtype: int
        """
        return self._total_teams

    @total_teams.setter
    def total_teams(self, total_teams):
        """Sets the total_teams of this League.


        :param total_teams: The total_teams of this League.  # noqa: E501
        :type: int
        """

        self._total_teams = total_teams

    @property
    def total_wildcard_teams(self):
        """Gets the total_wildcard_teams of this League.  # noqa: E501


        :return: The total_wildcard_teams of this League.  # noqa: E501
        :rtype: int
        """
        return self._total_wildcard_teams

    @total_wildcard_teams.setter
    def total_wildcard_teams(self, total_wildcard_teams):
        """Sets the total_wildcard_teams of this League.


        :param total_wildcard_teams: The total_wildcard_teams of this League.  # noqa: E501
        :type: int
        """

        self._total_wildcard_teams = total_wildcard_teams

    @property
    def has_divisions(self):
        """Gets the has_divisions of this League.  # noqa: E501


        :return: The has_divisions of this League.  # noqa: E501
        :rtype: bool
        """
        return self._has_divisions

    @has_divisions.setter
    def has_divisions(self, has_divisions):
        """Sets the has_divisions of this League.


        :param has_divisions: The has_divisions of this League.  # noqa: E501
        :type: bool
        """

        self._has_divisions = has_divisions

    @property
    def has_conferences(self):
        """Gets the has_conferences of this League.  # noqa: E501


        :return: The has_conferences of this League.  # noqa: E501
        :rtype: bool
        """
        return self._has_conferences

    @has_conferences.setter
    def has_conferences(self, has_conferences):
        """Sets the has_conferences of this League.


        :param has_conferences: The has_conferences of this League.  # noqa: E501
        :type: bool
        """

        self._has_conferences = has_conferences

    @property
    def time_zone(self):
        """Gets the time_zone of this League.  # noqa: E501


        :return: The time_zone of this League.  # noqa: E501
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this League.


        :param time_zone: The time_zone of this League.  # noqa: E501
        :type: TimeZone
        """

        self._time_zone = time_zone

    @property
    def default_venue_id(self):
        """Gets the default_venue_id of this League.  # noqa: E501


        :return: The default_venue_id of this League.  # noqa: E501
        :rtype: int
        """
        return self._default_venue_id

    @default_venue_id.setter
    def default_venue_id(self, default_venue_id):
        """Sets the default_venue_id of this League.


        :param default_venue_id: The default_venue_id of this League.  # noqa: E501
        :type: int
        """

        self._default_venue_id = default_venue_id

    @property
    def sort_order(self):
        """Gets the sort_order of this League.  # noqa: E501


        :return: The sort_order of this League.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this League.


        :param sort_order: The sort_order of this League.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def rule_settings(self):
        """Gets the rule_settings of this League.  # noqa: E501


        :return: The rule_settings of this League.  # noqa: E501
        :rtype: list[RuleSettings]
        """
        return self._rule_settings

    @rule_settings.setter
    def rule_settings(self, rule_settings):
        """Sets the rule_settings of this League.


        :param rule_settings: The rule_settings of this League.  # noqa: E501
        :type: list[RuleSettings]
        """

        self._rule_settings = rule_settings

    @property
    def active(self):
        """Gets the active of this League.  # noqa: E501


        :return: The active of this League.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this League.


        :param active: The active of this League.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def affiliated(self):
        """Gets the affiliated of this League.  # noqa: E501


        :return: The affiliated of this League.  # noqa: E501
        :rtype: bool
        """
        return self._affiliated

    @affiliated.setter
    def affiliated(self, affiliated):
        """Sets the affiliated of this League.


        :param affiliated: The affiliated of this League.  # noqa: E501
        :type: bool
        """

        self._affiliated = affiliated

    @property
    def user_privileges(self):
        """Gets the user_privileges of this League.  # noqa: E501


        :return: The user_privileges of this League.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this League.


        :param user_privileges: The user_privileges of this League.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(League, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, League):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
