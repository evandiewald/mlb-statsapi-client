# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayEventRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'is_scrubbed': 'bool',
        'time_stamp': 'str',
        'play_event_type': 'int',
        'play_event_id': 'str',
        'position_id': 'int',
        'time_code': 'int',
        'play_event': 'str',
        'x': 'float',
        'y': 'float'
    }

    attribute_map = {
        'copyright': 'copyright',
        'is_scrubbed': 'isScrubbed',
        'time_stamp': 'timeStamp',
        'play_event_type': 'playEventType',
        'play_event_id': 'playEventId',
        'position_id': 'positionId',
        'time_code': 'timeCode',
        'play_event': 'playEvent',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, copyright=None, is_scrubbed=None, time_stamp=None, play_event_type=None, play_event_id=None, position_id=None, time_code=None, play_event=None, x=None, y=None):  # noqa: E501
        """PlayEventRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._is_scrubbed = None
        self._time_stamp = None
        self._play_event_type = None
        self._play_event_id = None
        self._position_id = None
        self._time_code = None
        self._play_event = None
        self._x = None
        self._y = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if is_scrubbed is not None:
            self.is_scrubbed = is_scrubbed
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if play_event_type is not None:
            self.play_event_type = play_event_type
        if play_event_id is not None:
            self.play_event_id = play_event_id
        if position_id is not None:
            self.position_id = position_id
        if time_code is not None:
            self.time_code = time_code
        if play_event is not None:
            self.play_event = play_event
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y

    @property
    def copyright(self):
        """Gets the copyright of this PlayEventRestObject.  # noqa: E501


        :return: The copyright of this PlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PlayEventRestObject.


        :param copyright: The copyright of this PlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def is_scrubbed(self):
        """Gets the is_scrubbed of this PlayEventRestObject.  # noqa: E501


        :return: The is_scrubbed of this PlayEventRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_scrubbed

    @is_scrubbed.setter
    def is_scrubbed(self, is_scrubbed):
        """Sets the is_scrubbed of this PlayEventRestObject.


        :param is_scrubbed: The is_scrubbed of this PlayEventRestObject.  # noqa: E501
        :type: bool
        """

        self._is_scrubbed = is_scrubbed

    @property
    def time_stamp(self):
        """Gets the time_stamp of this PlayEventRestObject.  # noqa: E501


        :return: The time_stamp of this PlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this PlayEventRestObject.


        :param time_stamp: The time_stamp of this PlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def play_event_type(self):
        """Gets the play_event_type of this PlayEventRestObject.  # noqa: E501


        :return: The play_event_type of this PlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._play_event_type

    @play_event_type.setter
    def play_event_type(self, play_event_type):
        """Sets the play_event_type of this PlayEventRestObject.


        :param play_event_type: The play_event_type of this PlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._play_event_type = play_event_type

    @property
    def play_event_id(self):
        """Gets the play_event_id of this PlayEventRestObject.  # noqa: E501


        :return: The play_event_id of this PlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_event_id

    @play_event_id.setter
    def play_event_id(self, play_event_id):
        """Sets the play_event_id of this PlayEventRestObject.


        :param play_event_id: The play_event_id of this PlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._play_event_id = play_event_id

    @property
    def position_id(self):
        """Gets the position_id of this PlayEventRestObject.  # noqa: E501


        :return: The position_id of this PlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this PlayEventRestObject.


        :param position_id: The position_id of this PlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def time_code(self):
        """Gets the time_code of this PlayEventRestObject.  # noqa: E501


        :return: The time_code of this PlayEventRestObject.  # noqa: E501
        :rtype: int
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this PlayEventRestObject.


        :param time_code: The time_code of this PlayEventRestObject.  # noqa: E501
        :type: int
        """

        self._time_code = time_code

    @property
    def play_event(self):
        """Gets the play_event of this PlayEventRestObject.  # noqa: E501


        :return: The play_event of this PlayEventRestObject.  # noqa: E501
        :rtype: str
        """
        return self._play_event

    @play_event.setter
    def play_event(self, play_event):
        """Sets the play_event of this PlayEventRestObject.


        :param play_event: The play_event of this PlayEventRestObject.  # noqa: E501
        :type: str
        """

        self._play_event = play_event

    @property
    def x(self):
        """Gets the x of this PlayEventRestObject.  # noqa: E501


        :return: The x of this PlayEventRestObject.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this PlayEventRestObject.


        :param x: The x of this PlayEventRestObject.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this PlayEventRestObject.  # noqa: E501


        :return: The y of this PlayEventRestObject.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this PlayEventRestObject.


        :param y: The y of this PlayEventRestObject.  # noqa: E501
        :type: float
        """

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayEventRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayEventRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
