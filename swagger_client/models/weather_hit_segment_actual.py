# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherHitSegmentActual(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'trajectory_data': 'WeatherHitTrajectoryDataRestObject',
        'landing_data': 'LandingDataRestObject',
        'conditions': 'WeatherMetricRestObject',
        'flags': 'WeatherConditionFlagRestObject',
        'deviations': 'WeatherDeviationRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'trajectory_data': 'trajectoryData',
        'landing_data': 'landingData',
        'conditions': 'conditions',
        'flags': 'flags',
        'deviations': 'deviations'
    }

    def __init__(self, copyright=None, trajectory_data=None, landing_data=None, conditions=None, flags=None, deviations=None):  # noqa: E501
        """WeatherHitSegmentActual - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._trajectory_data = None
        self._landing_data = None
        self._conditions = None
        self._flags = None
        self._deviations = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if trajectory_data is not None:
            self.trajectory_data = trajectory_data
        if landing_data is not None:
            self.landing_data = landing_data
        if conditions is not None:
            self.conditions = conditions
        if flags is not None:
            self.flags = flags
        if deviations is not None:
            self.deviations = deviations

    @property
    def copyright(self):
        """Gets the copyright of this WeatherHitSegmentActual.  # noqa: E501


        :return: The copyright of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherHitSegmentActual.


        :param copyright: The copyright of this WeatherHitSegmentActual.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def trajectory_data(self):
        """Gets the trajectory_data of this WeatherHitSegmentActual.  # noqa: E501


        :return: The trajectory_data of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: WeatherHitTrajectoryDataRestObject
        """
        return self._trajectory_data

    @trajectory_data.setter
    def trajectory_data(self, trajectory_data):
        """Sets the trajectory_data of this WeatherHitSegmentActual.


        :param trajectory_data: The trajectory_data of this WeatherHitSegmentActual.  # noqa: E501
        :type: WeatherHitTrajectoryDataRestObject
        """

        self._trajectory_data = trajectory_data

    @property
    def landing_data(self):
        """Gets the landing_data of this WeatherHitSegmentActual.  # noqa: E501


        :return: The landing_data of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: LandingDataRestObject
        """
        return self._landing_data

    @landing_data.setter
    def landing_data(self, landing_data):
        """Sets the landing_data of this WeatherHitSegmentActual.


        :param landing_data: The landing_data of this WeatherHitSegmentActual.  # noqa: E501
        :type: LandingDataRestObject
        """

        self._landing_data = landing_data

    @property
    def conditions(self):
        """Gets the conditions of this WeatherHitSegmentActual.  # noqa: E501


        :return: The conditions of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: WeatherMetricRestObject
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this WeatherHitSegmentActual.


        :param conditions: The conditions of this WeatherHitSegmentActual.  # noqa: E501
        :type: WeatherMetricRestObject
        """

        self._conditions = conditions

    @property
    def flags(self):
        """Gets the flags of this WeatherHitSegmentActual.  # noqa: E501


        :return: The flags of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: WeatherConditionFlagRestObject
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this WeatherHitSegmentActual.


        :param flags: The flags of this WeatherHitSegmentActual.  # noqa: E501
        :type: WeatherConditionFlagRestObject
        """

        self._flags = flags

    @property
    def deviations(self):
        """Gets the deviations of this WeatherHitSegmentActual.  # noqa: E501


        :return: The deviations of this WeatherHitSegmentActual.  # noqa: E501
        :rtype: WeatherDeviationRestObject
        """
        return self._deviations

    @deviations.setter
    def deviations(self, deviations):
        """Sets the deviations of this WeatherHitSegmentActual.


        :param deviations: The deviations of this WeatherHitSegmentActual.  # noqa: E501
        :type: WeatherDeviationRestObject
        """

        self._deviations = deviations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherHitSegmentActual, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherHitSegmentActual):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
