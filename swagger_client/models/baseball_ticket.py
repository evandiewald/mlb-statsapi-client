# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_type': 'str',
        'ticket_link': 'str',
        'schedule_id': 'int',
        'on_sale_end_date': 'datetime',
        'home_ticket_link': 'str',
        'away_ticket_link': 'str'
    }

    attribute_map = {
        'ticket_type': 'ticketType',
        'ticket_link': 'ticketLink',
        'schedule_id': 'scheduleId',
        'on_sale_end_date': 'onSaleEndDate',
        'home_ticket_link': 'homeTicketLink',
        'away_ticket_link': 'awayTicketLink'
    }

    def __init__(self, ticket_type=None, ticket_link=None, schedule_id=None, on_sale_end_date=None, home_ticket_link=None, away_ticket_link=None):  # noqa: E501
        """BaseballTicket - a model defined in Swagger"""  # noqa: E501
        self._ticket_type = None
        self._ticket_link = None
        self._schedule_id = None
        self._on_sale_end_date = None
        self._home_ticket_link = None
        self._away_ticket_link = None
        self.discriminator = None
        if ticket_type is not None:
            self.ticket_type = ticket_type
        if ticket_link is not None:
            self.ticket_link = ticket_link
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if on_sale_end_date is not None:
            self.on_sale_end_date = on_sale_end_date
        if home_ticket_link is not None:
            self.home_ticket_link = home_ticket_link
        if away_ticket_link is not None:
            self.away_ticket_link = away_ticket_link

    @property
    def ticket_type(self):
        """Gets the ticket_type of this BaseballTicket.  # noqa: E501


        :return: The ticket_type of this BaseballTicket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """Sets the ticket_type of this BaseballTicket.


        :param ticket_type: The ticket_type of this BaseballTicket.  # noqa: E501
        :type: str
        """

        self._ticket_type = ticket_type

    @property
    def ticket_link(self):
        """Gets the ticket_link of this BaseballTicket.  # noqa: E501


        :return: The ticket_link of this BaseballTicket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_link

    @ticket_link.setter
    def ticket_link(self, ticket_link):
        """Sets the ticket_link of this BaseballTicket.


        :param ticket_link: The ticket_link of this BaseballTicket.  # noqa: E501
        :type: str
        """

        self._ticket_link = ticket_link

    @property
    def schedule_id(self):
        """Gets the schedule_id of this BaseballTicket.  # noqa: E501


        :return: The schedule_id of this BaseballTicket.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this BaseballTicket.


        :param schedule_id: The schedule_id of this BaseballTicket.  # noqa: E501
        :type: int
        """

        self._schedule_id = schedule_id

    @property
    def on_sale_end_date(self):
        """Gets the on_sale_end_date of this BaseballTicket.  # noqa: E501


        :return: The on_sale_end_date of this BaseballTicket.  # noqa: E501
        :rtype: datetime
        """
        return self._on_sale_end_date

    @on_sale_end_date.setter
    def on_sale_end_date(self, on_sale_end_date):
        """Sets the on_sale_end_date of this BaseballTicket.


        :param on_sale_end_date: The on_sale_end_date of this BaseballTicket.  # noqa: E501
        :type: datetime
        """

        self._on_sale_end_date = on_sale_end_date

    @property
    def home_ticket_link(self):
        """Gets the home_ticket_link of this BaseballTicket.  # noqa: E501


        :return: The home_ticket_link of this BaseballTicket.  # noqa: E501
        :rtype: str
        """
        return self._home_ticket_link

    @home_ticket_link.setter
    def home_ticket_link(self, home_ticket_link):
        """Sets the home_ticket_link of this BaseballTicket.


        :param home_ticket_link: The home_ticket_link of this BaseballTicket.  # noqa: E501
        :type: str
        """

        self._home_ticket_link = home_ticket_link

    @property
    def away_ticket_link(self):
        """Gets the away_ticket_link of this BaseballTicket.  # noqa: E501


        :return: The away_ticket_link of this BaseballTicket.  # noqa: E501
        :rtype: str
        """
        return self._away_ticket_link

    @away_ticket_link.setter
    def away_ticket_link(self, away_ticket_link):
        """Sets the away_ticket_link of this BaseballTicket.


        :param away_ticket_link: The away_ticket_link of this BaseballTicket.  # noqa: E501
        :type: str
        """

        self._away_ticket_link = away_ticket_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballTicket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballTicket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
