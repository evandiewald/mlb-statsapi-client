# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class About(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'at_bat_index': 'int',
        'half_inning': 'str',
        'is_top_inning': 'bool',
        'inning': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'is_complete': 'bool',
        'is_scoring_play': 'bool',
        'has_review': 'bool',
        'has_out': 'bool',
        'captivating_index': 'int'
    }

    attribute_map = {
        'copyright': 'copyright',
        'at_bat_index': 'atBatIndex',
        'half_inning': 'halfInning',
        'is_top_inning': 'isTopInning',
        'inning': 'inning',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'is_complete': 'isComplete',
        'is_scoring_play': 'isScoringPlay',
        'has_review': 'hasReview',
        'has_out': 'hasOut',
        'captivating_index': 'captivatingIndex'
    }

    def __init__(self, copyright=None, at_bat_index=None, half_inning=None, is_top_inning=None, inning=None, start_time=None, end_time=None, is_complete=None, is_scoring_play=None, has_review=None, has_out=None, captivating_index=None):  # noqa: E501
        """About - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._at_bat_index = None
        self._half_inning = None
        self._is_top_inning = None
        self._inning = None
        self._start_time = None
        self._end_time = None
        self._is_complete = None
        self._is_scoring_play = None
        self._has_review = None
        self._has_out = None
        self._captivating_index = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if at_bat_index is not None:
            self.at_bat_index = at_bat_index
        if half_inning is not None:
            self.half_inning = half_inning
        if is_top_inning is not None:
            self.is_top_inning = is_top_inning
        if inning is not None:
            self.inning = inning
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if is_complete is not None:
            self.is_complete = is_complete
        if is_scoring_play is not None:
            self.is_scoring_play = is_scoring_play
        if has_review is not None:
            self.has_review = has_review
        if has_out is not None:
            self.has_out = has_out
        if captivating_index is not None:
            self.captivating_index = captivating_index

    @property
    def copyright(self):
        """Gets the copyright of this About.  # noqa: E501


        :return: The copyright of this About.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this About.


        :param copyright: The copyright of this About.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def at_bat_index(self):
        """Gets the at_bat_index of this About.  # noqa: E501


        :return: The at_bat_index of this About.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_index

    @at_bat_index.setter
    def at_bat_index(self, at_bat_index):
        """Sets the at_bat_index of this About.


        :param at_bat_index: The at_bat_index of this About.  # noqa: E501
        :type: int
        """

        self._at_bat_index = at_bat_index

    @property
    def half_inning(self):
        """Gets the half_inning of this About.  # noqa: E501


        :return: The half_inning of this About.  # noqa: E501
        :rtype: str
        """
        return self._half_inning

    @half_inning.setter
    def half_inning(self, half_inning):
        """Sets the half_inning of this About.


        :param half_inning: The half_inning of this About.  # noqa: E501
        :type: str
        """

        self._half_inning = half_inning

    @property
    def is_top_inning(self):
        """Gets the is_top_inning of this About.  # noqa: E501


        :return: The is_top_inning of this About.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_inning

    @is_top_inning.setter
    def is_top_inning(self, is_top_inning):
        """Sets the is_top_inning of this About.


        :param is_top_inning: The is_top_inning of this About.  # noqa: E501
        :type: bool
        """

        self._is_top_inning = is_top_inning

    @property
    def inning(self):
        """Gets the inning of this About.  # noqa: E501


        :return: The inning of this About.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this About.


        :param inning: The inning of this About.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def start_time(self):
        """Gets the start_time of this About.  # noqa: E501


        :return: The start_time of this About.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this About.


        :param start_time: The start_time of this About.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this About.  # noqa: E501


        :return: The end_time of this About.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this About.


        :param end_time: The end_time of this About.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def is_complete(self):
        """Gets the is_complete of this About.  # noqa: E501


        :return: The is_complete of this About.  # noqa: E501
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this About.


        :param is_complete: The is_complete of this About.  # noqa: E501
        :type: bool
        """

        self._is_complete = is_complete

    @property
    def is_scoring_play(self):
        """Gets the is_scoring_play of this About.  # noqa: E501


        :return: The is_scoring_play of this About.  # noqa: E501
        :rtype: bool
        """
        return self._is_scoring_play

    @is_scoring_play.setter
    def is_scoring_play(self, is_scoring_play):
        """Sets the is_scoring_play of this About.


        :param is_scoring_play: The is_scoring_play of this About.  # noqa: E501
        :type: bool
        """

        self._is_scoring_play = is_scoring_play

    @property
    def has_review(self):
        """Gets the has_review of this About.  # noqa: E501


        :return: The has_review of this About.  # noqa: E501
        :rtype: bool
        """
        return self._has_review

    @has_review.setter
    def has_review(self, has_review):
        """Sets the has_review of this About.


        :param has_review: The has_review of this About.  # noqa: E501
        :type: bool
        """

        self._has_review = has_review

    @property
    def has_out(self):
        """Gets the has_out of this About.  # noqa: E501

        Does the play include an out?  # noqa: E501

        :return: The has_out of this About.  # noqa: E501
        :rtype: bool
        """
        return self._has_out

    @has_out.setter
    def has_out(self, has_out):
        """Sets the has_out of this About.

        Does the play include an out?  # noqa: E501

        :param has_out: The has_out of this About.  # noqa: E501
        :type: bool
        """

        self._has_out = has_out

    @property
    def captivating_index(self):
        """Gets the captivating_index of this About.  # noqa: E501


        :return: The captivating_index of this About.  # noqa: E501
        :rtype: int
        """
        return self._captivating_index

    @captivating_index.setter
    def captivating_index(self, captivating_index):
        """Sets the captivating_index of this About.


        :param captivating_index: The captivating_index of this About.  # noqa: E501
        :type: int
        """

        self._captivating_index = captivating_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(About, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, About):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
