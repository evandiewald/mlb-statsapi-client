# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PitchCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "UNKNOWN"
    BALL = "BALL"
    BLOCKED_BALL = "BLOCKED_BALL"
    INTENT_BALL = "INTENT_BALL"
    PITCHOUT = "PITCHOUT"
    HIT_BY_PITCH = "HIT_BY_PITCH"
    AUTOMATIC_BALL = "AUTOMATIC_BALL"
    CALLED_STRIKE = "CALLED_STRIKE"
    SWINGING_STRIKE = "SWINGING_STRIKE"
    SWINGING_STRIKE_BLOCKED = "SWINGING_STRIKE_BLOCKED"
    FOUL = "FOUL"
    FOUL_TIP = "FOUL_TIP"
    UNKNOWN_STRIKE = "UNKNOWN_STRIKE"
    MISSED_BUNT = "MISSED_BUNT"
    FOUL_BUNT = "FOUL_BUNT"
    BUNT_FOUL_TIP = "BUNT_FOUL_TIP"
    SWINGING_PITCHOUT = "SWINGING_PITCHOUT"
    FOUL_PITCHOUT = "FOUL_PITCHOUT"
    AUTOMATIC_STRIKE = "AUTOMATIC_STRIKE"
    HIT_INTO_PLAY = "HIT_INTO_PLAY"
    HIT_INTO_PLAY_NO_OUT = "HIT_INTO_PLAY_NO_OUT"
    HIT_INTO_PLAY_SCORE = "HIT_INTO_PLAY_SCORE"
    PITCHOUT_HIT_INTO_PLAY = "PITCHOUT_HIT_INTO_PLAY"
    PITCHOUT_HIT_INTO_PLAY_NO_OUT = "PITCHOUT_HIT_INTO_PLAY_NO_OUT"
    PITCHOUT_HIT_INTO_PLAY_SCORE = "PITCHOUT_HIT_INTO_PLAY_SCORE"
    AUTOMATIC_BALL_INTENTIONAL = "AUTOMATIC_BALL_INTENTIONAL"
    AUTOMATIC_BALL_PITCHER_PITCH_TIMER_VIOLATION = "AUTOMATIC_BALL_PITCHER_PITCH_TIMER_VIOLATION"
    AUTOMATIC_BALL_CATCHER_PITCH_TIMER_VIOLATION = "AUTOMATIC_BALL_CATCHER_PITCH_TIMER_VIOLATION"
    AUTOMATIC_BALL_DEF_SHIFT_VIOLATION = "AUTOMATIC_BALL_DEF_SHIFT_VIOLATION"
    AUTOMATIC_STRIKE_PITCH_TIMER_VIOLATION = "AUTOMATIC_STRIKE_PITCH_TIMER_VIOLATION"
    AUTOMATIC_STRIKE_BATTER_TIMEOUT_VIOLATION = "AUTOMATIC_STRIKE_BATTER_TIMEOUT_VIOLATION"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """PitchCode - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitchCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitchCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
