# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PitchTrajectoryDataRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'trajectory_polynomial_x': 'list[float]',
        'trajectory_polynomial_y': 'list[float]',
        'trajectory_polynomial_z': 'list[float]',
        'valid_time_interval': 'list[float]',
        'measured_time_interval': 'list[float]',
        'reduced_confidence': 'list[str]',
        'horizontal_break': 'float',
        'vertical_break_induced': 'float',
        'zone_speed': 'float',
        'zone_time': 'float',
        'vertical_approach_angle': 'float',
        'effective_velocity': 'float',
        'horizontal_approach_angle': 'float',
        'vertical_break': 'float',
        'location': 'CoordinatesRestObject',
        'pfx_data': 'PitchFxDataRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'trajectory_polynomial_x': 'trajectoryPolynomialX',
        'trajectory_polynomial_y': 'trajectoryPolynomialY',
        'trajectory_polynomial_z': 'trajectoryPolynomialZ',
        'valid_time_interval': 'validTimeInterval',
        'measured_time_interval': 'measuredTimeInterval',
        'reduced_confidence': 'reducedConfidence',
        'horizontal_break': 'horizontalBreak',
        'vertical_break_induced': 'verticalBreakInduced',
        'zone_speed': 'zoneSpeed',
        'zone_time': 'zoneTime',
        'vertical_approach_angle': 'verticalApproachAngle',
        'effective_velocity': 'effectiveVelocity',
        'horizontal_approach_angle': 'horizontalApproachAngle',
        'vertical_break': 'verticalBreak',
        'location': 'location',
        'pfx_data': 'pfxData'
    }

    def __init__(self, copyright=None, trajectory_polynomial_x=None, trajectory_polynomial_y=None, trajectory_polynomial_z=None, valid_time_interval=None, measured_time_interval=None, reduced_confidence=None, horizontal_break=None, vertical_break_induced=None, zone_speed=None, zone_time=None, vertical_approach_angle=None, effective_velocity=None, horizontal_approach_angle=None, vertical_break=None, location=None, pfx_data=None):  # noqa: E501
        """PitchTrajectoryDataRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._trajectory_polynomial_x = None
        self._trajectory_polynomial_y = None
        self._trajectory_polynomial_z = None
        self._valid_time_interval = None
        self._measured_time_interval = None
        self._reduced_confidence = None
        self._horizontal_break = None
        self._vertical_break_induced = None
        self._zone_speed = None
        self._zone_time = None
        self._vertical_approach_angle = None
        self._effective_velocity = None
        self._horizontal_approach_angle = None
        self._vertical_break = None
        self._location = None
        self._pfx_data = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if trajectory_polynomial_x is not None:
            self.trajectory_polynomial_x = trajectory_polynomial_x
        if trajectory_polynomial_y is not None:
            self.trajectory_polynomial_y = trajectory_polynomial_y
        if trajectory_polynomial_z is not None:
            self.trajectory_polynomial_z = trajectory_polynomial_z
        if valid_time_interval is not None:
            self.valid_time_interval = valid_time_interval
        if measured_time_interval is not None:
            self.measured_time_interval = measured_time_interval
        if reduced_confidence is not None:
            self.reduced_confidence = reduced_confidence
        if horizontal_break is not None:
            self.horizontal_break = horizontal_break
        if vertical_break_induced is not None:
            self.vertical_break_induced = vertical_break_induced
        if zone_speed is not None:
            self.zone_speed = zone_speed
        if zone_time is not None:
            self.zone_time = zone_time
        if vertical_approach_angle is not None:
            self.vertical_approach_angle = vertical_approach_angle
        if effective_velocity is not None:
            self.effective_velocity = effective_velocity
        if horizontal_approach_angle is not None:
            self.horizontal_approach_angle = horizontal_approach_angle
        if vertical_break is not None:
            self.vertical_break = vertical_break
        if location is not None:
            self.location = location
        if pfx_data is not None:
            self.pfx_data = pfx_data

    @property
    def copyright(self):
        """Gets the copyright of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The copyright of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PitchTrajectoryDataRestObject.


        :param copyright: The copyright of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def trajectory_polynomial_x(self):
        """Gets the trajectory_polynomial_x of this PitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing x position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_x of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_x

    @trajectory_polynomial_x.setter
    def trajectory_polynomial_x(self, trajectory_polynomial_x):
        """Sets the trajectory_polynomial_x of this PitchTrajectoryDataRestObject.

        Polynomial describing x position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_x: The trajectory_polynomial_x of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_x = trajectory_polynomial_x

    @property
    def trajectory_polynomial_y(self):
        """Gets the trajectory_polynomial_y of this PitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing y position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_y of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_y

    @trajectory_polynomial_y.setter
    def trajectory_polynomial_y(self, trajectory_polynomial_y):
        """Sets the trajectory_polynomial_y of this PitchTrajectoryDataRestObject.

        Polynomial describing y position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_y: The trajectory_polynomial_y of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_y = trajectory_polynomial_y

    @property
    def trajectory_polynomial_z(self):
        """Gets the trajectory_polynomial_z of this PitchTrajectoryDataRestObject.  # noqa: E501

        Polynomial describing z position of the ball's pitch trajectory.  # noqa: E501

        :return: The trajectory_polynomial_z of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._trajectory_polynomial_z

    @trajectory_polynomial_z.setter
    def trajectory_polynomial_z(self, trajectory_polynomial_z):
        """Sets the trajectory_polynomial_z of this PitchTrajectoryDataRestObject.

        Polynomial describing z position of the ball's pitch trajectory.  # noqa: E501

        :param trajectory_polynomial_z: The trajectory_polynomial_z of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._trajectory_polynomial_z = trajectory_polynomial_z

    @property
    def valid_time_interval(self):
        """Gets the valid_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The valid_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._valid_time_interval

    @valid_time_interval.setter
    def valid_time_interval(self, valid_time_interval):
        """Sets the valid_time_interval of this PitchTrajectoryDataRestObject.


        :param valid_time_interval: The valid_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._valid_time_interval = valid_time_interval

    @property
    def measured_time_interval(self):
        """Gets the measured_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The measured_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._measured_time_interval

    @measured_time_interval.setter
    def measured_time_interval(self, measured_time_interval):
        """Sets the measured_time_interval of this PitchTrajectoryDataRestObject.


        :param measured_time_interval: The measured_time_interval of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[float]
        """

        self._measured_time_interval = measured_time_interval

    @property
    def reduced_confidence(self):
        """Gets the reduced_confidence of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The reduced_confidence of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._reduced_confidence

    @reduced_confidence.setter
    def reduced_confidence(self, reduced_confidence):
        """Sets the reduced_confidence of this PitchTrajectoryDataRestObject.


        :param reduced_confidence: The reduced_confidence of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: list[str]
        """

        self._reduced_confidence = reduced_confidence

    @property
    def horizontal_break(self):
        """Gets the horizontal_break of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The horizontal_break of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._horizontal_break

    @horizontal_break.setter
    def horizontal_break(self, horizontal_break):
        """Sets the horizontal_break of this PitchTrajectoryDataRestObject.


        :param horizontal_break: The horizontal_break of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._horizontal_break = horizontal_break

    @property
    def vertical_break_induced(self):
        """Gets the vertical_break_induced of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The vertical_break_induced of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._vertical_break_induced

    @vertical_break_induced.setter
    def vertical_break_induced(self, vertical_break_induced):
        """Sets the vertical_break_induced of this PitchTrajectoryDataRestObject.


        :param vertical_break_induced: The vertical_break_induced of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._vertical_break_induced = vertical_break_induced

    @property
    def zone_speed(self):
        """Gets the zone_speed of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The zone_speed of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._zone_speed

    @zone_speed.setter
    def zone_speed(self, zone_speed):
        """Sets the zone_speed of this PitchTrajectoryDataRestObject.


        :param zone_speed: The zone_speed of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._zone_speed = zone_speed

    @property
    def zone_time(self):
        """Gets the zone_time of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The zone_time of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._zone_time

    @zone_time.setter
    def zone_time(self, zone_time):
        """Sets the zone_time of this PitchTrajectoryDataRestObject.


        :param zone_time: The zone_time of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._zone_time = zone_time

    @property
    def vertical_approach_angle(self):
        """Gets the vertical_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The vertical_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._vertical_approach_angle

    @vertical_approach_angle.setter
    def vertical_approach_angle(self, vertical_approach_angle):
        """Sets the vertical_approach_angle of this PitchTrajectoryDataRestObject.


        :param vertical_approach_angle: The vertical_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._vertical_approach_angle = vertical_approach_angle

    @property
    def effective_velocity(self):
        """Gets the effective_velocity of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The effective_velocity of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._effective_velocity

    @effective_velocity.setter
    def effective_velocity(self, effective_velocity):
        """Sets the effective_velocity of this PitchTrajectoryDataRestObject.


        :param effective_velocity: The effective_velocity of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._effective_velocity = effective_velocity

    @property
    def horizontal_approach_angle(self):
        """Gets the horizontal_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The horizontal_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._horizontal_approach_angle

    @horizontal_approach_angle.setter
    def horizontal_approach_angle(self, horizontal_approach_angle):
        """Sets the horizontal_approach_angle of this PitchTrajectoryDataRestObject.


        :param horizontal_approach_angle: The horizontal_approach_angle of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._horizontal_approach_angle = horizontal_approach_angle

    @property
    def vertical_break(self):
        """Gets the vertical_break of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The vertical_break of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: float
        """
        return self._vertical_break

    @vertical_break.setter
    def vertical_break(self, vertical_break):
        """Sets the vertical_break of this PitchTrajectoryDataRestObject.


        :param vertical_break: The vertical_break of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: float
        """

        self._vertical_break = vertical_break

    @property
    def location(self):
        """Gets the location of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The location of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: CoordinatesRestObject
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PitchTrajectoryDataRestObject.


        :param location: The location of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: CoordinatesRestObject
        """

        self._location = location

    @property
    def pfx_data(self):
        """Gets the pfx_data of this PitchTrajectoryDataRestObject.  # noqa: E501


        :return: The pfx_data of this PitchTrajectoryDataRestObject.  # noqa: E501
        :rtype: PitchFxDataRestObject
        """
        return self._pfx_data

    @pfx_data.setter
    def pfx_data(self, pfx_data):
        """Sets the pfx_data of this PitchTrajectoryDataRestObject.


        :param pfx_data: The pfx_data of this PitchTrajectoryDataRestObject.  # noqa: E501
        :type: PitchFxDataRestObject
        """

        self._pfx_data = pfx_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitchTrajectoryDataRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitchTrajectoryDataRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
