# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballReview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'review_type': 'str',
        'review_overturned': 'bool',
        'challenge_team_id': 'int',
        'review_in_progress': 'bool'
    }

    attribute_map = {
        'review_type': 'reviewType',
        'review_overturned': 'reviewOverturned',
        'challenge_team_id': 'challengeTeamId',
        'review_in_progress': 'reviewInProgress'
    }

    def __init__(self, review_type=None, review_overturned=None, challenge_team_id=None, review_in_progress=None):  # noqa: E501
        """BaseballReview - a model defined in Swagger"""  # noqa: E501
        self._review_type = None
        self._review_overturned = None
        self._challenge_team_id = None
        self._review_in_progress = None
        self.discriminator = None
        if review_type is not None:
            self.review_type = review_type
        if review_overturned is not None:
            self.review_overturned = review_overturned
        if challenge_team_id is not None:
            self.challenge_team_id = challenge_team_id
        if review_in_progress is not None:
            self.review_in_progress = review_in_progress

    @property
    def review_type(self):
        """Gets the review_type of this BaseballReview.  # noqa: E501


        :return: The review_type of this BaseballReview.  # noqa: E501
        :rtype: str
        """
        return self._review_type

    @review_type.setter
    def review_type(self, review_type):
        """Sets the review_type of this BaseballReview.


        :param review_type: The review_type of this BaseballReview.  # noqa: E501
        :type: str
        """

        self._review_type = review_type

    @property
    def review_overturned(self):
        """Gets the review_overturned of this BaseballReview.  # noqa: E501


        :return: The review_overturned of this BaseballReview.  # noqa: E501
        :rtype: bool
        """
        return self._review_overturned

    @review_overturned.setter
    def review_overturned(self, review_overturned):
        """Sets the review_overturned of this BaseballReview.


        :param review_overturned: The review_overturned of this BaseballReview.  # noqa: E501
        :type: bool
        """

        self._review_overturned = review_overturned

    @property
    def challenge_team_id(self):
        """Gets the challenge_team_id of this BaseballReview.  # noqa: E501


        :return: The challenge_team_id of this BaseballReview.  # noqa: E501
        :rtype: int
        """
        return self._challenge_team_id

    @challenge_team_id.setter
    def challenge_team_id(self, challenge_team_id):
        """Sets the challenge_team_id of this BaseballReview.


        :param challenge_team_id: The challenge_team_id of this BaseballReview.  # noqa: E501
        :type: int
        """

        self._challenge_team_id = challenge_team_id

    @property
    def review_in_progress(self):
        """Gets the review_in_progress of this BaseballReview.  # noqa: E501


        :return: The review_in_progress of this BaseballReview.  # noqa: E501
        :rtype: bool
        """
        return self._review_in_progress

    @review_in_progress.setter
    def review_in_progress(self, review_in_progress):
        """Sets the review_in_progress of this BaseballReview.


        :param review_in_progress: The review_in_progress of this BaseballReview.  # noqa: E501
        :type: bool
        """

        self._review_in_progress = review_in_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballReview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballReview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
