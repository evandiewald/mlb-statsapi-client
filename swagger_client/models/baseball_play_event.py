# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPlayEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balls': 'int',
        'strikes': 'int',
        'outs': 'int',
        'runner_on1b': 'bool',
        'runner_on2b': 'bool',
        'runner_on3b': 'bool',
        'inning': 'int',
        'is_top_inning': 'bool',
        'pre_balls': 'int',
        'pre_strikes': 'int',
        'pre_outs': 'int',
        'post_balls': 'int',
        'post_strikes': 'int',
        'post_outs': 'int',
        'post_runner_on1b': 'bool',
        'post_runner_on2b': 'bool',
        'post_runner_on3b': 'bool',
        'pitch_number': 'int',
        'pickoff_number': 'int',
        'at_bat_number': 'int',
        'event_type_enum': 'EventType',
        'description': 'str',
        'description_map': 'dict(str, str)',
        'pitch_call': 'DynamicLookupEnum',
        'pitch_type': 'DynamicLookupEnum',
        'pitch': 'BaseballPitch',
        'hit': 'BaseballHit',
        'index': 'int',
        'pfx_id': 'str',
        'play_id': 'str',
        'action_play_id': 'str',
        'is_pitch': 'bool',
        'is_in_play': 'bool',
        'is_strike': 'bool',
        'is_ball': 'bool',
        'event': 'str',
        'event_map': 'dict(str, str)',
        'code': 'str',
        'type': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'player': 'BaseballPerson',
        'umpire': 'BaseballPerson',
        'replaced_player': 'BaseballPerson',
        'position': 'BaseballPosition',
        'batting_order': 'str',
        'scored': 'bool',
        'is_out': 'bool',
        'away_score': 'int',
        'home_score': 'int',
        'is_at_bat': 'bool',
        'is_plate_appearance': 'bool',
        'is_base_hit': 'bool',
        'pitch_hand': 'DynamicLookupEnum',
        'bat_side': 'DynamicLookupEnum',
        'has_review': 'bool',
        'review_type': 'str',
        'review_overturned': 'bool',
        'review_in_progress': 'bool',
        'challenge_team_id': 'int',
        'reviews': 'list[BaseballReview]',
        'from_catcher': 'bool',
        'injury_type': 'str',
        'players': 'BaseballLinescore',
        'defensive_alignment_id': 'str',
        'offensive_alignment_id': 'str',
        'offensive_lineup_id': 'str',
        'defensive_lineup_id': 'str',
        'umpires': 'list[Official]',
        'credits': 'list[PlayCredit]',
        'base': 'int',
        'is_double_play': 'bool',
        'num_inherited_runners': 'int',
        'disengagement_num': 'int',
        'violation': 'BaseballViolation',
        'number_of_people_on_base_scoring_position': 'int',
        'descriptions': 'dict(str, str)',
        'events': 'dict(str, str)',
        'runner_going': 'bool',
        'summary': 'BaseballPlayEvent',
        'number_of_people_on_base': 'int',
        'double_play': 'bool',
        'base_running_play': 'bool',
        'substitution': 'bool'
    }

    attribute_map = {
        'balls': 'balls',
        'strikes': 'strikes',
        'outs': 'outs',
        'runner_on1b': 'runnerOn1b',
        'runner_on2b': 'runnerOn2b',
        'runner_on3b': 'runnerOn3b',
        'inning': 'inning',
        'is_top_inning': 'isTopInning',
        'pre_balls': 'preBalls',
        'pre_strikes': 'preStrikes',
        'pre_outs': 'preOuts',
        'post_balls': 'postBalls',
        'post_strikes': 'postStrikes',
        'post_outs': 'postOuts',
        'post_runner_on1b': 'postRunnerOn1b',
        'post_runner_on2b': 'postRunnerOn2b',
        'post_runner_on3b': 'postRunnerOn3b',
        'pitch_number': 'pitchNumber',
        'pickoff_number': 'pickoffNumber',
        'at_bat_number': 'atBatNumber',
        'event_type_enum': 'eventTypeEnum',
        'description': 'description',
        'description_map': 'descriptionMap',
        'pitch_call': 'pitchCall',
        'pitch_type': 'pitchType',
        'pitch': 'pitch',
        'hit': 'hit',
        'index': 'index',
        'pfx_id': 'pfxId',
        'play_id': 'playId',
        'action_play_id': 'actionPlayId',
        'is_pitch': 'isPitch',
        'is_in_play': 'isInPlay',
        'is_strike': 'isStrike',
        'is_ball': 'isBall',
        'event': 'event',
        'event_map': 'eventMap',
        'code': 'code',
        'type': 'type',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'player': 'player',
        'umpire': 'umpire',
        'replaced_player': 'replacedPlayer',
        'position': 'position',
        'batting_order': 'battingOrder',
        'scored': 'scored',
        'is_out': 'isOut',
        'away_score': 'awayScore',
        'home_score': 'homeScore',
        'is_at_bat': 'isAtBat',
        'is_plate_appearance': 'isPlateAppearance',
        'is_base_hit': 'isBaseHit',
        'pitch_hand': 'pitchHand',
        'bat_side': 'batSide',
        'has_review': 'hasReview',
        'review_type': 'reviewType',
        'review_overturned': 'reviewOverturned',
        'review_in_progress': 'reviewInProgress',
        'challenge_team_id': 'challengeTeamId',
        'reviews': 'reviews',
        'from_catcher': 'fromCatcher',
        'injury_type': 'injuryType',
        'players': 'players',
        'defensive_alignment_id': 'defensiveAlignmentId',
        'offensive_alignment_id': 'offensiveAlignmentId',
        'offensive_lineup_id': 'offensiveLineupId',
        'defensive_lineup_id': 'defensiveLineupId',
        'umpires': 'umpires',
        'credits': 'credits',
        'base': 'base',
        'is_double_play': 'isDoublePlay',
        'num_inherited_runners': 'numInheritedRunners',
        'disengagement_num': 'disengagementNum',
        'violation': 'violation',
        'number_of_people_on_base_scoring_position': 'numberOfPeopleOnBaseScoringPosition',
        'descriptions': 'descriptions',
        'events': 'events',
        'runner_going': 'runnerGoing',
        'summary': 'summary',
        'number_of_people_on_base': 'numberOfPeopleOnBase',
        'double_play': 'doublePlay',
        'base_running_play': 'baseRunningPlay',
        'substitution': 'substitution'
    }

    def __init__(self, balls=None, strikes=None, outs=None, runner_on1b=None, runner_on2b=None, runner_on3b=None, inning=None, is_top_inning=None, pre_balls=None, pre_strikes=None, pre_outs=None, post_balls=None, post_strikes=None, post_outs=None, post_runner_on1b=None, post_runner_on2b=None, post_runner_on3b=None, pitch_number=None, pickoff_number=None, at_bat_number=None, event_type_enum=None, description=None, description_map=None, pitch_call=None, pitch_type=None, pitch=None, hit=None, index=None, pfx_id=None, play_id=None, action_play_id=None, is_pitch=None, is_in_play=None, is_strike=None, is_ball=None, event=None, event_map=None, code=None, type=None, start_time=None, end_time=None, player=None, umpire=None, replaced_player=None, position=None, batting_order=None, scored=None, is_out=None, away_score=None, home_score=None, is_at_bat=None, is_plate_appearance=None, is_base_hit=None, pitch_hand=None, bat_side=None, has_review=None, review_type=None, review_overturned=None, review_in_progress=None, challenge_team_id=None, reviews=None, from_catcher=None, injury_type=None, players=None, defensive_alignment_id=None, offensive_alignment_id=None, offensive_lineup_id=None, defensive_lineup_id=None, umpires=None, credits=None, base=None, is_double_play=None, num_inherited_runners=None, disengagement_num=None, violation=None, number_of_people_on_base_scoring_position=None, descriptions=None, events=None, runner_going=None, summary=None, number_of_people_on_base=None, double_play=None, base_running_play=None, substitution=None):  # noqa: E501
        """BaseballPlayEvent - a model defined in Swagger"""  # noqa: E501
        self._balls = None
        self._strikes = None
        self._outs = None
        self._runner_on1b = None
        self._runner_on2b = None
        self._runner_on3b = None
        self._inning = None
        self._is_top_inning = None
        self._pre_balls = None
        self._pre_strikes = None
        self._pre_outs = None
        self._post_balls = None
        self._post_strikes = None
        self._post_outs = None
        self._post_runner_on1b = None
        self._post_runner_on2b = None
        self._post_runner_on3b = None
        self._pitch_number = None
        self._pickoff_number = None
        self._at_bat_number = None
        self._event_type_enum = None
        self._description = None
        self._description_map = None
        self._pitch_call = None
        self._pitch_type = None
        self._pitch = None
        self._hit = None
        self._index = None
        self._pfx_id = None
        self._play_id = None
        self._action_play_id = None
        self._is_pitch = None
        self._is_in_play = None
        self._is_strike = None
        self._is_ball = None
        self._event = None
        self._event_map = None
        self._code = None
        self._type = None
        self._start_time = None
        self._end_time = None
        self._player = None
        self._umpire = None
        self._replaced_player = None
        self._position = None
        self._batting_order = None
        self._scored = None
        self._is_out = None
        self._away_score = None
        self._home_score = None
        self._is_at_bat = None
        self._is_plate_appearance = None
        self._is_base_hit = None
        self._pitch_hand = None
        self._bat_side = None
        self._has_review = None
        self._review_type = None
        self._review_overturned = None
        self._review_in_progress = None
        self._challenge_team_id = None
        self._reviews = None
        self._from_catcher = None
        self._injury_type = None
        self._players = None
        self._defensive_alignment_id = None
        self._offensive_alignment_id = None
        self._offensive_lineup_id = None
        self._defensive_lineup_id = None
        self._umpires = None
        self._credits = None
        self._base = None
        self._is_double_play = None
        self._num_inherited_runners = None
        self._disengagement_num = None
        self._violation = None
        self._number_of_people_on_base_scoring_position = None
        self._descriptions = None
        self._events = None
        self._runner_going = None
        self._summary = None
        self._number_of_people_on_base = None
        self._double_play = None
        self._base_running_play = None
        self._substitution = None
        self.discriminator = None
        if balls is not None:
            self.balls = balls
        if strikes is not None:
            self.strikes = strikes
        if outs is not None:
            self.outs = outs
        if runner_on1b is not None:
            self.runner_on1b = runner_on1b
        if runner_on2b is not None:
            self.runner_on2b = runner_on2b
        if runner_on3b is not None:
            self.runner_on3b = runner_on3b
        if inning is not None:
            self.inning = inning
        if is_top_inning is not None:
            self.is_top_inning = is_top_inning
        if pre_balls is not None:
            self.pre_balls = pre_balls
        if pre_strikes is not None:
            self.pre_strikes = pre_strikes
        if pre_outs is not None:
            self.pre_outs = pre_outs
        if post_balls is not None:
            self.post_balls = post_balls
        if post_strikes is not None:
            self.post_strikes = post_strikes
        if post_outs is not None:
            self.post_outs = post_outs
        if post_runner_on1b is not None:
            self.post_runner_on1b = post_runner_on1b
        if post_runner_on2b is not None:
            self.post_runner_on2b = post_runner_on2b
        if post_runner_on3b is not None:
            self.post_runner_on3b = post_runner_on3b
        if pitch_number is not None:
            self.pitch_number = pitch_number
        if pickoff_number is not None:
            self.pickoff_number = pickoff_number
        if at_bat_number is not None:
            self.at_bat_number = at_bat_number
        if event_type_enum is not None:
            self.event_type_enum = event_type_enum
        if description is not None:
            self.description = description
        if description_map is not None:
            self.description_map = description_map
        if pitch_call is not None:
            self.pitch_call = pitch_call
        if pitch_type is not None:
            self.pitch_type = pitch_type
        if pitch is not None:
            self.pitch = pitch
        if hit is not None:
            self.hit = hit
        if index is not None:
            self.index = index
        if pfx_id is not None:
            self.pfx_id = pfx_id
        if play_id is not None:
            self.play_id = play_id
        if action_play_id is not None:
            self.action_play_id = action_play_id
        if is_pitch is not None:
            self.is_pitch = is_pitch
        if is_in_play is not None:
            self.is_in_play = is_in_play
        if is_strike is not None:
            self.is_strike = is_strike
        if is_ball is not None:
            self.is_ball = is_ball
        if event is not None:
            self.event = event
        if event_map is not None:
            self.event_map = event_map
        if code is not None:
            self.code = code
        if type is not None:
            self.type = type
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if player is not None:
            self.player = player
        if umpire is not None:
            self.umpire = umpire
        if replaced_player is not None:
            self.replaced_player = replaced_player
        if position is not None:
            self.position = position
        if batting_order is not None:
            self.batting_order = batting_order
        if scored is not None:
            self.scored = scored
        if is_out is not None:
            self.is_out = is_out
        if away_score is not None:
            self.away_score = away_score
        if home_score is not None:
            self.home_score = home_score
        if is_at_bat is not None:
            self.is_at_bat = is_at_bat
        if is_plate_appearance is not None:
            self.is_plate_appearance = is_plate_appearance
        if is_base_hit is not None:
            self.is_base_hit = is_base_hit
        if pitch_hand is not None:
            self.pitch_hand = pitch_hand
        if bat_side is not None:
            self.bat_side = bat_side
        if has_review is not None:
            self.has_review = has_review
        if review_type is not None:
            self.review_type = review_type
        if review_overturned is not None:
            self.review_overturned = review_overturned
        if review_in_progress is not None:
            self.review_in_progress = review_in_progress
        if challenge_team_id is not None:
            self.challenge_team_id = challenge_team_id
        if reviews is not None:
            self.reviews = reviews
        if from_catcher is not None:
            self.from_catcher = from_catcher
        if injury_type is not None:
            self.injury_type = injury_type
        if players is not None:
            self.players = players
        if defensive_alignment_id is not None:
            self.defensive_alignment_id = defensive_alignment_id
        if offensive_alignment_id is not None:
            self.offensive_alignment_id = offensive_alignment_id
        if offensive_lineup_id is not None:
            self.offensive_lineup_id = offensive_lineup_id
        if defensive_lineup_id is not None:
            self.defensive_lineup_id = defensive_lineup_id
        if umpires is not None:
            self.umpires = umpires
        if credits is not None:
            self.credits = credits
        if base is not None:
            self.base = base
        if is_double_play is not None:
            self.is_double_play = is_double_play
        if num_inherited_runners is not None:
            self.num_inherited_runners = num_inherited_runners
        if disengagement_num is not None:
            self.disengagement_num = disengagement_num
        if violation is not None:
            self.violation = violation
        if number_of_people_on_base_scoring_position is not None:
            self.number_of_people_on_base_scoring_position = number_of_people_on_base_scoring_position
        if descriptions is not None:
            self.descriptions = descriptions
        if events is not None:
            self.events = events
        if runner_going is not None:
            self.runner_going = runner_going
        if summary is not None:
            self.summary = summary
        if number_of_people_on_base is not None:
            self.number_of_people_on_base = number_of_people_on_base
        if double_play is not None:
            self.double_play = double_play
        if base_running_play is not None:
            self.base_running_play = base_running_play
        if substitution is not None:
            self.substitution = substitution

    @property
    def balls(self):
        """Gets the balls of this BaseballPlayEvent.  # noqa: E501


        :return: The balls of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this BaseballPlayEvent.


        :param balls: The balls of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._balls = balls

    @property
    def strikes(self):
        """Gets the strikes of this BaseballPlayEvent.  # noqa: E501


        :return: The strikes of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this BaseballPlayEvent.


        :param strikes: The strikes of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._strikes = strikes

    @property
    def outs(self):
        """Gets the outs of this BaseballPlayEvent.  # noqa: E501


        :return: The outs of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this BaseballPlayEvent.


        :param outs: The outs of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def runner_on1b(self):
        """Gets the runner_on1b of this BaseballPlayEvent.  # noqa: E501


        :return: The runner_on1b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on1b

    @runner_on1b.setter
    def runner_on1b(self, runner_on1b):
        """Sets the runner_on1b of this BaseballPlayEvent.


        :param runner_on1b: The runner_on1b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._runner_on1b = runner_on1b

    @property
    def runner_on2b(self):
        """Gets the runner_on2b of this BaseballPlayEvent.  # noqa: E501


        :return: The runner_on2b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on2b

    @runner_on2b.setter
    def runner_on2b(self, runner_on2b):
        """Sets the runner_on2b of this BaseballPlayEvent.


        :param runner_on2b: The runner_on2b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._runner_on2b = runner_on2b

    @property
    def runner_on3b(self):
        """Gets the runner_on3b of this BaseballPlayEvent.  # noqa: E501


        :return: The runner_on3b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._runner_on3b

    @runner_on3b.setter
    def runner_on3b(self, runner_on3b):
        """Sets the runner_on3b of this BaseballPlayEvent.


        :param runner_on3b: The runner_on3b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._runner_on3b = runner_on3b

    @property
    def inning(self):
        """Gets the inning of this BaseballPlayEvent.  # noqa: E501


        :return: The inning of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this BaseballPlayEvent.


        :param inning: The inning of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def is_top_inning(self):
        """Gets the is_top_inning of this BaseballPlayEvent.  # noqa: E501


        :return: The is_top_inning of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_inning

    @is_top_inning.setter
    def is_top_inning(self, is_top_inning):
        """Sets the is_top_inning of this BaseballPlayEvent.


        :param is_top_inning: The is_top_inning of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_top_inning = is_top_inning

    @property
    def pre_balls(self):
        """Gets the pre_balls of this BaseballPlayEvent.  # noqa: E501


        :return: The pre_balls of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._pre_balls

    @pre_balls.setter
    def pre_balls(self, pre_balls):
        """Sets the pre_balls of this BaseballPlayEvent.


        :param pre_balls: The pre_balls of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._pre_balls = pre_balls

    @property
    def pre_strikes(self):
        """Gets the pre_strikes of this BaseballPlayEvent.  # noqa: E501


        :return: The pre_strikes of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._pre_strikes

    @pre_strikes.setter
    def pre_strikes(self, pre_strikes):
        """Sets the pre_strikes of this BaseballPlayEvent.


        :param pre_strikes: The pre_strikes of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._pre_strikes = pre_strikes

    @property
    def pre_outs(self):
        """Gets the pre_outs of this BaseballPlayEvent.  # noqa: E501


        :return: The pre_outs of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._pre_outs

    @pre_outs.setter
    def pre_outs(self, pre_outs):
        """Sets the pre_outs of this BaseballPlayEvent.


        :param pre_outs: The pre_outs of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._pre_outs = pre_outs

    @property
    def post_balls(self):
        """Gets the post_balls of this BaseballPlayEvent.  # noqa: E501


        :return: The post_balls of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._post_balls

    @post_balls.setter
    def post_balls(self, post_balls):
        """Sets the post_balls of this BaseballPlayEvent.


        :param post_balls: The post_balls of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._post_balls = post_balls

    @property
    def post_strikes(self):
        """Gets the post_strikes of this BaseballPlayEvent.  # noqa: E501


        :return: The post_strikes of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._post_strikes

    @post_strikes.setter
    def post_strikes(self, post_strikes):
        """Sets the post_strikes of this BaseballPlayEvent.


        :param post_strikes: The post_strikes of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._post_strikes = post_strikes

    @property
    def post_outs(self):
        """Gets the post_outs of this BaseballPlayEvent.  # noqa: E501


        :return: The post_outs of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._post_outs

    @post_outs.setter
    def post_outs(self, post_outs):
        """Sets the post_outs of this BaseballPlayEvent.


        :param post_outs: The post_outs of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._post_outs = post_outs

    @property
    def post_runner_on1b(self):
        """Gets the post_runner_on1b of this BaseballPlayEvent.  # noqa: E501


        :return: The post_runner_on1b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._post_runner_on1b

    @post_runner_on1b.setter
    def post_runner_on1b(self, post_runner_on1b):
        """Sets the post_runner_on1b of this BaseballPlayEvent.


        :param post_runner_on1b: The post_runner_on1b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._post_runner_on1b = post_runner_on1b

    @property
    def post_runner_on2b(self):
        """Gets the post_runner_on2b of this BaseballPlayEvent.  # noqa: E501


        :return: The post_runner_on2b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._post_runner_on2b

    @post_runner_on2b.setter
    def post_runner_on2b(self, post_runner_on2b):
        """Sets the post_runner_on2b of this BaseballPlayEvent.


        :param post_runner_on2b: The post_runner_on2b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._post_runner_on2b = post_runner_on2b

    @property
    def post_runner_on3b(self):
        """Gets the post_runner_on3b of this BaseballPlayEvent.  # noqa: E501


        :return: The post_runner_on3b of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._post_runner_on3b

    @post_runner_on3b.setter
    def post_runner_on3b(self, post_runner_on3b):
        """Sets the post_runner_on3b of this BaseballPlayEvent.


        :param post_runner_on3b: The post_runner_on3b of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._post_runner_on3b = post_runner_on3b

    @property
    def pitch_number(self):
        """Gets the pitch_number of this BaseballPlayEvent.  # noqa: E501


        :return: The pitch_number of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number

    @pitch_number.setter
    def pitch_number(self, pitch_number):
        """Sets the pitch_number of this BaseballPlayEvent.


        :param pitch_number: The pitch_number of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._pitch_number = pitch_number

    @property
    def pickoff_number(self):
        """Gets the pickoff_number of this BaseballPlayEvent.  # noqa: E501


        :return: The pickoff_number of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._pickoff_number

    @pickoff_number.setter
    def pickoff_number(self, pickoff_number):
        """Sets the pickoff_number of this BaseballPlayEvent.


        :param pickoff_number: The pickoff_number of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._pickoff_number = pickoff_number

    @property
    def at_bat_number(self):
        """Gets the at_bat_number of this BaseballPlayEvent.  # noqa: E501


        :return: The at_bat_number of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_number

    @at_bat_number.setter
    def at_bat_number(self, at_bat_number):
        """Sets the at_bat_number of this BaseballPlayEvent.


        :param at_bat_number: The at_bat_number of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._at_bat_number = at_bat_number

    @property
    def event_type_enum(self):
        """Gets the event_type_enum of this BaseballPlayEvent.  # noqa: E501


        :return: The event_type_enum of this BaseballPlayEvent.  # noqa: E501
        :rtype: EventType
        """
        return self._event_type_enum

    @event_type_enum.setter
    def event_type_enum(self, event_type_enum):
        """Sets the event_type_enum of this BaseballPlayEvent.


        :param event_type_enum: The event_type_enum of this BaseballPlayEvent.  # noqa: E501
        :type: EventType
        """

        self._event_type_enum = event_type_enum

    @property
    def description(self):
        """Gets the description of this BaseballPlayEvent.  # noqa: E501


        :return: The description of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseballPlayEvent.


        :param description: The description of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_map(self):
        """Gets the description_map of this BaseballPlayEvent.  # noqa: E501


        :return: The description_map of this BaseballPlayEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._description_map

    @description_map.setter
    def description_map(self, description_map):
        """Sets the description_map of this BaseballPlayEvent.


        :param description_map: The description_map of this BaseballPlayEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._description_map = description_map

    @property
    def pitch_call(self):
        """Gets the pitch_call of this BaseballPlayEvent.  # noqa: E501


        :return: The pitch_call of this BaseballPlayEvent.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._pitch_call

    @pitch_call.setter
    def pitch_call(self, pitch_call):
        """Sets the pitch_call of this BaseballPlayEvent.


        :param pitch_call: The pitch_call of this BaseballPlayEvent.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._pitch_call = pitch_call

    @property
    def pitch_type(self):
        """Gets the pitch_type of this BaseballPlayEvent.  # noqa: E501


        :return: The pitch_type of this BaseballPlayEvent.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._pitch_type

    @pitch_type.setter
    def pitch_type(self, pitch_type):
        """Sets the pitch_type of this BaseballPlayEvent.


        :param pitch_type: The pitch_type of this BaseballPlayEvent.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._pitch_type = pitch_type

    @property
    def pitch(self):
        """Gets the pitch of this BaseballPlayEvent.  # noqa: E501


        :return: The pitch of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPitch
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this BaseballPlayEvent.


        :param pitch: The pitch of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPitch
        """

        self._pitch = pitch

    @property
    def hit(self):
        """Gets the hit of this BaseballPlayEvent.  # noqa: E501


        :return: The hit of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballHit
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this BaseballPlayEvent.


        :param hit: The hit of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballHit
        """

        self._hit = hit

    @property
    def index(self):
        """Gets the index of this BaseballPlayEvent.  # noqa: E501


        :return: The index of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this BaseballPlayEvent.


        :param index: The index of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def pfx_id(self):
        """Gets the pfx_id of this BaseballPlayEvent.  # noqa: E501


        :return: The pfx_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._pfx_id

    @pfx_id.setter
    def pfx_id(self, pfx_id):
        """Sets the pfx_id of this BaseballPlayEvent.


        :param pfx_id: The pfx_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._pfx_id = pfx_id

    @property
    def play_id(self):
        """Gets the play_id of this BaseballPlayEvent.  # noqa: E501


        :return: The play_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this BaseballPlayEvent.


        :param play_id: The play_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._play_id = play_id

    @property
    def action_play_id(self):
        """Gets the action_play_id of this BaseballPlayEvent.  # noqa: E501


        :return: The action_play_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._action_play_id

    @action_play_id.setter
    def action_play_id(self, action_play_id):
        """Sets the action_play_id of this BaseballPlayEvent.


        :param action_play_id: The action_play_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._action_play_id = action_play_id

    @property
    def is_pitch(self):
        """Gets the is_pitch of this BaseballPlayEvent.  # noqa: E501


        :return: The is_pitch of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_pitch

    @is_pitch.setter
    def is_pitch(self, is_pitch):
        """Sets the is_pitch of this BaseballPlayEvent.


        :param is_pitch: The is_pitch of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_pitch = is_pitch

    @property
    def is_in_play(self):
        """Gets the is_in_play of this BaseballPlayEvent.  # noqa: E501


        :return: The is_in_play of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_play

    @is_in_play.setter
    def is_in_play(self, is_in_play):
        """Sets the is_in_play of this BaseballPlayEvent.


        :param is_in_play: The is_in_play of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_in_play = is_in_play

    @property
    def is_strike(self):
        """Gets the is_strike of this BaseballPlayEvent.  # noqa: E501


        :return: The is_strike of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_strike

    @is_strike.setter
    def is_strike(self, is_strike):
        """Sets the is_strike of this BaseballPlayEvent.


        :param is_strike: The is_strike of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_strike = is_strike

    @property
    def is_ball(self):
        """Gets the is_ball of this BaseballPlayEvent.  # noqa: E501


        :return: The is_ball of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_ball

    @is_ball.setter
    def is_ball(self, is_ball):
        """Sets the is_ball of this BaseballPlayEvent.


        :param is_ball: The is_ball of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_ball = is_ball

    @property
    def event(self):
        """Gets the event of this BaseballPlayEvent.  # noqa: E501


        :return: The event of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this BaseballPlayEvent.


        :param event: The event of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def event_map(self):
        """Gets the event_map of this BaseballPlayEvent.  # noqa: E501


        :return: The event_map of this BaseballPlayEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._event_map

    @event_map.setter
    def event_map(self, event_map):
        """Sets the event_map of this BaseballPlayEvent.


        :param event_map: The event_map of this BaseballPlayEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._event_map = event_map

    @property
    def code(self):
        """Gets the code of this BaseballPlayEvent.  # noqa: E501


        :return: The code of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BaseballPlayEvent.


        :param code: The code of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def type(self):
        """Gets the type of this BaseballPlayEvent.  # noqa: E501


        :return: The type of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseballPlayEvent.


        :param type: The type of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this BaseballPlayEvent.  # noqa: E501


        :return: The start_time of this BaseballPlayEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BaseballPlayEvent.


        :param start_time: The start_time of this BaseballPlayEvent.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BaseballPlayEvent.  # noqa: E501


        :return: The end_time of this BaseballPlayEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BaseballPlayEvent.


        :param end_time: The end_time of this BaseballPlayEvent.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def player(self):
        """Gets the player of this BaseballPlayEvent.  # noqa: E501


        :return: The player of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this BaseballPlayEvent.


        :param player: The player of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPerson
        """

        self._player = player

    @property
    def umpire(self):
        """Gets the umpire of this BaseballPlayEvent.  # noqa: E501


        :return: The umpire of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._umpire

    @umpire.setter
    def umpire(self, umpire):
        """Sets the umpire of this BaseballPlayEvent.


        :param umpire: The umpire of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPerson
        """

        self._umpire = umpire

    @property
    def replaced_player(self):
        """Gets the replaced_player of this BaseballPlayEvent.  # noqa: E501


        :return: The replaced_player of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._replaced_player

    @replaced_player.setter
    def replaced_player(self, replaced_player):
        """Sets the replaced_player of this BaseballPlayEvent.


        :param replaced_player: The replaced_player of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPerson
        """

        self._replaced_player = replaced_player

    @property
    def position(self):
        """Gets the position of this BaseballPlayEvent.  # noqa: E501


        :return: The position of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BaseballPlayEvent.


        :param position: The position of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPosition
        """

        self._position = position

    @property
    def batting_order(self):
        """Gets the batting_order of this BaseballPlayEvent.  # noqa: E501


        :return: The batting_order of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this BaseballPlayEvent.


        :param batting_order: The batting_order of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._batting_order = batting_order

    @property
    def scored(self):
        """Gets the scored of this BaseballPlayEvent.  # noqa: E501


        :return: The scored of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._scored

    @scored.setter
    def scored(self, scored):
        """Sets the scored of this BaseballPlayEvent.


        :param scored: The scored of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._scored = scored

    @property
    def is_out(self):
        """Gets the is_out of this BaseballPlayEvent.  # noqa: E501


        :return: The is_out of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_out

    @is_out.setter
    def is_out(self, is_out):
        """Sets the is_out of this BaseballPlayEvent.


        :param is_out: The is_out of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_out = is_out

    @property
    def away_score(self):
        """Gets the away_score of this BaseballPlayEvent.  # noqa: E501


        :return: The away_score of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this BaseballPlayEvent.


        :param away_score: The away_score of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    @property
    def home_score(self):
        """Gets the home_score of this BaseballPlayEvent.  # noqa: E501


        :return: The home_score of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this BaseballPlayEvent.


        :param home_score: The home_score of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def is_at_bat(self):
        """Gets the is_at_bat of this BaseballPlayEvent.  # noqa: E501


        :return: The is_at_bat of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_at_bat

    @is_at_bat.setter
    def is_at_bat(self, is_at_bat):
        """Sets the is_at_bat of this BaseballPlayEvent.


        :param is_at_bat: The is_at_bat of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_at_bat = is_at_bat

    @property
    def is_plate_appearance(self):
        """Gets the is_plate_appearance of this BaseballPlayEvent.  # noqa: E501


        :return: The is_plate_appearance of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_plate_appearance

    @is_plate_appearance.setter
    def is_plate_appearance(self, is_plate_appearance):
        """Sets the is_plate_appearance of this BaseballPlayEvent.


        :param is_plate_appearance: The is_plate_appearance of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_plate_appearance = is_plate_appearance

    @property
    def is_base_hit(self):
        """Gets the is_base_hit of this BaseballPlayEvent.  # noqa: E501


        :return: The is_base_hit of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_base_hit

    @is_base_hit.setter
    def is_base_hit(self, is_base_hit):
        """Sets the is_base_hit of this BaseballPlayEvent.


        :param is_base_hit: The is_base_hit of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_base_hit = is_base_hit

    @property
    def pitch_hand(self):
        """Gets the pitch_hand of this BaseballPlayEvent.  # noqa: E501


        :return: The pitch_hand of this BaseballPlayEvent.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._pitch_hand

    @pitch_hand.setter
    def pitch_hand(self, pitch_hand):
        """Sets the pitch_hand of this BaseballPlayEvent.


        :param pitch_hand: The pitch_hand of this BaseballPlayEvent.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._pitch_hand = pitch_hand

    @property
    def bat_side(self):
        """Gets the bat_side of this BaseballPlayEvent.  # noqa: E501


        :return: The bat_side of this BaseballPlayEvent.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._bat_side

    @bat_side.setter
    def bat_side(self, bat_side):
        """Sets the bat_side of this BaseballPlayEvent.


        :param bat_side: The bat_side of this BaseballPlayEvent.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._bat_side = bat_side

    @property
    def has_review(self):
        """Gets the has_review of this BaseballPlayEvent.  # noqa: E501


        :return: The has_review of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._has_review

    @has_review.setter
    def has_review(self, has_review):
        """Sets the has_review of this BaseballPlayEvent.


        :param has_review: The has_review of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._has_review = has_review

    @property
    def review_type(self):
        """Gets the review_type of this BaseballPlayEvent.  # noqa: E501


        :return: The review_type of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._review_type

    @review_type.setter
    def review_type(self, review_type):
        """Sets the review_type of this BaseballPlayEvent.


        :param review_type: The review_type of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._review_type = review_type

    @property
    def review_overturned(self):
        """Gets the review_overturned of this BaseballPlayEvent.  # noqa: E501


        :return: The review_overturned of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._review_overturned

    @review_overturned.setter
    def review_overturned(self, review_overturned):
        """Sets the review_overturned of this BaseballPlayEvent.


        :param review_overturned: The review_overturned of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._review_overturned = review_overturned

    @property
    def review_in_progress(self):
        """Gets the review_in_progress of this BaseballPlayEvent.  # noqa: E501


        :return: The review_in_progress of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._review_in_progress

    @review_in_progress.setter
    def review_in_progress(self, review_in_progress):
        """Sets the review_in_progress of this BaseballPlayEvent.


        :param review_in_progress: The review_in_progress of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._review_in_progress = review_in_progress

    @property
    def challenge_team_id(self):
        """Gets the challenge_team_id of this BaseballPlayEvent.  # noqa: E501


        :return: The challenge_team_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._challenge_team_id

    @challenge_team_id.setter
    def challenge_team_id(self, challenge_team_id):
        """Sets the challenge_team_id of this BaseballPlayEvent.


        :param challenge_team_id: The challenge_team_id of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._challenge_team_id = challenge_team_id

    @property
    def reviews(self):
        """Gets the reviews of this BaseballPlayEvent.  # noqa: E501


        :return: The reviews of this BaseballPlayEvent.  # noqa: E501
        :rtype: list[BaseballReview]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this BaseballPlayEvent.


        :param reviews: The reviews of this BaseballPlayEvent.  # noqa: E501
        :type: list[BaseballReview]
        """

        self._reviews = reviews

    @property
    def from_catcher(self):
        """Gets the from_catcher of this BaseballPlayEvent.  # noqa: E501


        :return: The from_catcher of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._from_catcher

    @from_catcher.setter
    def from_catcher(self, from_catcher):
        """Sets the from_catcher of this BaseballPlayEvent.


        :param from_catcher: The from_catcher of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._from_catcher = from_catcher

    @property
    def injury_type(self):
        """Gets the injury_type of this BaseballPlayEvent.  # noqa: E501


        :return: The injury_type of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._injury_type

    @injury_type.setter
    def injury_type(self, injury_type):
        """Sets the injury_type of this BaseballPlayEvent.


        :param injury_type: The injury_type of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._injury_type = injury_type

    @property
    def players(self):
        """Gets the players of this BaseballPlayEvent.  # noqa: E501


        :return: The players of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballLinescore
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this BaseballPlayEvent.


        :param players: The players of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballLinescore
        """

        self._players = players

    @property
    def defensive_alignment_id(self):
        """Gets the defensive_alignment_id of this BaseballPlayEvent.  # noqa: E501


        :return: The defensive_alignment_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._defensive_alignment_id

    @defensive_alignment_id.setter
    def defensive_alignment_id(self, defensive_alignment_id):
        """Sets the defensive_alignment_id of this BaseballPlayEvent.


        :param defensive_alignment_id: The defensive_alignment_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._defensive_alignment_id = defensive_alignment_id

    @property
    def offensive_alignment_id(self):
        """Gets the offensive_alignment_id of this BaseballPlayEvent.  # noqa: E501


        :return: The offensive_alignment_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._offensive_alignment_id

    @offensive_alignment_id.setter
    def offensive_alignment_id(self, offensive_alignment_id):
        """Sets the offensive_alignment_id of this BaseballPlayEvent.


        :param offensive_alignment_id: The offensive_alignment_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._offensive_alignment_id = offensive_alignment_id

    @property
    def offensive_lineup_id(self):
        """Gets the offensive_lineup_id of this BaseballPlayEvent.  # noqa: E501


        :return: The offensive_lineup_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._offensive_lineup_id

    @offensive_lineup_id.setter
    def offensive_lineup_id(self, offensive_lineup_id):
        """Sets the offensive_lineup_id of this BaseballPlayEvent.


        :param offensive_lineup_id: The offensive_lineup_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._offensive_lineup_id = offensive_lineup_id

    @property
    def defensive_lineup_id(self):
        """Gets the defensive_lineup_id of this BaseballPlayEvent.  # noqa: E501


        :return: The defensive_lineup_id of this BaseballPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._defensive_lineup_id

    @defensive_lineup_id.setter
    def defensive_lineup_id(self, defensive_lineup_id):
        """Sets the defensive_lineup_id of this BaseballPlayEvent.


        :param defensive_lineup_id: The defensive_lineup_id of this BaseballPlayEvent.  # noqa: E501
        :type: str
        """

        self._defensive_lineup_id = defensive_lineup_id

    @property
    def umpires(self):
        """Gets the umpires of this BaseballPlayEvent.  # noqa: E501


        :return: The umpires of this BaseballPlayEvent.  # noqa: E501
        :rtype: list[Official]
        """
        return self._umpires

    @umpires.setter
    def umpires(self, umpires):
        """Sets the umpires of this BaseballPlayEvent.


        :param umpires: The umpires of this BaseballPlayEvent.  # noqa: E501
        :type: list[Official]
        """

        self._umpires = umpires

    @property
    def credits(self):
        """Gets the credits of this BaseballPlayEvent.  # noqa: E501


        :return: The credits of this BaseballPlayEvent.  # noqa: E501
        :rtype: list[PlayCredit]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this BaseballPlayEvent.


        :param credits: The credits of this BaseballPlayEvent.  # noqa: E501
        :type: list[PlayCredit]
        """

        self._credits = credits

    @property
    def base(self):
        """Gets the base of this BaseballPlayEvent.  # noqa: E501


        :return: The base of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this BaseballPlayEvent.


        :param base: The base of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._base = base

    @property
    def is_double_play(self):
        """Gets the is_double_play of this BaseballPlayEvent.  # noqa: E501


        :return: The is_double_play of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_double_play

    @is_double_play.setter
    def is_double_play(self, is_double_play):
        """Sets the is_double_play of this BaseballPlayEvent.


        :param is_double_play: The is_double_play of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._is_double_play = is_double_play

    @property
    def num_inherited_runners(self):
        """Gets the num_inherited_runners of this BaseballPlayEvent.  # noqa: E501


        :return: The num_inherited_runners of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._num_inherited_runners

    @num_inherited_runners.setter
    def num_inherited_runners(self, num_inherited_runners):
        """Sets the num_inherited_runners of this BaseballPlayEvent.


        :param num_inherited_runners: The num_inherited_runners of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._num_inherited_runners = num_inherited_runners

    @property
    def disengagement_num(self):
        """Gets the disengagement_num of this BaseballPlayEvent.  # noqa: E501


        :return: The disengagement_num of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._disengagement_num

    @disengagement_num.setter
    def disengagement_num(self, disengagement_num):
        """Sets the disengagement_num of this BaseballPlayEvent.


        :param disengagement_num: The disengagement_num of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._disengagement_num = disengagement_num

    @property
    def violation(self):
        """Gets the violation of this BaseballPlayEvent.  # noqa: E501


        :return: The violation of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballViolation
        """
        return self._violation

    @violation.setter
    def violation(self, violation):
        """Sets the violation of this BaseballPlayEvent.


        :param violation: The violation of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballViolation
        """

        self._violation = violation

    @property
    def number_of_people_on_base_scoring_position(self):
        """Gets the number_of_people_on_base_scoring_position of this BaseballPlayEvent.  # noqa: E501


        :return: The number_of_people_on_base_scoring_position of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._number_of_people_on_base_scoring_position

    @number_of_people_on_base_scoring_position.setter
    def number_of_people_on_base_scoring_position(self, number_of_people_on_base_scoring_position):
        """Sets the number_of_people_on_base_scoring_position of this BaseballPlayEvent.


        :param number_of_people_on_base_scoring_position: The number_of_people_on_base_scoring_position of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._number_of_people_on_base_scoring_position = number_of_people_on_base_scoring_position

    @property
    def descriptions(self):
        """Gets the descriptions of this BaseballPlayEvent.  # noqa: E501


        :return: The descriptions of this BaseballPlayEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this BaseballPlayEvent.


        :param descriptions: The descriptions of this BaseballPlayEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._descriptions = descriptions

    @property
    def events(self):
        """Gets the events of this BaseballPlayEvent.  # noqa: E501


        :return: The events of this BaseballPlayEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this BaseballPlayEvent.


        :param events: The events of this BaseballPlayEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._events = events

    @property
    def runner_going(self):
        """Gets the runner_going of this BaseballPlayEvent.  # noqa: E501


        :return: The runner_going of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._runner_going

    @runner_going.setter
    def runner_going(self, runner_going):
        """Sets the runner_going of this BaseballPlayEvent.


        :param runner_going: The runner_going of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._runner_going = runner_going

    @property
    def summary(self):
        """Gets the summary of this BaseballPlayEvent.  # noqa: E501


        :return: The summary of this BaseballPlayEvent.  # noqa: E501
        :rtype: BaseballPlayEvent
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BaseballPlayEvent.


        :param summary: The summary of this BaseballPlayEvent.  # noqa: E501
        :type: BaseballPlayEvent
        """

        self._summary = summary

    @property
    def number_of_people_on_base(self):
        """Gets the number_of_people_on_base of this BaseballPlayEvent.  # noqa: E501


        :return: The number_of_people_on_base of this BaseballPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._number_of_people_on_base

    @number_of_people_on_base.setter
    def number_of_people_on_base(self, number_of_people_on_base):
        """Sets the number_of_people_on_base of this BaseballPlayEvent.


        :param number_of_people_on_base: The number_of_people_on_base of this BaseballPlayEvent.  # noqa: E501
        :type: int
        """

        self._number_of_people_on_base = number_of_people_on_base

    @property
    def double_play(self):
        """Gets the double_play of this BaseballPlayEvent.  # noqa: E501


        :return: The double_play of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._double_play

    @double_play.setter
    def double_play(self, double_play):
        """Sets the double_play of this BaseballPlayEvent.


        :param double_play: The double_play of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._double_play = double_play

    @property
    def base_running_play(self):
        """Gets the base_running_play of this BaseballPlayEvent.  # noqa: E501


        :return: The base_running_play of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._base_running_play

    @base_running_play.setter
    def base_running_play(self, base_running_play):
        """Sets the base_running_play of this BaseballPlayEvent.


        :param base_running_play: The base_running_play of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._base_running_play = base_running_play

    @property
    def substitution(self):
        """Gets the substitution of this BaseballPlayEvent.  # noqa: E501


        :return: The substitution of this BaseballPlayEvent.  # noqa: E501
        :rtype: bool
        """
        return self._substitution

    @substitution.setter
    def substitution(self, substitution):
        """Sets the substitution of this BaseballPlayEvent.


        :param substitution: The substitution of this BaseballPlayEvent.  # noqa: E501
        :type: bool
        """

        self._substitution = substitution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPlayEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPlayEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
