# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherPlayRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'hit_segment_actual': 'WeatherHitSegmentActual',
        'hit_segment_calm': 'WeatherHitSegmentCalm',
        'hit_segment_indoor': 'WeatherHitSegmentRestObject',
        'pitch_segment_actual': 'WeatherPitchSegmentActual',
        'pitch_segment_calm': 'WeatherPitchSegmentCalm',
        'pitch_segment_indoor': 'WeatherPitchSegmentRestObject'
    }

    attribute_map = {
        'copyright': 'copyright',
        'hit_segment_actual': 'hitSegmentActual',
        'hit_segment_calm': 'hitSegmentCalm',
        'hit_segment_indoor': 'hitSegmentIndoor',
        'pitch_segment_actual': 'pitchSegmentActual',
        'pitch_segment_calm': 'pitchSegmentCalm',
        'pitch_segment_indoor': 'pitchSegmentIndoor'
    }

    def __init__(self, copyright=None, hit_segment_actual=None, hit_segment_calm=None, hit_segment_indoor=None, pitch_segment_actual=None, pitch_segment_calm=None, pitch_segment_indoor=None):  # noqa: E501
        """WeatherPlayRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._hit_segment_actual = None
        self._hit_segment_calm = None
        self._hit_segment_indoor = None
        self._pitch_segment_actual = None
        self._pitch_segment_calm = None
        self._pitch_segment_indoor = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if hit_segment_actual is not None:
            self.hit_segment_actual = hit_segment_actual
        if hit_segment_calm is not None:
            self.hit_segment_calm = hit_segment_calm
        if hit_segment_indoor is not None:
            self.hit_segment_indoor = hit_segment_indoor
        if pitch_segment_actual is not None:
            self.pitch_segment_actual = pitch_segment_actual
        if pitch_segment_calm is not None:
            self.pitch_segment_calm = pitch_segment_calm
        if pitch_segment_indoor is not None:
            self.pitch_segment_indoor = pitch_segment_indoor

    @property
    def copyright(self):
        """Gets the copyright of this WeatherPlayRestObject.  # noqa: E501


        :return: The copyright of this WeatherPlayRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WeatherPlayRestObject.


        :param copyright: The copyright of this WeatherPlayRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def hit_segment_actual(self):
        """Gets the hit_segment_actual of this WeatherPlayRestObject.  # noqa: E501


        :return: The hit_segment_actual of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherHitSegmentActual
        """
        return self._hit_segment_actual

    @hit_segment_actual.setter
    def hit_segment_actual(self, hit_segment_actual):
        """Sets the hit_segment_actual of this WeatherPlayRestObject.


        :param hit_segment_actual: The hit_segment_actual of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherHitSegmentActual
        """

        self._hit_segment_actual = hit_segment_actual

    @property
    def hit_segment_calm(self):
        """Gets the hit_segment_calm of this WeatherPlayRestObject.  # noqa: E501


        :return: The hit_segment_calm of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherHitSegmentCalm
        """
        return self._hit_segment_calm

    @hit_segment_calm.setter
    def hit_segment_calm(self, hit_segment_calm):
        """Sets the hit_segment_calm of this WeatherPlayRestObject.


        :param hit_segment_calm: The hit_segment_calm of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherHitSegmentCalm
        """

        self._hit_segment_calm = hit_segment_calm

    @property
    def hit_segment_indoor(self):
        """Gets the hit_segment_indoor of this WeatherPlayRestObject.  # noqa: E501


        :return: The hit_segment_indoor of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherHitSegmentRestObject
        """
        return self._hit_segment_indoor

    @hit_segment_indoor.setter
    def hit_segment_indoor(self, hit_segment_indoor):
        """Sets the hit_segment_indoor of this WeatherPlayRestObject.


        :param hit_segment_indoor: The hit_segment_indoor of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherHitSegmentRestObject
        """

        self._hit_segment_indoor = hit_segment_indoor

    @property
    def pitch_segment_actual(self):
        """Gets the pitch_segment_actual of this WeatherPlayRestObject.  # noqa: E501


        :return: The pitch_segment_actual of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherPitchSegmentActual
        """
        return self._pitch_segment_actual

    @pitch_segment_actual.setter
    def pitch_segment_actual(self, pitch_segment_actual):
        """Sets the pitch_segment_actual of this WeatherPlayRestObject.


        :param pitch_segment_actual: The pitch_segment_actual of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherPitchSegmentActual
        """

        self._pitch_segment_actual = pitch_segment_actual

    @property
    def pitch_segment_calm(self):
        """Gets the pitch_segment_calm of this WeatherPlayRestObject.  # noqa: E501


        :return: The pitch_segment_calm of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherPitchSegmentCalm
        """
        return self._pitch_segment_calm

    @pitch_segment_calm.setter
    def pitch_segment_calm(self, pitch_segment_calm):
        """Sets the pitch_segment_calm of this WeatherPlayRestObject.


        :param pitch_segment_calm: The pitch_segment_calm of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherPitchSegmentCalm
        """

        self._pitch_segment_calm = pitch_segment_calm

    @property
    def pitch_segment_indoor(self):
        """Gets the pitch_segment_indoor of this WeatherPlayRestObject.  # noqa: E501


        :return: The pitch_segment_indoor of this WeatherPlayRestObject.  # noqa: E501
        :rtype: WeatherPitchSegmentRestObject
        """
        return self._pitch_segment_indoor

    @pitch_segment_indoor.setter
    def pitch_segment_indoor(self, pitch_segment_indoor):
        """Sets the pitch_segment_indoor of this WeatherPlayRestObject.


        :param pitch_segment_indoor: The pitch_segment_indoor of this WeatherPlayRestObject.  # noqa: E501
        :type: WeatherPitchSegmentRestObject
        """

        self._pitch_segment_indoor = pitch_segment_indoor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherPlayRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherPlayRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
