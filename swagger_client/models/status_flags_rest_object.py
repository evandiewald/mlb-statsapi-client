# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusFlagsRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'is_all_star_game': 'bool',
        'is_cancelled': 'bool',
        'is_classic_double_header': 'bool',
        'is_completed_early': 'bool',
        'is_delayed': 'bool',
        'is_double_header': 'bool',
        'is_non_double_header_tbd': 'bool',
        'is_exhibition': 'bool',
        'is_final': 'bool',
        'is_forfeit': 'bool',
        'is_free_game': 'bool',
        'is_game_over': 'bool',
        'is_instant_replay': 'bool',
        'is_live': 'bool',
        'is_manager_challenge': 'bool',
        'is_postponed': 'bool',
        'is_preview': 'bool',
        'is_split_ticket_double_header': 'bool',
        'is_spring': 'bool',
        'is_suspended': 'bool',
        'is_suspended_on_date': 'bool',
        'is_suspended_resumption_on_date': 'bool',
        'is_tbd': 'bool',
        'is_tie_breaker': 'bool',
        'is_umpire_review': 'bool',
        'is_warmup': 'bool',
        'is_post_season': 'bool',
        'is_post_season_ready': 'bool',
        'is_wild_card': 'bool',
        'is_division_series': 'bool',
        'is_championshop_series': 'bool',
        'is_world_series': 'bool',
        'is_pre_game_delay': 'bool',
        'is_in_game_delay': 'bool'
    }

    attribute_map = {
        'copyright': 'copyright',
        'is_all_star_game': 'isAllStarGame',
        'is_cancelled': 'isCancelled',
        'is_classic_double_header': 'isClassicDoubleHeader',
        'is_completed_early': 'isCompletedEarly',
        'is_delayed': 'isDelayed',
        'is_double_header': 'isDoubleHeader',
        'is_non_double_header_tbd': 'isNonDoubleHeaderTBD',
        'is_exhibition': 'isExhibition',
        'is_final': 'isFinal',
        'is_forfeit': 'isForfeit',
        'is_free_game': 'isFreeGame',
        'is_game_over': 'isGameOver',
        'is_instant_replay': 'isInstantReplay',
        'is_live': 'isLive',
        'is_manager_challenge': 'isManagerChallenge',
        'is_postponed': 'isPostponed',
        'is_preview': 'isPreview',
        'is_split_ticket_double_header': 'isSplitTicketDoubleHeader',
        'is_spring': 'isSpring',
        'is_suspended': 'isSuspended',
        'is_suspended_on_date': 'isSuspendedOnDate',
        'is_suspended_resumption_on_date': 'isSuspendedResumptionOnDate',
        'is_tbd': 'isTBD',
        'is_tie_breaker': 'isTieBreaker',
        'is_umpire_review': 'isUmpireReview',
        'is_warmup': 'isWarmup',
        'is_post_season': 'isPostSeason',
        'is_post_season_ready': 'isPostSeasonReady',
        'is_wild_card': 'isWildCard',
        'is_division_series': 'isDivisionSeries',
        'is_championshop_series': 'isChampionshopSeries',
        'is_world_series': 'isWorldSeries',
        'is_pre_game_delay': 'isPreGameDelay',
        'is_in_game_delay': 'isInGameDelay'
    }

    def __init__(self, copyright=None, is_all_star_game=None, is_cancelled=None, is_classic_double_header=None, is_completed_early=None, is_delayed=None, is_double_header=None, is_non_double_header_tbd=None, is_exhibition=None, is_final=None, is_forfeit=None, is_free_game=None, is_game_over=None, is_instant_replay=None, is_live=None, is_manager_challenge=None, is_postponed=None, is_preview=None, is_split_ticket_double_header=None, is_spring=None, is_suspended=None, is_suspended_on_date=None, is_suspended_resumption_on_date=None, is_tbd=None, is_tie_breaker=None, is_umpire_review=None, is_warmup=None, is_post_season=None, is_post_season_ready=None, is_wild_card=None, is_division_series=None, is_championshop_series=None, is_world_series=None, is_pre_game_delay=None, is_in_game_delay=None):  # noqa: E501
        """StatusFlagsRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._is_all_star_game = None
        self._is_cancelled = None
        self._is_classic_double_header = None
        self._is_completed_early = None
        self._is_delayed = None
        self._is_double_header = None
        self._is_non_double_header_tbd = None
        self._is_exhibition = None
        self._is_final = None
        self._is_forfeit = None
        self._is_free_game = None
        self._is_game_over = None
        self._is_instant_replay = None
        self._is_live = None
        self._is_manager_challenge = None
        self._is_postponed = None
        self._is_preview = None
        self._is_split_ticket_double_header = None
        self._is_spring = None
        self._is_suspended = None
        self._is_suspended_on_date = None
        self._is_suspended_resumption_on_date = None
        self._is_tbd = None
        self._is_tie_breaker = None
        self._is_umpire_review = None
        self._is_warmup = None
        self._is_post_season = None
        self._is_post_season_ready = None
        self._is_wild_card = None
        self._is_division_series = None
        self._is_championshop_series = None
        self._is_world_series = None
        self._is_pre_game_delay = None
        self._is_in_game_delay = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if is_all_star_game is not None:
            self.is_all_star_game = is_all_star_game
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_classic_double_header is not None:
            self.is_classic_double_header = is_classic_double_header
        if is_completed_early is not None:
            self.is_completed_early = is_completed_early
        if is_delayed is not None:
            self.is_delayed = is_delayed
        if is_double_header is not None:
            self.is_double_header = is_double_header
        if is_non_double_header_tbd is not None:
            self.is_non_double_header_tbd = is_non_double_header_tbd
        if is_exhibition is not None:
            self.is_exhibition = is_exhibition
        if is_final is not None:
            self.is_final = is_final
        if is_forfeit is not None:
            self.is_forfeit = is_forfeit
        if is_free_game is not None:
            self.is_free_game = is_free_game
        if is_game_over is not None:
            self.is_game_over = is_game_over
        if is_instant_replay is not None:
            self.is_instant_replay = is_instant_replay
        if is_live is not None:
            self.is_live = is_live
        if is_manager_challenge is not None:
            self.is_manager_challenge = is_manager_challenge
        if is_postponed is not None:
            self.is_postponed = is_postponed
        if is_preview is not None:
            self.is_preview = is_preview
        if is_split_ticket_double_header is not None:
            self.is_split_ticket_double_header = is_split_ticket_double_header
        if is_spring is not None:
            self.is_spring = is_spring
        if is_suspended is not None:
            self.is_suspended = is_suspended
        if is_suspended_on_date is not None:
            self.is_suspended_on_date = is_suspended_on_date
        if is_suspended_resumption_on_date is not None:
            self.is_suspended_resumption_on_date = is_suspended_resumption_on_date
        if is_tbd is not None:
            self.is_tbd = is_tbd
        if is_tie_breaker is not None:
            self.is_tie_breaker = is_tie_breaker
        if is_umpire_review is not None:
            self.is_umpire_review = is_umpire_review
        if is_warmup is not None:
            self.is_warmup = is_warmup
        if is_post_season is not None:
            self.is_post_season = is_post_season
        if is_post_season_ready is not None:
            self.is_post_season_ready = is_post_season_ready
        if is_wild_card is not None:
            self.is_wild_card = is_wild_card
        if is_division_series is not None:
            self.is_division_series = is_division_series
        if is_championshop_series is not None:
            self.is_championshop_series = is_championshop_series
        if is_world_series is not None:
            self.is_world_series = is_world_series
        if is_pre_game_delay is not None:
            self.is_pre_game_delay = is_pre_game_delay
        if is_in_game_delay is not None:
            self.is_in_game_delay = is_in_game_delay

    @property
    def copyright(self):
        """Gets the copyright of this StatusFlagsRestObject.  # noqa: E501


        :return: The copyright of this StatusFlagsRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this StatusFlagsRestObject.


        :param copyright: The copyright of this StatusFlagsRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def is_all_star_game(self):
        """Gets the is_all_star_game of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_all_star_game of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_all_star_game

    @is_all_star_game.setter
    def is_all_star_game(self, is_all_star_game):
        """Sets the is_all_star_game of this StatusFlagsRestObject.


        :param is_all_star_game: The is_all_star_game of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_all_star_game = is_all_star_game

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_cancelled of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this StatusFlagsRestObject.


        :param is_cancelled: The is_cancelled of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_classic_double_header(self):
        """Gets the is_classic_double_header of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_classic_double_header of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_classic_double_header

    @is_classic_double_header.setter
    def is_classic_double_header(self, is_classic_double_header):
        """Sets the is_classic_double_header of this StatusFlagsRestObject.


        :param is_classic_double_header: The is_classic_double_header of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_classic_double_header = is_classic_double_header

    @property
    def is_completed_early(self):
        """Gets the is_completed_early of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_completed_early of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed_early

    @is_completed_early.setter
    def is_completed_early(self, is_completed_early):
        """Sets the is_completed_early of this StatusFlagsRestObject.


        :param is_completed_early: The is_completed_early of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_completed_early = is_completed_early

    @property
    def is_delayed(self):
        """Gets the is_delayed of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_delayed of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_delayed

    @is_delayed.setter
    def is_delayed(self, is_delayed):
        """Sets the is_delayed of this StatusFlagsRestObject.


        :param is_delayed: The is_delayed of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_delayed = is_delayed

    @property
    def is_double_header(self):
        """Gets the is_double_header of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_double_header of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_double_header

    @is_double_header.setter
    def is_double_header(self, is_double_header):
        """Sets the is_double_header of this StatusFlagsRestObject.


        :param is_double_header: The is_double_header of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_double_header = is_double_header

    @property
    def is_non_double_header_tbd(self):
        """Gets the is_non_double_header_tbd of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_non_double_header_tbd of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_non_double_header_tbd

    @is_non_double_header_tbd.setter
    def is_non_double_header_tbd(self, is_non_double_header_tbd):
        """Sets the is_non_double_header_tbd of this StatusFlagsRestObject.


        :param is_non_double_header_tbd: The is_non_double_header_tbd of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_non_double_header_tbd = is_non_double_header_tbd

    @property
    def is_exhibition(self):
        """Gets the is_exhibition of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_exhibition of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_exhibition

    @is_exhibition.setter
    def is_exhibition(self, is_exhibition):
        """Sets the is_exhibition of this StatusFlagsRestObject.


        :param is_exhibition: The is_exhibition of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_exhibition = is_exhibition

    @property
    def is_final(self):
        """Gets the is_final of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_final of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_final

    @is_final.setter
    def is_final(self, is_final):
        """Sets the is_final of this StatusFlagsRestObject.


        :param is_final: The is_final of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_final = is_final

    @property
    def is_forfeit(self):
        """Gets the is_forfeit of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_forfeit of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_forfeit

    @is_forfeit.setter
    def is_forfeit(self, is_forfeit):
        """Sets the is_forfeit of this StatusFlagsRestObject.


        :param is_forfeit: The is_forfeit of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_forfeit = is_forfeit

    @property
    def is_free_game(self):
        """Gets the is_free_game of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_free_game of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_free_game

    @is_free_game.setter
    def is_free_game(self, is_free_game):
        """Sets the is_free_game of this StatusFlagsRestObject.


        :param is_free_game: The is_free_game of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_free_game = is_free_game

    @property
    def is_game_over(self):
        """Gets the is_game_over of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_game_over of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_game_over

    @is_game_over.setter
    def is_game_over(self, is_game_over):
        """Sets the is_game_over of this StatusFlagsRestObject.


        :param is_game_over: The is_game_over of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_game_over = is_game_over

    @property
    def is_instant_replay(self):
        """Gets the is_instant_replay of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_instant_replay of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_instant_replay

    @is_instant_replay.setter
    def is_instant_replay(self, is_instant_replay):
        """Sets the is_instant_replay of this StatusFlagsRestObject.


        :param is_instant_replay: The is_instant_replay of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_instant_replay = is_instant_replay

    @property
    def is_live(self):
        """Gets the is_live of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_live of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this StatusFlagsRestObject.


        :param is_live: The is_live of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_live = is_live

    @property
    def is_manager_challenge(self):
        """Gets the is_manager_challenge of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_manager_challenge of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_manager_challenge

    @is_manager_challenge.setter
    def is_manager_challenge(self, is_manager_challenge):
        """Sets the is_manager_challenge of this StatusFlagsRestObject.


        :param is_manager_challenge: The is_manager_challenge of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_manager_challenge = is_manager_challenge

    @property
    def is_postponed(self):
        """Gets the is_postponed of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_postponed of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_postponed

    @is_postponed.setter
    def is_postponed(self, is_postponed):
        """Sets the is_postponed of this StatusFlagsRestObject.


        :param is_postponed: The is_postponed of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_postponed = is_postponed

    @property
    def is_preview(self):
        """Gets the is_preview of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_preview of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_preview

    @is_preview.setter
    def is_preview(self, is_preview):
        """Sets the is_preview of this StatusFlagsRestObject.


        :param is_preview: The is_preview of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_preview = is_preview

    @property
    def is_split_ticket_double_header(self):
        """Gets the is_split_ticket_double_header of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_split_ticket_double_header of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_split_ticket_double_header

    @is_split_ticket_double_header.setter
    def is_split_ticket_double_header(self, is_split_ticket_double_header):
        """Sets the is_split_ticket_double_header of this StatusFlagsRestObject.


        :param is_split_ticket_double_header: The is_split_ticket_double_header of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_split_ticket_double_header = is_split_ticket_double_header

    @property
    def is_spring(self):
        """Gets the is_spring of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_spring of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_spring

    @is_spring.setter
    def is_spring(self, is_spring):
        """Sets the is_spring of this StatusFlagsRestObject.


        :param is_spring: The is_spring of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_spring = is_spring

    @property
    def is_suspended(self):
        """Gets the is_suspended of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_suspended of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_suspended

    @is_suspended.setter
    def is_suspended(self, is_suspended):
        """Sets the is_suspended of this StatusFlagsRestObject.


        :param is_suspended: The is_suspended of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_suspended = is_suspended

    @property
    def is_suspended_on_date(self):
        """Gets the is_suspended_on_date of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_suspended_on_date of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_suspended_on_date

    @is_suspended_on_date.setter
    def is_suspended_on_date(self, is_suspended_on_date):
        """Sets the is_suspended_on_date of this StatusFlagsRestObject.


        :param is_suspended_on_date: The is_suspended_on_date of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_suspended_on_date = is_suspended_on_date

    @property
    def is_suspended_resumption_on_date(self):
        """Gets the is_suspended_resumption_on_date of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_suspended_resumption_on_date of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_suspended_resumption_on_date

    @is_suspended_resumption_on_date.setter
    def is_suspended_resumption_on_date(self, is_suspended_resumption_on_date):
        """Sets the is_suspended_resumption_on_date of this StatusFlagsRestObject.


        :param is_suspended_resumption_on_date: The is_suspended_resumption_on_date of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_suspended_resumption_on_date = is_suspended_resumption_on_date

    @property
    def is_tbd(self):
        """Gets the is_tbd of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_tbd of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_tbd

    @is_tbd.setter
    def is_tbd(self, is_tbd):
        """Sets the is_tbd of this StatusFlagsRestObject.


        :param is_tbd: The is_tbd of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_tbd = is_tbd

    @property
    def is_tie_breaker(self):
        """Gets the is_tie_breaker of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_tie_breaker of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_tie_breaker

    @is_tie_breaker.setter
    def is_tie_breaker(self, is_tie_breaker):
        """Sets the is_tie_breaker of this StatusFlagsRestObject.


        :param is_tie_breaker: The is_tie_breaker of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_tie_breaker = is_tie_breaker

    @property
    def is_umpire_review(self):
        """Gets the is_umpire_review of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_umpire_review of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_umpire_review

    @is_umpire_review.setter
    def is_umpire_review(self, is_umpire_review):
        """Sets the is_umpire_review of this StatusFlagsRestObject.


        :param is_umpire_review: The is_umpire_review of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_umpire_review = is_umpire_review

    @property
    def is_warmup(self):
        """Gets the is_warmup of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_warmup of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_warmup

    @is_warmup.setter
    def is_warmup(self, is_warmup):
        """Sets the is_warmup of this StatusFlagsRestObject.


        :param is_warmup: The is_warmup of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_warmup = is_warmup

    @property
    def is_post_season(self):
        """Gets the is_post_season of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_post_season of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_post_season

    @is_post_season.setter
    def is_post_season(self, is_post_season):
        """Sets the is_post_season of this StatusFlagsRestObject.


        :param is_post_season: The is_post_season of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_post_season = is_post_season

    @property
    def is_post_season_ready(self):
        """Gets the is_post_season_ready of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_post_season_ready of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_post_season_ready

    @is_post_season_ready.setter
    def is_post_season_ready(self, is_post_season_ready):
        """Sets the is_post_season_ready of this StatusFlagsRestObject.


        :param is_post_season_ready: The is_post_season_ready of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_post_season_ready = is_post_season_ready

    @property
    def is_wild_card(self):
        """Gets the is_wild_card of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_wild_card of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_wild_card

    @is_wild_card.setter
    def is_wild_card(self, is_wild_card):
        """Sets the is_wild_card of this StatusFlagsRestObject.


        :param is_wild_card: The is_wild_card of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_wild_card = is_wild_card

    @property
    def is_division_series(self):
        """Gets the is_division_series of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_division_series of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_division_series

    @is_division_series.setter
    def is_division_series(self, is_division_series):
        """Sets the is_division_series of this StatusFlagsRestObject.


        :param is_division_series: The is_division_series of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_division_series = is_division_series

    @property
    def is_championshop_series(self):
        """Gets the is_championshop_series of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_championshop_series of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_championshop_series

    @is_championshop_series.setter
    def is_championshop_series(self, is_championshop_series):
        """Sets the is_championshop_series of this StatusFlagsRestObject.


        :param is_championshop_series: The is_championshop_series of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_championshop_series = is_championshop_series

    @property
    def is_world_series(self):
        """Gets the is_world_series of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_world_series of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_world_series

    @is_world_series.setter
    def is_world_series(self, is_world_series):
        """Sets the is_world_series of this StatusFlagsRestObject.


        :param is_world_series: The is_world_series of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_world_series = is_world_series

    @property
    def is_pre_game_delay(self):
        """Gets the is_pre_game_delay of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_pre_game_delay of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_pre_game_delay

    @is_pre_game_delay.setter
    def is_pre_game_delay(self, is_pre_game_delay):
        """Sets the is_pre_game_delay of this StatusFlagsRestObject.


        :param is_pre_game_delay: The is_pre_game_delay of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_pre_game_delay = is_pre_game_delay

    @property
    def is_in_game_delay(self):
        """Gets the is_in_game_delay of this StatusFlagsRestObject.  # noqa: E501


        :return: The is_in_game_delay of this StatusFlagsRestObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_game_delay

    @is_in_game_delay.setter
    def is_in_game_delay(self, is_in_game_delay):
        """Sets the is_in_game_delay of this StatusFlagsRestObject.


        :param is_in_game_delay: The is_in_game_delay of this StatusFlagsRestObject.  # noqa: E501
        :type: bool
        """

        self._is_in_game_delay = is_in_game_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusFlagsRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusFlagsRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
