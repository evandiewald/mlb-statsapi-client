# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPlayByPlayRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'all_plays': 'list[BaseballPlayRestObject]',
        'current_play': 'BaseballPlayRestObject',
        'scoring_plays': 'list[int]',
        'plays_by_inning': 'list[InningPlay]'
    }

    attribute_map = {
        'copyright': 'copyright',
        'all_plays': 'allPlays',
        'current_play': 'currentPlay',
        'scoring_plays': 'scoringPlays',
        'plays_by_inning': 'playsByInning'
    }

    def __init__(self, copyright=None, all_plays=None, current_play=None, scoring_plays=None, plays_by_inning=None):  # noqa: E501
        """BaseballPlayByPlayRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._all_plays = None
        self._current_play = None
        self._scoring_plays = None
        self._plays_by_inning = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if all_plays is not None:
            self.all_plays = all_plays
        if current_play is not None:
            self.current_play = current_play
        if scoring_plays is not None:
            self.scoring_plays = scoring_plays
        if plays_by_inning is not None:
            self.plays_by_inning = plays_by_inning

    @property
    def copyright(self):
        """Gets the copyright of this BaseballPlayByPlayRestObject.  # noqa: E501


        :return: The copyright of this BaseballPlayByPlayRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BaseballPlayByPlayRestObject.


        :param copyright: The copyright of this BaseballPlayByPlayRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def all_plays(self):
        """Gets the all_plays of this BaseballPlayByPlayRestObject.  # noqa: E501


        :return: The all_plays of this BaseballPlayByPlayRestObject.  # noqa: E501
        :rtype: list[BaseballPlayRestObject]
        """
        return self._all_plays

    @all_plays.setter
    def all_plays(self, all_plays):
        """Sets the all_plays of this BaseballPlayByPlayRestObject.


        :param all_plays: The all_plays of this BaseballPlayByPlayRestObject.  # noqa: E501
        :type: list[BaseballPlayRestObject]
        """

        self._all_plays = all_plays

    @property
    def current_play(self):
        """Gets the current_play of this BaseballPlayByPlayRestObject.  # noqa: E501


        :return: The current_play of this BaseballPlayByPlayRestObject.  # noqa: E501
        :rtype: BaseballPlayRestObject
        """
        return self._current_play

    @current_play.setter
    def current_play(self, current_play):
        """Sets the current_play of this BaseballPlayByPlayRestObject.


        :param current_play: The current_play of this BaseballPlayByPlayRestObject.  # noqa: E501
        :type: BaseballPlayRestObject
        """

        self._current_play = current_play

    @property
    def scoring_plays(self):
        """Gets the scoring_plays of this BaseballPlayByPlayRestObject.  # noqa: E501


        :return: The scoring_plays of this BaseballPlayByPlayRestObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._scoring_plays

    @scoring_plays.setter
    def scoring_plays(self, scoring_plays):
        """Sets the scoring_plays of this BaseballPlayByPlayRestObject.


        :param scoring_plays: The scoring_plays of this BaseballPlayByPlayRestObject.  # noqa: E501
        :type: list[int]
        """

        self._scoring_plays = scoring_plays

    @property
    def plays_by_inning(self):
        """Gets the plays_by_inning of this BaseballPlayByPlayRestObject.  # noqa: E501


        :return: The plays_by_inning of this BaseballPlayByPlayRestObject.  # noqa: E501
        :rtype: list[InningPlay]
        """
        return self._plays_by_inning

    @plays_by_inning.setter
    def plays_by_inning(self, plays_by_inning):
        """Sets the plays_by_inning of this BaseballPlayByPlayRestObject.


        :param plays_by_inning: The plays_by_inning of this BaseballPlayByPlayRestObject.  # noqa: E501
        :type: list[InningPlay]
        """

        self._plays_by_inning = plays_by_inning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPlayByPlayRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPlayByPlayRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
