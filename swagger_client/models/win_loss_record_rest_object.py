# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WinLossRecordRestObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'wins': 'int',
        'losses': 'int',
        'ties': 'int',
        'type': 'str',
        'pct': 'str'
    }

    attribute_map = {
        'copyright': 'copyright',
        'wins': 'wins',
        'losses': 'losses',
        'ties': 'ties',
        'type': 'type',
        'pct': 'pct'
    }

    def __init__(self, copyright=None, wins=None, losses=None, ties=None, type=None, pct=None):  # noqa: E501
        """WinLossRecordRestObject - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._wins = None
        self._losses = None
        self._ties = None
        self._type = None
        self._pct = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if ties is not None:
            self.ties = ties
        if type is not None:
            self.type = type
        if pct is not None:
            self.pct = pct

    @property
    def copyright(self):
        """Gets the copyright of this WinLossRecordRestObject.  # noqa: E501


        :return: The copyright of this WinLossRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WinLossRecordRestObject.


        :param copyright: The copyright of this WinLossRecordRestObject.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def wins(self):
        """Gets the wins of this WinLossRecordRestObject.  # noqa: E501


        :return: The wins of this WinLossRecordRestObject.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this WinLossRecordRestObject.


        :param wins: The wins of this WinLossRecordRestObject.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this WinLossRecordRestObject.  # noqa: E501


        :return: The losses of this WinLossRecordRestObject.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this WinLossRecordRestObject.


        :param losses: The losses of this WinLossRecordRestObject.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def ties(self):
        """Gets the ties of this WinLossRecordRestObject.  # noqa: E501


        :return: The ties of this WinLossRecordRestObject.  # noqa: E501
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties):
        """Sets the ties of this WinLossRecordRestObject.


        :param ties: The ties of this WinLossRecordRestObject.  # noqa: E501
        :type: int
        """

        self._ties = ties

    @property
    def type(self):
        """Gets the type of this WinLossRecordRestObject.  # noqa: E501


        :return: The type of this WinLossRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WinLossRecordRestObject.


        :param type: The type of this WinLossRecordRestObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def pct(self):
        """Gets the pct of this WinLossRecordRestObject.  # noqa: E501


        :return: The pct of this WinLossRecordRestObject.  # noqa: E501
        :rtype: str
        """
        return self._pct

    @pct.setter
    def pct(self, pct):
        """Sets the pct of this WinLossRecordRestObject.


        :param pct: The pct of this WinLossRecordRestObject.  # noqa: E501
        :type: str
        """

        self._pct = pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WinLossRecordRestObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WinLossRecordRestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
