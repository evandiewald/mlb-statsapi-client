# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseballPlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_user_role': 'Role',
        'balls': 'int',
        'strikes': 'int',
        'outs': 'int',
        'inning': 'int',
        'at_bat_index': 'int',
        'half_inning': 'str',
        'has_out': 'bool',
        'batter': 'BaseballPerson',
        'pitcher': 'BaseballPerson',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'batter_hot_cold_zone_stats': 'Stats',
        'pitcher_hot_cold_zone_stats': 'Stats',
        'batter_hot_cold_zones': 'list[BaseballHotColdZone]',
        'pitcher_hot_cold_zones': 'list[BaseballHotColdZone]',
        'splits_batter': 'str',
        'splits_pitcher': 'str',
        'splits_men_on_base': 'str',
        'pitch_hand': 'DynamicLookupEnum',
        'bat_side': 'DynamicLookupEnum',
        'captivating_index': 'int',
        'hit_trajectory': 'HitTrajectory',
        'event_type': 'str',
        'event_type_enum': 'EventType',
        'result': 'str',
        'result_map': 'dict(str, str)',
        'description': 'str',
        'num_rbi': 'int',
        'away_score': 'int',
        'home_score': 'int',
        'is_complete': 'bool',
        'is_scoring_play': 'bool',
        'has_review': 'bool',
        'review_type': 'str',
        'review_overturned': 'bool',
        'review_in_progress': 'bool',
        'challenge_team_id': 'int',
        'reviews': 'list[BaseballReview]',
        'runner_on1b': 'BaseballPerson',
        'runner_on2b': 'BaseballPerson',
        'runner_on3b': 'BaseballPerson',
        'pitch_index': 'list[int]',
        'action_index': 'list[int]',
        'runner_index': 'list[object]',
        'runner_movements': 'list[BaseballRunnerMovement]',
        'play_events': 'list[BaseballPlayEvent]',
        'credits': 'list[PlayCredit]',
        'flags': 'list[PlayCredit]',
        'is_double_play': 'bool',
        'is_ground_into_double_play': 'bool',
        'is_triple_play': 'bool',
        'is_ground_into_triple_play': 'bool',
        'num_left_on_base': 'int',
        'num_left_on_base_scoring': 'int',
        'offensive_alignment_id': 'str',
        'defensive_alignment_id': 'str',
        'complete': 'bool',
        'scoring_play': 'bool',
        'top_inning': 'bool',
        'results': 'dict(str, str)',
        'descriptions': 'dict(str, str)',
        'plate_appearance': 'bool',
        'summary': 'BaseballPlay',
        'batter_result_event': 'EventType',
        'responsible_batter': 'BaseballPerson',
        'payoff_event': 'BaseballPlayEvent',
        'team_num_left_on_base': 'int',
        'num_left_on_base_scoring_position': 'int',
        'hit': 'bool',
        'at_bat': 'bool',
        'double_play': 'bool',
        'triple_play': 'bool',
        'ground_into_double_play': 'bool',
        'ground_into_triple_play': 'bool',
        'ground_out': 'bool',
        'responsible_pitcher': 'BaseballPerson',
        'in_play_event': 'BaseballPlayEvent',
        'num_errors': 'int',
        'num_runs': 'int',
        'user_privileges': 'list[Privilege]'
    }

    attribute_map = {
        'requesting_user_role': 'requestingUserRole',
        'balls': 'balls',
        'strikes': 'strikes',
        'outs': 'outs',
        'inning': 'inning',
        'at_bat_index': 'atBatIndex',
        'half_inning': 'halfInning',
        'has_out': 'hasOut',
        'batter': 'batter',
        'pitcher': 'pitcher',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'batter_hot_cold_zone_stats': 'batterHotColdZoneStats',
        'pitcher_hot_cold_zone_stats': 'pitcherHotColdZoneStats',
        'batter_hot_cold_zones': 'batterHotColdZones',
        'pitcher_hot_cold_zones': 'pitcherHotColdZones',
        'splits_batter': 'splitsBatter',
        'splits_pitcher': 'splitsPitcher',
        'splits_men_on_base': 'splitsMenOnBase',
        'pitch_hand': 'pitchHand',
        'bat_side': 'batSide',
        'captivating_index': 'captivatingIndex',
        'hit_trajectory': 'hitTrajectory',
        'event_type': 'eventType',
        'event_type_enum': 'eventTypeEnum',
        'result': 'result',
        'result_map': 'resultMap',
        'description': 'description',
        'num_rbi': 'numRbi',
        'away_score': 'awayScore',
        'home_score': 'homeScore',
        'is_complete': 'isComplete',
        'is_scoring_play': 'isScoringPlay',
        'has_review': 'hasReview',
        'review_type': 'reviewType',
        'review_overturned': 'reviewOverturned',
        'review_in_progress': 'reviewInProgress',
        'challenge_team_id': 'challengeTeamId',
        'reviews': 'reviews',
        'runner_on1b': 'runnerOn1b',
        'runner_on2b': 'runnerOn2b',
        'runner_on3b': 'runnerOn3b',
        'pitch_index': 'pitchIndex',
        'action_index': 'actionIndex',
        'runner_index': 'runnerIndex',
        'runner_movements': 'runnerMovements',
        'play_events': 'playEvents',
        'credits': 'credits',
        'flags': 'flags',
        'is_double_play': 'isDoublePlay',
        'is_ground_into_double_play': 'isGroundIntoDoublePlay',
        'is_triple_play': 'isTriplePlay',
        'is_ground_into_triple_play': 'isGroundIntoTriplePlay',
        'num_left_on_base': 'numLeftOnBase',
        'num_left_on_base_scoring': 'numLeftOnBaseScoring',
        'offensive_alignment_id': 'offensiveAlignmentId',
        'defensive_alignment_id': 'defensiveAlignmentId',
        'complete': 'complete',
        'scoring_play': 'scoringPlay',
        'top_inning': 'topInning',
        'results': 'results',
        'descriptions': 'descriptions',
        'plate_appearance': 'plateAppearance',
        'summary': 'summary',
        'batter_result_event': 'batterResultEvent',
        'responsible_batter': 'responsibleBatter',
        'payoff_event': 'payoffEvent',
        'team_num_left_on_base': 'teamNumLeftOnBase',
        'num_left_on_base_scoring_position': 'numLeftOnBaseScoringPosition',
        'hit': 'hit',
        'at_bat': 'atBat',
        'double_play': 'doublePlay',
        'triple_play': 'triplePlay',
        'ground_into_double_play': 'groundIntoDoublePlay',
        'ground_into_triple_play': 'groundIntoTriplePlay',
        'ground_out': 'groundOut',
        'responsible_pitcher': 'responsiblePitcher',
        'in_play_event': 'inPlayEvent',
        'num_errors': 'numErrors',
        'num_runs': 'numRuns',
        'user_privileges': 'userPrivileges'
    }

    def __init__(self, requesting_user_role=None, balls=None, strikes=None, outs=None, inning=None, at_bat_index=None, half_inning=None, has_out=None, batter=None, pitcher=None, start_time=None, end_time=None, batter_hot_cold_zone_stats=None, pitcher_hot_cold_zone_stats=None, batter_hot_cold_zones=None, pitcher_hot_cold_zones=None, splits_batter=None, splits_pitcher=None, splits_men_on_base=None, pitch_hand=None, bat_side=None, captivating_index=None, hit_trajectory=None, event_type=None, event_type_enum=None, result=None, result_map=None, description=None, num_rbi=None, away_score=None, home_score=None, is_complete=None, is_scoring_play=None, has_review=None, review_type=None, review_overturned=None, review_in_progress=None, challenge_team_id=None, reviews=None, runner_on1b=None, runner_on2b=None, runner_on3b=None, pitch_index=None, action_index=None, runner_index=None, runner_movements=None, play_events=None, credits=None, flags=None, is_double_play=None, is_ground_into_double_play=None, is_triple_play=None, is_ground_into_triple_play=None, num_left_on_base=None, num_left_on_base_scoring=None, offensive_alignment_id=None, defensive_alignment_id=None, complete=None, scoring_play=None, top_inning=None, results=None, descriptions=None, plate_appearance=None, summary=None, batter_result_event=None, responsible_batter=None, payoff_event=None, team_num_left_on_base=None, num_left_on_base_scoring_position=None, hit=None, at_bat=None, double_play=None, triple_play=None, ground_into_double_play=None, ground_into_triple_play=None, ground_out=None, responsible_pitcher=None, in_play_event=None, num_errors=None, num_runs=None, user_privileges=None):  # noqa: E501
        """BaseballPlay - a model defined in Swagger"""  # noqa: E501
        self._requesting_user_role = None
        self._balls = None
        self._strikes = None
        self._outs = None
        self._inning = None
        self._at_bat_index = None
        self._half_inning = None
        self._has_out = None
        self._batter = None
        self._pitcher = None
        self._start_time = None
        self._end_time = None
        self._batter_hot_cold_zone_stats = None
        self._pitcher_hot_cold_zone_stats = None
        self._batter_hot_cold_zones = None
        self._pitcher_hot_cold_zones = None
        self._splits_batter = None
        self._splits_pitcher = None
        self._splits_men_on_base = None
        self._pitch_hand = None
        self._bat_side = None
        self._captivating_index = None
        self._hit_trajectory = None
        self._event_type = None
        self._event_type_enum = None
        self._result = None
        self._result_map = None
        self._description = None
        self._num_rbi = None
        self._away_score = None
        self._home_score = None
        self._is_complete = None
        self._is_scoring_play = None
        self._has_review = None
        self._review_type = None
        self._review_overturned = None
        self._review_in_progress = None
        self._challenge_team_id = None
        self._reviews = None
        self._runner_on1b = None
        self._runner_on2b = None
        self._runner_on3b = None
        self._pitch_index = None
        self._action_index = None
        self._runner_index = None
        self._runner_movements = None
        self._play_events = None
        self._credits = None
        self._flags = None
        self._is_double_play = None
        self._is_ground_into_double_play = None
        self._is_triple_play = None
        self._is_ground_into_triple_play = None
        self._num_left_on_base = None
        self._num_left_on_base_scoring = None
        self._offensive_alignment_id = None
        self._defensive_alignment_id = None
        self._complete = None
        self._scoring_play = None
        self._top_inning = None
        self._results = None
        self._descriptions = None
        self._plate_appearance = None
        self._summary = None
        self._batter_result_event = None
        self._responsible_batter = None
        self._payoff_event = None
        self._team_num_left_on_base = None
        self._num_left_on_base_scoring_position = None
        self._hit = None
        self._at_bat = None
        self._double_play = None
        self._triple_play = None
        self._ground_into_double_play = None
        self._ground_into_triple_play = None
        self._ground_out = None
        self._responsible_pitcher = None
        self._in_play_event = None
        self._num_errors = None
        self._num_runs = None
        self._user_privileges = None
        self.discriminator = None
        if requesting_user_role is not None:
            self.requesting_user_role = requesting_user_role
        if balls is not None:
            self.balls = balls
        if strikes is not None:
            self.strikes = strikes
        if outs is not None:
            self.outs = outs
        if inning is not None:
            self.inning = inning
        if at_bat_index is not None:
            self.at_bat_index = at_bat_index
        if half_inning is not None:
            self.half_inning = half_inning
        if has_out is not None:
            self.has_out = has_out
        if batter is not None:
            self.batter = batter
        if pitcher is not None:
            self.pitcher = pitcher
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if batter_hot_cold_zone_stats is not None:
            self.batter_hot_cold_zone_stats = batter_hot_cold_zone_stats
        if pitcher_hot_cold_zone_stats is not None:
            self.pitcher_hot_cold_zone_stats = pitcher_hot_cold_zone_stats
        if batter_hot_cold_zones is not None:
            self.batter_hot_cold_zones = batter_hot_cold_zones
        if pitcher_hot_cold_zones is not None:
            self.pitcher_hot_cold_zones = pitcher_hot_cold_zones
        if splits_batter is not None:
            self.splits_batter = splits_batter
        if splits_pitcher is not None:
            self.splits_pitcher = splits_pitcher
        if splits_men_on_base is not None:
            self.splits_men_on_base = splits_men_on_base
        if pitch_hand is not None:
            self.pitch_hand = pitch_hand
        if bat_side is not None:
            self.bat_side = bat_side
        if captivating_index is not None:
            self.captivating_index = captivating_index
        if hit_trajectory is not None:
            self.hit_trajectory = hit_trajectory
        if event_type is not None:
            self.event_type = event_type
        if event_type_enum is not None:
            self.event_type_enum = event_type_enum
        if result is not None:
            self.result = result
        if result_map is not None:
            self.result_map = result_map
        if description is not None:
            self.description = description
        if num_rbi is not None:
            self.num_rbi = num_rbi
        if away_score is not None:
            self.away_score = away_score
        if home_score is not None:
            self.home_score = home_score
        if is_complete is not None:
            self.is_complete = is_complete
        if is_scoring_play is not None:
            self.is_scoring_play = is_scoring_play
        if has_review is not None:
            self.has_review = has_review
        if review_type is not None:
            self.review_type = review_type
        if review_overturned is not None:
            self.review_overturned = review_overturned
        if review_in_progress is not None:
            self.review_in_progress = review_in_progress
        if challenge_team_id is not None:
            self.challenge_team_id = challenge_team_id
        if reviews is not None:
            self.reviews = reviews
        if runner_on1b is not None:
            self.runner_on1b = runner_on1b
        if runner_on2b is not None:
            self.runner_on2b = runner_on2b
        if runner_on3b is not None:
            self.runner_on3b = runner_on3b
        if pitch_index is not None:
            self.pitch_index = pitch_index
        if action_index is not None:
            self.action_index = action_index
        if runner_index is not None:
            self.runner_index = runner_index
        if runner_movements is not None:
            self.runner_movements = runner_movements
        if play_events is not None:
            self.play_events = play_events
        if credits is not None:
            self.credits = credits
        if flags is not None:
            self.flags = flags
        if is_double_play is not None:
            self.is_double_play = is_double_play
        if is_ground_into_double_play is not None:
            self.is_ground_into_double_play = is_ground_into_double_play
        if is_triple_play is not None:
            self.is_triple_play = is_triple_play
        if is_ground_into_triple_play is not None:
            self.is_ground_into_triple_play = is_ground_into_triple_play
        if num_left_on_base is not None:
            self.num_left_on_base = num_left_on_base
        if num_left_on_base_scoring is not None:
            self.num_left_on_base_scoring = num_left_on_base_scoring
        if offensive_alignment_id is not None:
            self.offensive_alignment_id = offensive_alignment_id
        if defensive_alignment_id is not None:
            self.defensive_alignment_id = defensive_alignment_id
        if complete is not None:
            self.complete = complete
        if scoring_play is not None:
            self.scoring_play = scoring_play
        if top_inning is not None:
            self.top_inning = top_inning
        if results is not None:
            self.results = results
        if descriptions is not None:
            self.descriptions = descriptions
        if plate_appearance is not None:
            self.plate_appearance = plate_appearance
        if summary is not None:
            self.summary = summary
        if batter_result_event is not None:
            self.batter_result_event = batter_result_event
        if responsible_batter is not None:
            self.responsible_batter = responsible_batter
        if payoff_event is not None:
            self.payoff_event = payoff_event
        if team_num_left_on_base is not None:
            self.team_num_left_on_base = team_num_left_on_base
        if num_left_on_base_scoring_position is not None:
            self.num_left_on_base_scoring_position = num_left_on_base_scoring_position
        if hit is not None:
            self.hit = hit
        if at_bat is not None:
            self.at_bat = at_bat
        if double_play is not None:
            self.double_play = double_play
        if triple_play is not None:
            self.triple_play = triple_play
        if ground_into_double_play is not None:
            self.ground_into_double_play = ground_into_double_play
        if ground_into_triple_play is not None:
            self.ground_into_triple_play = ground_into_triple_play
        if ground_out is not None:
            self.ground_out = ground_out
        if responsible_pitcher is not None:
            self.responsible_pitcher = responsible_pitcher
        if in_play_event is not None:
            self.in_play_event = in_play_event
        if num_errors is not None:
            self.num_errors = num_errors
        if num_runs is not None:
            self.num_runs = num_runs
        if user_privileges is not None:
            self.user_privileges = user_privileges

    @property
    def requesting_user_role(self):
        """Gets the requesting_user_role of this BaseballPlay.  # noqa: E501


        :return: The requesting_user_role of this BaseballPlay.  # noqa: E501
        :rtype: Role
        """
        return self._requesting_user_role

    @requesting_user_role.setter
    def requesting_user_role(self, requesting_user_role):
        """Sets the requesting_user_role of this BaseballPlay.


        :param requesting_user_role: The requesting_user_role of this BaseballPlay.  # noqa: E501
        :type: Role
        """

        self._requesting_user_role = requesting_user_role

    @property
    def balls(self):
        """Gets the balls of this BaseballPlay.  # noqa: E501


        :return: The balls of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this BaseballPlay.


        :param balls: The balls of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._balls = balls

    @property
    def strikes(self):
        """Gets the strikes of this BaseballPlay.  # noqa: E501


        :return: The strikes of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this BaseballPlay.


        :param strikes: The strikes of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._strikes = strikes

    @property
    def outs(self):
        """Gets the outs of this BaseballPlay.  # noqa: E501


        :return: The outs of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this BaseballPlay.


        :param outs: The outs of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def inning(self):
        """Gets the inning of this BaseballPlay.  # noqa: E501


        :return: The inning of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._inning

    @inning.setter
    def inning(self, inning):
        """Sets the inning of this BaseballPlay.


        :param inning: The inning of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._inning = inning

    @property
    def at_bat_index(self):
        """Gets the at_bat_index of this BaseballPlay.  # noqa: E501


        :return: The at_bat_index of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._at_bat_index

    @at_bat_index.setter
    def at_bat_index(self, at_bat_index):
        """Sets the at_bat_index of this BaseballPlay.


        :param at_bat_index: The at_bat_index of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._at_bat_index = at_bat_index

    @property
    def half_inning(self):
        """Gets the half_inning of this BaseballPlay.  # noqa: E501


        :return: The half_inning of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._half_inning

    @half_inning.setter
    def half_inning(self, half_inning):
        """Sets the half_inning of this BaseballPlay.


        :param half_inning: The half_inning of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._half_inning = half_inning

    @property
    def has_out(self):
        """Gets the has_out of this BaseballPlay.  # noqa: E501


        :return: The has_out of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._has_out

    @has_out.setter
    def has_out(self, has_out):
        """Sets the has_out of this BaseballPlay.


        :param has_out: The has_out of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._has_out = has_out

    @property
    def batter(self):
        """Gets the batter of this BaseballPlay.  # noqa: E501


        :return: The batter of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this BaseballPlay.


        :param batter: The batter of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._batter = batter

    @property
    def pitcher(self):
        """Gets the pitcher of this BaseballPlay.  # noqa: E501


        :return: The pitcher of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this BaseballPlay.


        :param pitcher: The pitcher of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._pitcher = pitcher

    @property
    def start_time(self):
        """Gets the start_time of this BaseballPlay.  # noqa: E501


        :return: The start_time of this BaseballPlay.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BaseballPlay.


        :param start_time: The start_time of this BaseballPlay.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BaseballPlay.  # noqa: E501


        :return: The end_time of this BaseballPlay.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BaseballPlay.


        :param end_time: The end_time of this BaseballPlay.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def batter_hot_cold_zone_stats(self):
        """Gets the batter_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501


        :return: The batter_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501
        :rtype: Stats
        """
        return self._batter_hot_cold_zone_stats

    @batter_hot_cold_zone_stats.setter
    def batter_hot_cold_zone_stats(self, batter_hot_cold_zone_stats):
        """Sets the batter_hot_cold_zone_stats of this BaseballPlay.


        :param batter_hot_cold_zone_stats: The batter_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501
        :type: Stats
        """

        self._batter_hot_cold_zone_stats = batter_hot_cold_zone_stats

    @property
    def pitcher_hot_cold_zone_stats(self):
        """Gets the pitcher_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501


        :return: The pitcher_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501
        :rtype: Stats
        """
        return self._pitcher_hot_cold_zone_stats

    @pitcher_hot_cold_zone_stats.setter
    def pitcher_hot_cold_zone_stats(self, pitcher_hot_cold_zone_stats):
        """Sets the pitcher_hot_cold_zone_stats of this BaseballPlay.


        :param pitcher_hot_cold_zone_stats: The pitcher_hot_cold_zone_stats of this BaseballPlay.  # noqa: E501
        :type: Stats
        """

        self._pitcher_hot_cold_zone_stats = pitcher_hot_cold_zone_stats

    @property
    def batter_hot_cold_zones(self):
        """Gets the batter_hot_cold_zones of this BaseballPlay.  # noqa: E501


        :return: The batter_hot_cold_zones of this BaseballPlay.  # noqa: E501
        :rtype: list[BaseballHotColdZone]
        """
        return self._batter_hot_cold_zones

    @batter_hot_cold_zones.setter
    def batter_hot_cold_zones(self, batter_hot_cold_zones):
        """Sets the batter_hot_cold_zones of this BaseballPlay.


        :param batter_hot_cold_zones: The batter_hot_cold_zones of this BaseballPlay.  # noqa: E501
        :type: list[BaseballHotColdZone]
        """

        self._batter_hot_cold_zones = batter_hot_cold_zones

    @property
    def pitcher_hot_cold_zones(self):
        """Gets the pitcher_hot_cold_zones of this BaseballPlay.  # noqa: E501


        :return: The pitcher_hot_cold_zones of this BaseballPlay.  # noqa: E501
        :rtype: list[BaseballHotColdZone]
        """
        return self._pitcher_hot_cold_zones

    @pitcher_hot_cold_zones.setter
    def pitcher_hot_cold_zones(self, pitcher_hot_cold_zones):
        """Sets the pitcher_hot_cold_zones of this BaseballPlay.


        :param pitcher_hot_cold_zones: The pitcher_hot_cold_zones of this BaseballPlay.  # noqa: E501
        :type: list[BaseballHotColdZone]
        """

        self._pitcher_hot_cold_zones = pitcher_hot_cold_zones

    @property
    def splits_batter(self):
        """Gets the splits_batter of this BaseballPlay.  # noqa: E501


        :return: The splits_batter of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._splits_batter

    @splits_batter.setter
    def splits_batter(self, splits_batter):
        """Sets the splits_batter of this BaseballPlay.


        :param splits_batter: The splits_batter of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._splits_batter = splits_batter

    @property
    def splits_pitcher(self):
        """Gets the splits_pitcher of this BaseballPlay.  # noqa: E501


        :return: The splits_pitcher of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._splits_pitcher

    @splits_pitcher.setter
    def splits_pitcher(self, splits_pitcher):
        """Sets the splits_pitcher of this BaseballPlay.


        :param splits_pitcher: The splits_pitcher of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._splits_pitcher = splits_pitcher

    @property
    def splits_men_on_base(self):
        """Gets the splits_men_on_base of this BaseballPlay.  # noqa: E501


        :return: The splits_men_on_base of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._splits_men_on_base

    @splits_men_on_base.setter
    def splits_men_on_base(self, splits_men_on_base):
        """Sets the splits_men_on_base of this BaseballPlay.


        :param splits_men_on_base: The splits_men_on_base of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._splits_men_on_base = splits_men_on_base

    @property
    def pitch_hand(self):
        """Gets the pitch_hand of this BaseballPlay.  # noqa: E501


        :return: The pitch_hand of this BaseballPlay.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._pitch_hand

    @pitch_hand.setter
    def pitch_hand(self, pitch_hand):
        """Sets the pitch_hand of this BaseballPlay.


        :param pitch_hand: The pitch_hand of this BaseballPlay.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._pitch_hand = pitch_hand

    @property
    def bat_side(self):
        """Gets the bat_side of this BaseballPlay.  # noqa: E501


        :return: The bat_side of this BaseballPlay.  # noqa: E501
        :rtype: DynamicLookupEnum
        """
        return self._bat_side

    @bat_side.setter
    def bat_side(self, bat_side):
        """Sets the bat_side of this BaseballPlay.


        :param bat_side: The bat_side of this BaseballPlay.  # noqa: E501
        :type: DynamicLookupEnum
        """

        self._bat_side = bat_side

    @property
    def captivating_index(self):
        """Gets the captivating_index of this BaseballPlay.  # noqa: E501


        :return: The captivating_index of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._captivating_index

    @captivating_index.setter
    def captivating_index(self, captivating_index):
        """Sets the captivating_index of this BaseballPlay.


        :param captivating_index: The captivating_index of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._captivating_index = captivating_index

    @property
    def hit_trajectory(self):
        """Gets the hit_trajectory of this BaseballPlay.  # noqa: E501


        :return: The hit_trajectory of this BaseballPlay.  # noqa: E501
        :rtype: HitTrajectory
        """
        return self._hit_trajectory

    @hit_trajectory.setter
    def hit_trajectory(self, hit_trajectory):
        """Sets the hit_trajectory of this BaseballPlay.


        :param hit_trajectory: The hit_trajectory of this BaseballPlay.  # noqa: E501
        :type: HitTrajectory
        """

        self._hit_trajectory = hit_trajectory

    @property
    def event_type(self):
        """Gets the event_type of this BaseballPlay.  # noqa: E501


        :return: The event_type of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this BaseballPlay.


        :param event_type: The event_type of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def event_type_enum(self):
        """Gets the event_type_enum of this BaseballPlay.  # noqa: E501


        :return: The event_type_enum of this BaseballPlay.  # noqa: E501
        :rtype: EventType
        """
        return self._event_type_enum

    @event_type_enum.setter
    def event_type_enum(self, event_type_enum):
        """Sets the event_type_enum of this BaseballPlay.


        :param event_type_enum: The event_type_enum of this BaseballPlay.  # noqa: E501
        :type: EventType
        """

        self._event_type_enum = event_type_enum

    @property
    def result(self):
        """Gets the result of this BaseballPlay.  # noqa: E501


        :return: The result of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BaseballPlay.


        :param result: The result of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def result_map(self):
        """Gets the result_map of this BaseballPlay.  # noqa: E501


        :return: The result_map of this BaseballPlay.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._result_map

    @result_map.setter
    def result_map(self, result_map):
        """Sets the result_map of this BaseballPlay.


        :param result_map: The result_map of this BaseballPlay.  # noqa: E501
        :type: dict(str, str)
        """

        self._result_map = result_map

    @property
    def description(self):
        """Gets the description of this BaseballPlay.  # noqa: E501


        :return: The description of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseballPlay.


        :param description: The description of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def num_rbi(self):
        """Gets the num_rbi of this BaseballPlay.  # noqa: E501


        :return: The num_rbi of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_rbi

    @num_rbi.setter
    def num_rbi(self, num_rbi):
        """Sets the num_rbi of this BaseballPlay.


        :param num_rbi: The num_rbi of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_rbi = num_rbi

    @property
    def away_score(self):
        """Gets the away_score of this BaseballPlay.  # noqa: E501


        :return: The away_score of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this BaseballPlay.


        :param away_score: The away_score of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    @property
    def home_score(self):
        """Gets the home_score of this BaseballPlay.  # noqa: E501


        :return: The home_score of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this BaseballPlay.


        :param home_score: The home_score of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def is_complete(self):
        """Gets the is_complete of this BaseballPlay.  # noqa: E501


        :return: The is_complete of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this BaseballPlay.


        :param is_complete: The is_complete of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_complete = is_complete

    @property
    def is_scoring_play(self):
        """Gets the is_scoring_play of this BaseballPlay.  # noqa: E501


        :return: The is_scoring_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_scoring_play

    @is_scoring_play.setter
    def is_scoring_play(self, is_scoring_play):
        """Sets the is_scoring_play of this BaseballPlay.


        :param is_scoring_play: The is_scoring_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_scoring_play = is_scoring_play

    @property
    def has_review(self):
        """Gets the has_review of this BaseballPlay.  # noqa: E501


        :return: The has_review of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._has_review

    @has_review.setter
    def has_review(self, has_review):
        """Sets the has_review of this BaseballPlay.


        :param has_review: The has_review of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._has_review = has_review

    @property
    def review_type(self):
        """Gets the review_type of this BaseballPlay.  # noqa: E501


        :return: The review_type of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._review_type

    @review_type.setter
    def review_type(self, review_type):
        """Sets the review_type of this BaseballPlay.


        :param review_type: The review_type of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._review_type = review_type

    @property
    def review_overturned(self):
        """Gets the review_overturned of this BaseballPlay.  # noqa: E501


        :return: The review_overturned of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._review_overturned

    @review_overturned.setter
    def review_overturned(self, review_overturned):
        """Sets the review_overturned of this BaseballPlay.


        :param review_overturned: The review_overturned of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._review_overturned = review_overturned

    @property
    def review_in_progress(self):
        """Gets the review_in_progress of this BaseballPlay.  # noqa: E501


        :return: The review_in_progress of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._review_in_progress

    @review_in_progress.setter
    def review_in_progress(self, review_in_progress):
        """Sets the review_in_progress of this BaseballPlay.


        :param review_in_progress: The review_in_progress of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._review_in_progress = review_in_progress

    @property
    def challenge_team_id(self):
        """Gets the challenge_team_id of this BaseballPlay.  # noqa: E501


        :return: The challenge_team_id of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._challenge_team_id

    @challenge_team_id.setter
    def challenge_team_id(self, challenge_team_id):
        """Sets the challenge_team_id of this BaseballPlay.


        :param challenge_team_id: The challenge_team_id of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._challenge_team_id = challenge_team_id

    @property
    def reviews(self):
        """Gets the reviews of this BaseballPlay.  # noqa: E501


        :return: The reviews of this BaseballPlay.  # noqa: E501
        :rtype: list[BaseballReview]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this BaseballPlay.


        :param reviews: The reviews of this BaseballPlay.  # noqa: E501
        :type: list[BaseballReview]
        """

        self._reviews = reviews

    @property
    def runner_on1b(self):
        """Gets the runner_on1b of this BaseballPlay.  # noqa: E501


        :return: The runner_on1b of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._runner_on1b

    @runner_on1b.setter
    def runner_on1b(self, runner_on1b):
        """Sets the runner_on1b of this BaseballPlay.


        :param runner_on1b: The runner_on1b of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._runner_on1b = runner_on1b

    @property
    def runner_on2b(self):
        """Gets the runner_on2b of this BaseballPlay.  # noqa: E501


        :return: The runner_on2b of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._runner_on2b

    @runner_on2b.setter
    def runner_on2b(self, runner_on2b):
        """Sets the runner_on2b of this BaseballPlay.


        :param runner_on2b: The runner_on2b of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._runner_on2b = runner_on2b

    @property
    def runner_on3b(self):
        """Gets the runner_on3b of this BaseballPlay.  # noqa: E501


        :return: The runner_on3b of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._runner_on3b

    @runner_on3b.setter
    def runner_on3b(self, runner_on3b):
        """Sets the runner_on3b of this BaseballPlay.


        :param runner_on3b: The runner_on3b of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._runner_on3b = runner_on3b

    @property
    def pitch_index(self):
        """Gets the pitch_index of this BaseballPlay.  # noqa: E501


        :return: The pitch_index of this BaseballPlay.  # noqa: E501
        :rtype: list[int]
        """
        return self._pitch_index

    @pitch_index.setter
    def pitch_index(self, pitch_index):
        """Sets the pitch_index of this BaseballPlay.


        :param pitch_index: The pitch_index of this BaseballPlay.  # noqa: E501
        :type: list[int]
        """

        self._pitch_index = pitch_index

    @property
    def action_index(self):
        """Gets the action_index of this BaseballPlay.  # noqa: E501


        :return: The action_index of this BaseballPlay.  # noqa: E501
        :rtype: list[int]
        """
        return self._action_index

    @action_index.setter
    def action_index(self, action_index):
        """Sets the action_index of this BaseballPlay.


        :param action_index: The action_index of this BaseballPlay.  # noqa: E501
        :type: list[int]
        """

        self._action_index = action_index

    @property
    def runner_index(self):
        """Gets the runner_index of this BaseballPlay.  # noqa: E501


        :return: The runner_index of this BaseballPlay.  # noqa: E501
        :rtype: list[object]
        """
        return self._runner_index

    @runner_index.setter
    def runner_index(self, runner_index):
        """Sets the runner_index of this BaseballPlay.


        :param runner_index: The runner_index of this BaseballPlay.  # noqa: E501
        :type: list[object]
        """

        self._runner_index = runner_index

    @property
    def runner_movements(self):
        """Gets the runner_movements of this BaseballPlay.  # noqa: E501


        :return: The runner_movements of this BaseballPlay.  # noqa: E501
        :rtype: list[BaseballRunnerMovement]
        """
        return self._runner_movements

    @runner_movements.setter
    def runner_movements(self, runner_movements):
        """Sets the runner_movements of this BaseballPlay.


        :param runner_movements: The runner_movements of this BaseballPlay.  # noqa: E501
        :type: list[BaseballRunnerMovement]
        """

        self._runner_movements = runner_movements

    @property
    def play_events(self):
        """Gets the play_events of this BaseballPlay.  # noqa: E501


        :return: The play_events of this BaseballPlay.  # noqa: E501
        :rtype: list[BaseballPlayEvent]
        """
        return self._play_events

    @play_events.setter
    def play_events(self, play_events):
        """Sets the play_events of this BaseballPlay.


        :param play_events: The play_events of this BaseballPlay.  # noqa: E501
        :type: list[BaseballPlayEvent]
        """

        self._play_events = play_events

    @property
    def credits(self):
        """Gets the credits of this BaseballPlay.  # noqa: E501


        :return: The credits of this BaseballPlay.  # noqa: E501
        :rtype: list[PlayCredit]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this BaseballPlay.


        :param credits: The credits of this BaseballPlay.  # noqa: E501
        :type: list[PlayCredit]
        """

        self._credits = credits

    @property
    def flags(self):
        """Gets the flags of this BaseballPlay.  # noqa: E501


        :return: The flags of this BaseballPlay.  # noqa: E501
        :rtype: list[PlayCredit]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this BaseballPlay.


        :param flags: The flags of this BaseballPlay.  # noqa: E501
        :type: list[PlayCredit]
        """

        self._flags = flags

    @property
    def is_double_play(self):
        """Gets the is_double_play of this BaseballPlay.  # noqa: E501


        :return: The is_double_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_double_play

    @is_double_play.setter
    def is_double_play(self, is_double_play):
        """Sets the is_double_play of this BaseballPlay.


        :param is_double_play: The is_double_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_double_play = is_double_play

    @property
    def is_ground_into_double_play(self):
        """Gets the is_ground_into_double_play of this BaseballPlay.  # noqa: E501


        :return: The is_ground_into_double_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_ground_into_double_play

    @is_ground_into_double_play.setter
    def is_ground_into_double_play(self, is_ground_into_double_play):
        """Sets the is_ground_into_double_play of this BaseballPlay.


        :param is_ground_into_double_play: The is_ground_into_double_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_ground_into_double_play = is_ground_into_double_play

    @property
    def is_triple_play(self):
        """Gets the is_triple_play of this BaseballPlay.  # noqa: E501


        :return: The is_triple_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_triple_play

    @is_triple_play.setter
    def is_triple_play(self, is_triple_play):
        """Sets the is_triple_play of this BaseballPlay.


        :param is_triple_play: The is_triple_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_triple_play = is_triple_play

    @property
    def is_ground_into_triple_play(self):
        """Gets the is_ground_into_triple_play of this BaseballPlay.  # noqa: E501


        :return: The is_ground_into_triple_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._is_ground_into_triple_play

    @is_ground_into_triple_play.setter
    def is_ground_into_triple_play(self, is_ground_into_triple_play):
        """Sets the is_ground_into_triple_play of this BaseballPlay.


        :param is_ground_into_triple_play: The is_ground_into_triple_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._is_ground_into_triple_play = is_ground_into_triple_play

    @property
    def num_left_on_base(self):
        """Gets the num_left_on_base of this BaseballPlay.  # noqa: E501


        :return: The num_left_on_base of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_left_on_base

    @num_left_on_base.setter
    def num_left_on_base(self, num_left_on_base):
        """Sets the num_left_on_base of this BaseballPlay.


        :param num_left_on_base: The num_left_on_base of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_left_on_base = num_left_on_base

    @property
    def num_left_on_base_scoring(self):
        """Gets the num_left_on_base_scoring of this BaseballPlay.  # noqa: E501


        :return: The num_left_on_base_scoring of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_left_on_base_scoring

    @num_left_on_base_scoring.setter
    def num_left_on_base_scoring(self, num_left_on_base_scoring):
        """Sets the num_left_on_base_scoring of this BaseballPlay.


        :param num_left_on_base_scoring: The num_left_on_base_scoring of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_left_on_base_scoring = num_left_on_base_scoring

    @property
    def offensive_alignment_id(self):
        """Gets the offensive_alignment_id of this BaseballPlay.  # noqa: E501


        :return: The offensive_alignment_id of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._offensive_alignment_id

    @offensive_alignment_id.setter
    def offensive_alignment_id(self, offensive_alignment_id):
        """Sets the offensive_alignment_id of this BaseballPlay.


        :param offensive_alignment_id: The offensive_alignment_id of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._offensive_alignment_id = offensive_alignment_id

    @property
    def defensive_alignment_id(self):
        """Gets the defensive_alignment_id of this BaseballPlay.  # noqa: E501


        :return: The defensive_alignment_id of this BaseballPlay.  # noqa: E501
        :rtype: str
        """
        return self._defensive_alignment_id

    @defensive_alignment_id.setter
    def defensive_alignment_id(self, defensive_alignment_id):
        """Sets the defensive_alignment_id of this BaseballPlay.


        :param defensive_alignment_id: The defensive_alignment_id of this BaseballPlay.  # noqa: E501
        :type: str
        """

        self._defensive_alignment_id = defensive_alignment_id

    @property
    def complete(self):
        """Gets the complete of this BaseballPlay.  # noqa: E501


        :return: The complete of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this BaseballPlay.


        :param complete: The complete of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def scoring_play(self):
        """Gets the scoring_play of this BaseballPlay.  # noqa: E501


        :return: The scoring_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._scoring_play

    @scoring_play.setter
    def scoring_play(self, scoring_play):
        """Sets the scoring_play of this BaseballPlay.


        :param scoring_play: The scoring_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._scoring_play = scoring_play

    @property
    def top_inning(self):
        """Gets the top_inning of this BaseballPlay.  # noqa: E501


        :return: The top_inning of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._top_inning

    @top_inning.setter
    def top_inning(self, top_inning):
        """Sets the top_inning of this BaseballPlay.


        :param top_inning: The top_inning of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._top_inning = top_inning

    @property
    def results(self):
        """Gets the results of this BaseballPlay.  # noqa: E501


        :return: The results of this BaseballPlay.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BaseballPlay.


        :param results: The results of this BaseballPlay.  # noqa: E501
        :type: dict(str, str)
        """

        self._results = results

    @property
    def descriptions(self):
        """Gets the descriptions of this BaseballPlay.  # noqa: E501


        :return: The descriptions of this BaseballPlay.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this BaseballPlay.


        :param descriptions: The descriptions of this BaseballPlay.  # noqa: E501
        :type: dict(str, str)
        """

        self._descriptions = descriptions

    @property
    def plate_appearance(self):
        """Gets the plate_appearance of this BaseballPlay.  # noqa: E501


        :return: The plate_appearance of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._plate_appearance

    @plate_appearance.setter
    def plate_appearance(self, plate_appearance):
        """Sets the plate_appearance of this BaseballPlay.


        :param plate_appearance: The plate_appearance of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._plate_appearance = plate_appearance

    @property
    def summary(self):
        """Gets the summary of this BaseballPlay.  # noqa: E501


        :return: The summary of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPlay
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BaseballPlay.


        :param summary: The summary of this BaseballPlay.  # noqa: E501
        :type: BaseballPlay
        """

        self._summary = summary

    @property
    def batter_result_event(self):
        """Gets the batter_result_event of this BaseballPlay.  # noqa: E501


        :return: The batter_result_event of this BaseballPlay.  # noqa: E501
        :rtype: EventType
        """
        return self._batter_result_event

    @batter_result_event.setter
    def batter_result_event(self, batter_result_event):
        """Sets the batter_result_event of this BaseballPlay.


        :param batter_result_event: The batter_result_event of this BaseballPlay.  # noqa: E501
        :type: EventType
        """

        self._batter_result_event = batter_result_event

    @property
    def responsible_batter(self):
        """Gets the responsible_batter of this BaseballPlay.  # noqa: E501


        :return: The responsible_batter of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._responsible_batter

    @responsible_batter.setter
    def responsible_batter(self, responsible_batter):
        """Sets the responsible_batter of this BaseballPlay.


        :param responsible_batter: The responsible_batter of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._responsible_batter = responsible_batter

    @property
    def payoff_event(self):
        """Gets the payoff_event of this BaseballPlay.  # noqa: E501


        :return: The payoff_event of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPlayEvent
        """
        return self._payoff_event

    @payoff_event.setter
    def payoff_event(self, payoff_event):
        """Sets the payoff_event of this BaseballPlay.


        :param payoff_event: The payoff_event of this BaseballPlay.  # noqa: E501
        :type: BaseballPlayEvent
        """

        self._payoff_event = payoff_event

    @property
    def team_num_left_on_base(self):
        """Gets the team_num_left_on_base of this BaseballPlay.  # noqa: E501


        :return: The team_num_left_on_base of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._team_num_left_on_base

    @team_num_left_on_base.setter
    def team_num_left_on_base(self, team_num_left_on_base):
        """Sets the team_num_left_on_base of this BaseballPlay.


        :param team_num_left_on_base: The team_num_left_on_base of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._team_num_left_on_base = team_num_left_on_base

    @property
    def num_left_on_base_scoring_position(self):
        """Gets the num_left_on_base_scoring_position of this BaseballPlay.  # noqa: E501


        :return: The num_left_on_base_scoring_position of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_left_on_base_scoring_position

    @num_left_on_base_scoring_position.setter
    def num_left_on_base_scoring_position(self, num_left_on_base_scoring_position):
        """Sets the num_left_on_base_scoring_position of this BaseballPlay.


        :param num_left_on_base_scoring_position: The num_left_on_base_scoring_position of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_left_on_base_scoring_position = num_left_on_base_scoring_position

    @property
    def hit(self):
        """Gets the hit of this BaseballPlay.  # noqa: E501


        :return: The hit of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this BaseballPlay.


        :param hit: The hit of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._hit = hit

    @property
    def at_bat(self):
        """Gets the at_bat of this BaseballPlay.  # noqa: E501


        :return: The at_bat of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._at_bat

    @at_bat.setter
    def at_bat(self, at_bat):
        """Sets the at_bat of this BaseballPlay.


        :param at_bat: The at_bat of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._at_bat = at_bat

    @property
    def double_play(self):
        """Gets the double_play of this BaseballPlay.  # noqa: E501


        :return: The double_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._double_play

    @double_play.setter
    def double_play(self, double_play):
        """Sets the double_play of this BaseballPlay.


        :param double_play: The double_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._double_play = double_play

    @property
    def triple_play(self):
        """Gets the triple_play of this BaseballPlay.  # noqa: E501


        :return: The triple_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._triple_play

    @triple_play.setter
    def triple_play(self, triple_play):
        """Sets the triple_play of this BaseballPlay.


        :param triple_play: The triple_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._triple_play = triple_play

    @property
    def ground_into_double_play(self):
        """Gets the ground_into_double_play of this BaseballPlay.  # noqa: E501


        :return: The ground_into_double_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._ground_into_double_play

    @ground_into_double_play.setter
    def ground_into_double_play(self, ground_into_double_play):
        """Sets the ground_into_double_play of this BaseballPlay.


        :param ground_into_double_play: The ground_into_double_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._ground_into_double_play = ground_into_double_play

    @property
    def ground_into_triple_play(self):
        """Gets the ground_into_triple_play of this BaseballPlay.  # noqa: E501


        :return: The ground_into_triple_play of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._ground_into_triple_play

    @ground_into_triple_play.setter
    def ground_into_triple_play(self, ground_into_triple_play):
        """Sets the ground_into_triple_play of this BaseballPlay.


        :param ground_into_triple_play: The ground_into_triple_play of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._ground_into_triple_play = ground_into_triple_play

    @property
    def ground_out(self):
        """Gets the ground_out of this BaseballPlay.  # noqa: E501


        :return: The ground_out of this BaseballPlay.  # noqa: E501
        :rtype: bool
        """
        return self._ground_out

    @ground_out.setter
    def ground_out(self, ground_out):
        """Sets the ground_out of this BaseballPlay.


        :param ground_out: The ground_out of this BaseballPlay.  # noqa: E501
        :type: bool
        """

        self._ground_out = ground_out

    @property
    def responsible_pitcher(self):
        """Gets the responsible_pitcher of this BaseballPlay.  # noqa: E501


        :return: The responsible_pitcher of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPerson
        """
        return self._responsible_pitcher

    @responsible_pitcher.setter
    def responsible_pitcher(self, responsible_pitcher):
        """Sets the responsible_pitcher of this BaseballPlay.


        :param responsible_pitcher: The responsible_pitcher of this BaseballPlay.  # noqa: E501
        :type: BaseballPerson
        """

        self._responsible_pitcher = responsible_pitcher

    @property
    def in_play_event(self):
        """Gets the in_play_event of this BaseballPlay.  # noqa: E501


        :return: The in_play_event of this BaseballPlay.  # noqa: E501
        :rtype: BaseballPlayEvent
        """
        return self._in_play_event

    @in_play_event.setter
    def in_play_event(self, in_play_event):
        """Sets the in_play_event of this BaseballPlay.


        :param in_play_event: The in_play_event of this BaseballPlay.  # noqa: E501
        :type: BaseballPlayEvent
        """

        self._in_play_event = in_play_event

    @property
    def num_errors(self):
        """Gets the num_errors of this BaseballPlay.  # noqa: E501


        :return: The num_errors of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_errors

    @num_errors.setter
    def num_errors(self, num_errors):
        """Sets the num_errors of this BaseballPlay.


        :param num_errors: The num_errors of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_errors = num_errors

    @property
    def num_runs(self):
        """Gets the num_runs of this BaseballPlay.  # noqa: E501


        :return: The num_runs of this BaseballPlay.  # noqa: E501
        :rtype: int
        """
        return self._num_runs

    @num_runs.setter
    def num_runs(self, num_runs):
        """Sets the num_runs of this BaseballPlay.


        :param num_runs: The num_runs of this BaseballPlay.  # noqa: E501
        :type: int
        """

        self._num_runs = num_runs

    @property
    def user_privileges(self):
        """Gets the user_privileges of this BaseballPlay.  # noqa: E501


        :return: The user_privileges of this BaseballPlay.  # noqa: E501
        :rtype: list[Privilege]
        """
        return self._user_privileges

    @user_privileges.setter
    def user_privileges(self, user_privileges):
        """Sets the user_privileges of this BaseballPlay.


        :param user_privileges: The user_privileges of this BaseballPlay.  # noqa: E501
        :type: list[Privilege]
        """

        self._user_privileges = user_privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseballPlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseballPlay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
