# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScheduleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def postseason_schedule(self, **kwargs):  # noqa: E501
        """Get postseason schedule  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postseason_schedule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param int series_number:
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param bool use_latest_games:
        :param bool use_featured_game:
        :param str season:
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postseason_schedule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.postseason_schedule_with_http_info(**kwargs)  # noqa: E501
            return data

    def postseason_schedule_with_http_info(self, **kwargs):  # noqa: E501
        """Get postseason schedule  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postseason_schedule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param int series_number:
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param bool use_latest_games:
        :param bool use_featured_game:
        :param str season:
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_types', 'series_number', 'team_id', 'sport_id', 'use_latest_games', 'use_featured_game', 'season', 'public_facing', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postseason_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'series_number' in params:
            query_params.append(('seriesNumber', params['series_number']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'use_latest_games' in params:
            query_params.append(('useLatestGames', params['use_latest_games']))  # noqa: E501
        if 'use_featured_game' in params:
            query_params.append(('useFeaturedGame', params['use_featured_game']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'public_facing' in params:
            query_params.append(('publicFacing', params['public_facing']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/postseason', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postseason_schedule_series(self, **kwargs):  # noqa: E501
        """Get postseason series schedules  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postseason_schedule_series(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param int series_number:
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param bool use_latest_games:
        :param bool use_featured_game:
        :param str season:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PostseasonScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postseason_schedule_series_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.postseason_schedule_series_with_http_info(**kwargs)  # noqa: E501
            return data

    def postseason_schedule_series_with_http_info(self, **kwargs):  # noqa: E501
        """Get postseason series schedules  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postseason_schedule_series_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param int series_number:
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param bool use_latest_games:
        :param bool use_featured_game:
        :param str season:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PostseasonScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_types', 'series_number', 'team_id', 'sport_id', '_date', 'start_date', 'end_date', 'use_latest_games', 'use_featured_game', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postseason_schedule_series" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'series_number' in params:
            query_params.append(('seriesNumber', params['series_number']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'use_latest_games' in params:
            query_params.append(('useLatestGames', params['use_latest_games']))  # noqa: E501
        if 'use_featured_game' in params:
            query_params.append(('useFeaturedGame', params['use_featured_game']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/postseason/series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostseasonScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule(self, using_private_endpoint, **kwargs):  # noqa: E501
        """View schedule info based on scheduleType.  # noqa: E501

        View schedule info. This endpoint allows you to pull schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule(using_private_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool using_private_endpoint: (required)
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schedule_with_http_info(using_private_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.schedule_with_http_info(using_private_endpoint, **kwargs)  # noqa: E501
            return data

    def schedule_with_http_info(self, using_private_endpoint, **kwargs):  # noqa: E501
        """View schedule info based on scheduleType.  # noqa: E501

        View schedule info. This endpoint allows you to pull schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_with_http_info(using_private_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool using_private_endpoint: (required)
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['using_private_endpoint', 'calendar_types', 'event_types', 'schedule_event_types', 'team_id', 'league_id', 'sport_id', 'game_pk', 'game_pks', 'event_ids', 'venue_ids', 'performer_ids', 'game_types', 'game_type', 'season', 'seasons', '_date', 'start_date', 'end_date', 'timecode', 'use_latest_games', 'opponent_id', 'public_facing', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'using_private_endpoint' is set
        if ('using_private_endpoint' not in params or
                params['using_private_endpoint'] is None):
            raise ValueError("Missing the required parameter `using_private_endpoint` when calling `schedule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'calendar_types' in params:
            query_params.append(('calendarTypes', params['calendar_types']))  # noqa: E501
            collection_formats['calendarTypes'] = 'multi'  # noqa: E501
        if 'event_types' in params:
            query_params.append(('eventTypes', params['event_types']))  # noqa: E501
            collection_formats['eventTypes'] = 'multi'  # noqa: E501
        if 'schedule_event_types' in params:
            query_params.append(('scheduleEventTypes', params['schedule_event_types']))  # noqa: E501
            collection_formats['scheduleEventTypes'] = 'multi'  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
            collection_formats['teamId'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
            collection_formats['leagueId'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
            collection_formats['sportId'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
            collection_formats['eventIds'] = 'multi'  # noqa: E501
        if 'venue_ids' in params:
            query_params.append(('venueIds', params['venue_ids']))  # noqa: E501
            collection_formats['venueIds'] = 'multi'  # noqa: E501
        if 'performer_ids' in params:
            query_params.append(('performerIds', params['performer_ids']))  # noqa: E501
            collection_formats['performerIds'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
            collection_formats['gameType'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
            collection_formats['season'] = 'multi'  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'use_latest_games' in params:
            query_params.append(('useLatestGames', params['use_latest_games']))  # noqa: E501
        if 'opponent_id' in params:
            query_params.append(('opponentId', params['opponent_id']))  # noqa: E501
            collection_formats['opponentId'] = 'multi'  # noqa: E501
        if 'public_facing' in params:
            query_params.append(('publicFacing', params['public_facing']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'using_private_endpoint' in params:
            query_params.append(('usingPrivateEndpoint', params['using_private_endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule1(self, using_private_endpoint, **kwargs):  # noqa: E501
        """View schedule info based on scheduleType.  # noqa: E501

        View schedule info. This endpoint allows you to pull schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule1(using_private_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool using_private_endpoint: (required)
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schedule1_with_http_info(using_private_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.schedule1_with_http_info(using_private_endpoint, **kwargs)  # noqa: E501
            return data

    def schedule1_with_http_info(self, using_private_endpoint, **kwargs):  # noqa: E501
        """View schedule info based on scheduleType.  # noqa: E501

        View schedule info. This endpoint allows you to pull schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule1_with_http_info(using_private_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool using_private_endpoint: (required)
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['using_private_endpoint', 'calendar_types', 'event_types', 'schedule_event_types', 'team_id', 'league_id', 'sport_id', 'game_pk', 'game_pks', 'event_ids', 'venue_ids', 'performer_ids', 'game_types', 'game_type', 'season', 'seasons', '_date', 'start_date', 'end_date', 'timecode', 'use_latest_games', 'opponent_id', 'public_facing', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'using_private_endpoint' is set
        if ('using_private_endpoint' not in params or
                params['using_private_endpoint'] is None):
            raise ValueError("Missing the required parameter `using_private_endpoint` when calling `schedule1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'calendar_types' in params:
            query_params.append(('calendarTypes', params['calendar_types']))  # noqa: E501
            collection_formats['calendarTypes'] = 'multi'  # noqa: E501
        if 'event_types' in params:
            query_params.append(('eventTypes', params['event_types']))  # noqa: E501
            collection_formats['eventTypes'] = 'multi'  # noqa: E501
        if 'schedule_event_types' in params:
            query_params.append(('scheduleEventTypes', params['schedule_event_types']))  # noqa: E501
            collection_formats['scheduleEventTypes'] = 'multi'  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
            collection_formats['teamId'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
            collection_formats['leagueId'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
            collection_formats['sportId'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
            collection_formats['eventIds'] = 'multi'  # noqa: E501
        if 'venue_ids' in params:
            query_params.append(('venueIds', params['venue_ids']))  # noqa: E501
            collection_formats['venueIds'] = 'multi'  # noqa: E501
        if 'performer_ids' in params:
            query_params.append(('performerIds', params['performer_ids']))  # noqa: E501
            collection_formats['performerIds'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
            collection_formats['gameType'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
            collection_formats['season'] = 'multi'  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'use_latest_games' in params:
            query_params.append(('useLatestGames', params['use_latest_games']))  # noqa: E501
        if 'opponent_id' in params:
            query_params.append(('opponentId', params['opponent_id']))  # noqa: E501
            collection_formats['opponentId'] = 'multi'  # noqa: E501
        if 'public_facing' in params:
            query_params.append(('publicFacing', params['public_facing']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'using_private_endpoint' in params:
            query_params.append(('usingPrivateEndpoint', params['using_private_endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/{scheduleType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tie_games(self, season, **kwargs):  # noqa: E501
        """Get tied game schedules  # noqa: E501

        This endpoint allows you to pull tie game schedules for the given season  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tie_games(season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season: Season of play (required)
        :param list[int] sport_id: Top level organization of a sport
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tie_games_with_http_info(season, **kwargs)  # noqa: E501
        else:
            (data) = self.tie_games_with_http_info(season, **kwargs)  # noqa: E501
            return data

    def tie_games_with_http_info(self, season, **kwargs):  # noqa: E501
        """Get tied game schedules  # noqa: E501

        This endpoint allows you to pull tie game schedules for the given season  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tie_games_with_http_info(season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season: Season of play (required)
        :param list[int] sport_id: Top level organization of a sport
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['season', 'sport_id', 'game_types', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tie_games" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `tie_games`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
            collection_formats['sportId'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/games/tied', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tracking_events_schedule(self, **kwargs):  # noqa: E501
        """Get tracking event schedules  # noqa: E501

        This endpoint allows you to pull schedules for tracking events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tracking_events_schedule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tracking_events_schedule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tracking_events_schedule_with_http_info(**kwargs)  # noqa: E501
            return data

    def tracking_events_schedule_with_http_info(self, **kwargs):  # noqa: E501
        """Get tracking event schedules  # noqa: E501

        This endpoint allows you to pull schedules for tracking events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tracking_events_schedule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CalendarTypes] calendar_types: Comma delimited list of type of calendar types
        :param list[CalendarTypes] event_types: Comma delimited list of type of events. <b>Note: Don't Use. This will be deprecated in favor of calendarTypes</b>
        :param list[int] team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] league_id: Unique League Identifier
        :param list[int] sport_id: Top level organization of a sport
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[int] event_ids: A unique identifier for non-game event
        :param list[int] venue_ids: Unique Venue Identifier
        :param list[int] performer_ids: A unique identifier for non-team event performers
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool use_latest_games:
        :param list[int] opponent_id: A unique identifier for the opposing team. Must be used with Team ID
        :param PublicFacingEnum public_facing: Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calendar_types', 'event_types', 'team_id', 'league_id', 'sport_id', 'game_pk', 'game_pks', 'event_ids', 'venue_ids', 'performer_ids', 'game_types', 'game_type', 'season', 'seasons', '_date', 'start_date', 'end_date', 'timecode', 'use_latest_games', 'opponent_id', 'public_facing', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tracking_events_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'calendar_types' in params:
            query_params.append(('calendarTypes', params['calendar_types']))  # noqa: E501
            collection_formats['calendarTypes'] = 'multi'  # noqa: E501
        if 'event_types' in params:
            query_params.append(('eventTypes', params['event_types']))  # noqa: E501
            collection_formats['eventTypes'] = 'multi'  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
            collection_formats['teamId'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
            collection_formats['leagueId'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
            collection_formats['sportId'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
            collection_formats['eventIds'] = 'multi'  # noqa: E501
        if 'venue_ids' in params:
            query_params.append(('venueIds', params['venue_ids']))  # noqa: E501
            collection_formats['venueIds'] = 'multi'  # noqa: E501
        if 'performer_ids' in params:
            query_params.append(('performerIds', params['performer_ids']))  # noqa: E501
            collection_formats['performerIds'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
            collection_formats['gameType'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
            collection_formats['season'] = 'multi'  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'use_latest_games' in params:
            query_params.append(('useLatestGames', params['use_latest_games']))  # noqa: E501
        if 'opponent_id' in params:
            query_params.append(('opponentId', params['opponent_id']))  # noqa: E501
            collection_formats['opponentId'] = 'multi'  # noqa: E501
        if 'public_facing' in params:
            query_params.append(('publicFacing', params['public_facing']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/trackingEvents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tune_in(self, **kwargs):  # noqa: E501
        """Get postseason TuneIn schedules  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tune_in(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param str season: Unique Primary Key Representing a Game
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tune_in_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tune_in_with_http_info(**kwargs)  # noqa: E501
            return data

    def tune_in_with_http_info(self, **kwargs):  # noqa: E501
        """Get postseason TuneIn schedules  # noqa: E501

        This endpoint allows you to pull postseason schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tune_in_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Unique League Identifier
        :param str season: Unique Primary Key Representing a Game
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'sport_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tune_in" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/schedule/postseason/tuneIn', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
