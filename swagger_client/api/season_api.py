# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SeasonApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_seasons(self, **kwargs):  # noqa: E501
        """View all seasons  # noqa: E501

        This endpoint allows you to view all seasons for a given Division, League or Sport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_seasons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int division_id: Unique Division Identifier
        :param int league_id: Unique League Identifier
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_seasons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_seasons_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_seasons_with_http_info(self, **kwargs):  # noqa: E501
        """View all seasons  # noqa: E501

        This endpoint allows you to view all seasons for a given Division, League or Sport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_seasons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int division_id: Unique Division Identifier
        :param int league_id: Unique League Identifier
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division_id', 'league_id', 'sport_id', 'with_game_type_dates', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_seasons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'division_id' in params:
            query_params.append(('divisionId', params['division_id']))  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'with_game_type_dates' in params:
            query_params.append(('withGameTypeDates', params['with_game_type_dates']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seasons/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SeasonsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seasons(self, season_id, **kwargs):  # noqa: E501
        """View season info  # noqa: E501

        This endpoint allows you to pull seasons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seasons(season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season_id: Season of play (required)
        :param list[str] season: Season of play
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seasons_with_http_info(season_id, **kwargs)  # noqa: E501
        else:
            (data) = self.seasons_with_http_info(season_id, **kwargs)  # noqa: E501
            return data

    def seasons_with_http_info(self, season_id, **kwargs):  # noqa: E501
        """View season info  # noqa: E501

        This endpoint allows you to pull seasons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seasons_with_http_info(season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season_id: Season of play (required)
        :param list[str] season: Season of play
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['season_id', 'season', 'sport_id', 'with_game_type_dates', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seasons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'season_id' is set
        if ('season_id' not in params or
                params['season_id'] is None):
            raise ValueError("Missing the required parameter `season_id` when calling `seasons`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'season_id' in params:
            path_params['seasonId'] = params['season_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
            collection_formats['season'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'with_game_type_dates' in params:
            query_params.append(('withGameTypeDates', params['with_game_type_dates']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SeasonsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seasons1(self, season_id, **kwargs):  # noqa: E501
        """View season info  # noqa: E501

        This endpoint allows you to pull seasons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seasons1(season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season_id: Season of play (required)
        :param list[str] season: Season of play
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seasons1_with_http_info(season_id, **kwargs)  # noqa: E501
        else:
            (data) = self.seasons1_with_http_info(season_id, **kwargs)  # noqa: E501
            return data

    def seasons1_with_http_info(self, season_id, **kwargs):  # noqa: E501
        """View season info  # noqa: E501

        This endpoint allows you to pull seasons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seasons1_with_http_info(season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season_id: Season of play (required)
        :param list[str] season: Season of play
        :param int sport_id: Top level organization of a sport
        :param bool with_game_type_dates: Retrieve dates for each game type
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SeasonsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['season_id', 'season', 'sport_id', 'with_game_type_dates', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seasons1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'season_id' is set
        if ('season_id' not in params or
                params['season_id'] is None):
            raise ValueError("Missing the required parameter `season_id` when calling `seasons1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'season_id' in params:
            path_params['seasonId'] = params['season_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
            collection_formats['season'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'with_game_type_dates' in params:
            query_params.append(('withGameTypeDates', params['with_game_type_dates']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seasons/{seasonId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SeasonsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
