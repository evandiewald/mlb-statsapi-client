# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MilestonesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def achievement_statuses(self, **kwargs):  # noqa: E501
        """View available achievementStatus options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.achievement_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneAchievementType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.achievement_statuses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.achievement_statuses_with_http_info(**kwargs)  # noqa: E501
            return data

    def achievement_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """View available achievementStatus options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.achievement_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneAchievementType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method achievement_statuses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/achievementStatuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MilestoneAchievementType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def milestone_durations(self, **kwargs):  # noqa: E501
        """View available milestoneDurations options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_durations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneDuration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.milestone_durations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.milestone_durations_with_http_info(**kwargs)  # noqa: E501
            return data

    def milestone_durations_with_http_info(self, **kwargs):  # noqa: E501
        """View available milestoneDurations options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_durations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneDuration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method milestone_durations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/milestoneDurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MilestoneDuration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def milestone_lookups(self, **kwargs):  # noqa: E501
        """View available milestoneLookup options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_lookups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, list[object])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.milestone_lookups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.milestone_lookups_with_http_info(**kwargs)  # noqa: E501
            return data

    def milestone_lookups_with_http_info(self, **kwargs):  # noqa: E501
        """View available milestoneLookup options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_lookups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, list[object])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method milestone_lookups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/milestoneLookups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[object])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def milestone_statistics(self, **kwargs):  # noqa: E501
        """View available milestone statistics options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneStatisticRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.milestone_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.milestone_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def milestone_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """View available milestone statistics options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneStatisticRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method milestone_statistics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/milestoneStatistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MilestoneStatisticRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def milestone_types(self, **kwargs):  # noqa: E501
        """View available milestoneType options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.milestone_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.milestone_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def milestone_types_with_http_info(self, **kwargs):  # noqa: E501
        """View available milestoneType options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestone_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MilestoneType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method milestone_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/milestoneTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MilestoneType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def milestones(self, **kwargs):  # noqa: E501
        """View pending and achieved milestones.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestones(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationType org_type: Organization level. Format: T(Team), L(League), S(Sport)
        :param list[MilestoneAchievementType] achievement_statuses: Comma delimited list of milestone achievement types
        :param list[MilestoneType] milestone_types: Comma delimited list of milestone types
        :param bool is_last_achievement: Filters out milestones that have already been surpassed.
        :param list[Statistic] milestone_statistics: Comma delimited list of milestone statistics
        :param list[int] milestone_values: Comma delimited list of milestone values
        :param list[int] player_ids: A unique identifier for players
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param StatGroup stat_group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[int] venue_ids: Comma delimited list of Unique venue identifiers
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param int limit: Number of results to return
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool show_firsts: True to show play first milestones, like first HR, first Save, etc
        :return: MilestoneContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.milestones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.milestones_with_http_info(**kwargs)  # noqa: E501
            return data

    def milestones_with_http_info(self, **kwargs):  # noqa: E501
        """View pending and achieved milestones.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.milestones_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationType org_type: Organization level. Format: T(Team), L(League), S(Sport)
        :param list[MilestoneAchievementType] achievement_statuses: Comma delimited list of milestone achievement types
        :param list[MilestoneType] milestone_types: Comma delimited list of milestone types
        :param bool is_last_achievement: Filters out milestones that have already been surpassed.
        :param list[Statistic] milestone_statistics: Comma delimited list of milestone statistics
        :param list[int] milestone_values: Comma delimited list of milestone values
        :param list[int] player_ids: A unique identifier for players
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param StatGroup stat_group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[int] venue_ids: Comma delimited list of Unique venue identifiers
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param int limit: Number of results to return
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool show_firsts: True to show play first milestones, like first HR, first Save, etc
        :return: MilestoneContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_type', 'achievement_statuses', 'milestone_types', 'is_last_achievement', 'milestone_statistics', 'milestone_values', 'player_ids', 'team_ids', 'league_ids', 'stat_group', 'season', 'seasons', 'venue_ids', 'game_pks', 'limit', 'fields', 'show_firsts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method milestones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_type' in params:
            query_params.append(('orgType', params['org_type']))  # noqa: E501
        if 'achievement_statuses' in params:
            query_params.append(('achievementStatuses', params['achievement_statuses']))  # noqa: E501
            collection_formats['achievementStatuses'] = 'multi'  # noqa: E501
        if 'milestone_types' in params:
            query_params.append(('milestoneTypes', params['milestone_types']))  # noqa: E501
            collection_formats['milestoneTypes'] = 'multi'  # noqa: E501
        if 'is_last_achievement' in params:
            query_params.append(('isLastAchievement', params['is_last_achievement']))  # noqa: E501
        if 'milestone_statistics' in params:
            query_params.append(('milestoneStatistics', params['milestone_statistics']))  # noqa: E501
            collection_formats['milestoneStatistics'] = 'multi'  # noqa: E501
        if 'milestone_values' in params:
            query_params.append(('milestoneValues', params['milestone_values']))  # noqa: E501
            collection_formats['milestoneValues'] = 'multi'  # noqa: E501
        if 'player_ids' in params:
            query_params.append(('playerIds', params['player_ids']))  # noqa: E501
            collection_formats['playerIds'] = 'multi'  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'stat_group' in params:
            query_params.append(('statGroup', params['stat_group']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'venue_ids' in params:
            query_params.append(('venueIds', params['venue_ids']))  # noqa: E501
            collection_formats['venueIds'] = 'multi'  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'show_firsts' in params:
            query_params.append(('showFirsts', params['show_firsts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/milestones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MilestoneContainerRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
