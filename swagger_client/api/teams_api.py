# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TeamsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def affiliates(self, team_id, **kwargs):  # noqa: E501
        """View team and affiliate teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.affiliates(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.affiliates_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.affiliates_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def affiliates_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View team and affiliate teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.affiliates_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'team_ids', 'sport_id', 'season', 'game_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method affiliates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `affiliates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/affiliates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def affiliates1(self, team_id, **kwargs):  # noqa: E501
        """View team and affiliate teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.affiliates1(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.affiliates1_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.affiliates1_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def affiliates1_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View team and affiliate teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.affiliates1_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'team_ids', 'sport_id', 'season', 'game_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method affiliates1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `affiliates1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/affiliates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_teams(self, team_id, **kwargs):  # noqa: E501
        """View historical records for a list of teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_teams(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param str start_season: Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'
        :param str end_season: End date for range of data (used with start date optionally). Format: '2018' or '2018.2'
        :param list[str] fields:
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_teams_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_teams_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def all_teams_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View historical records for a list of teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_teams_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param str start_season: Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'
        :param str end_season: End date for range of data (used with start date optionally). Format: '2018' or '2018.2'
        :param list[str] fields:
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'team_ids', 'start_season', 'end_season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `all_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'start_season' in params:
            query_params.append(('startSeason', params['start_season']))  # noqa: E501
        if 'end_season' in params:
            query_params.append(('endSeason', params['end_season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_teams1(self, team_id, **kwargs):  # noqa: E501
        """View historical records for a list of teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_teams1(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param str start_season: Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'
        :param str end_season: End date for range of data (used with start date optionally). Format: '2018' or '2018.2'
        :param list[str] fields:
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_teams1_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_teams1_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def all_teams1_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View historical records for a list of teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_teams1_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param str start_season: Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'
        :param str end_season: End date for range of data (used with start date optionally). Format: '2018' or '2018.2'
        :param list[str] fields:
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'team_ids', 'start_season', 'end_season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_teams1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `all_teams1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'start_season' in params:
            query_params.append(('startSeason', params['start_season']))  # noqa: E501
        if 'end_season' in params:
            query_params.append(('endSeason', params['end_season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alumni(self, team_id, season, **kwargs):  # noqa: E501
        """View all team alumni  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alumni(team_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play (required)
        :param StatGroup group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields:
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alumni_with_http_info(team_id, season, **kwargs)  # noqa: E501
        else:
            (data) = self.alumni_with_http_info(team_id, season, **kwargs)  # noqa: E501
            return data

    def alumni_with_http_info(self, team_id, season, **kwargs):  # noqa: E501
        """View all team alumni  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alumni_with_http_info(team_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play (required)
        :param StatGroup group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields:
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', 'group', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alumni" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `alumni`")  # noqa: E501
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `alumni`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/alumni', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coaches(self, team_id, **kwargs):  # noqa: E501
        """View all coaches for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coaches(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields:
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coaches_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.coaches_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def coaches_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View all coaches for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coaches_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields:
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', '_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coaches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `coaches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/coaches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def leaders(self, team_id, **kwargs):  # noqa: E501
        """View team stat leaders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: (required)
        :param list[PersonLeadersEnum] leader_categories:
        :param str season:
        :param list[GameTypeEnum] leader_game_types:
        :param list[ExpandEnum] expand:
        :param int limit:
        :param int offset:
        :param PlayerPoolEnum player_pool:
        :param list[str] fields:
        :return: TeamLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.leaders_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.leaders_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def leaders_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View team stat leaders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: (required)
        :param list[PersonLeadersEnum] leader_categories:
        :param str season:
        :param list[GameTypeEnum] leader_game_types:
        :param list[ExpandEnum] expand:
        :param int limit:
        :param int offset:
        :param PlayerPoolEnum player_pool:
        :param list[str] fields:
        :return: TeamLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'leader_categories', 'season', 'leader_game_types', 'expand', 'limit', 'offset', 'player_pool', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method leaders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `leaders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'leader_categories' in params:
            query_params.append(('leaderCategories', params['leader_categories']))  # noqa: E501
            collection_formats['leaderCategories'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'leader_game_types' in params:
            query_params.append(('leaderGameTypes', params['leader_game_types']))  # noqa: E501
            collection_formats['leaderGameTypes'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
            collection_formats['expand'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'player_pool' in params:
            query_params.append(('playerPool', params['player_pool']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/leaders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamLeaderContainerRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def leaders1(self, **kwargs):  # noqa: E501
        """View leaders for team stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PersonLeadersEnum] leader_categories: TBD
        :param list[GameTypeEnum] game_types: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param StatType stat_type:
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[StatGroup] stat_group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param str sit_codes: Situation code for a given stat split.
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields:
        :return: LeagueLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.leaders1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.leaders1_with_http_info(**kwargs)  # noqa: E501
            return data

    def leaders1_with_http_info(self, **kwargs):  # noqa: E501
        """View leaders for team stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PersonLeadersEnum] leader_categories: TBD
        :param list[GameTypeEnum] game_types: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param StatType stat_type:
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[StatGroup] stat_group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param str sit_codes: Situation code for a given stat split.
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields:
        :return: LeagueLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['leader_categories', 'game_types', 'stats', 'stat_type', 'sport_id', 'sport_ids', 'league_id', 'league_ids', 'season', 'stat_group', 'group', 'start_date', 'end_date', 'days_back', 'sit_codes', 'opposing_team_id', 'limit', 'offset', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method leaders1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'leader_categories' in params:
            query_params.append(('leaderCategories', params['leader_categories']))  # noqa: E501
            collection_formats['leaderCategories'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'stat_type' in params:
            query_params.append(('statType', params['stat_type']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'stat_group' in params:
            query_params.append(('statGroup', params['stat_group']))  # noqa: E501
            collection_formats['statGroup'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/stats/leaders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueLeaderContainerRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def personnel(self, team_id, **kwargs):  # noqa: E501
        """View all coaches for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.personnel(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields:
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.personnel_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.personnel_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def personnel_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View all coaches for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.personnel_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields:
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', '_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method personnel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `personnel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/personnel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster(self, team_id, roster_type, **kwargs):  # noqa: E501
        """View a teams roster  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster(team_id, roster_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str roster_type: Type of roster. Available types in /api/v1/rosterTypes (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_with_http_info(team_id, roster_type, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_with_http_info(team_id, roster_type, **kwargs)  # noqa: E501
            return data

    def roster_with_http_info(self, team_id, roster_type, **kwargs):  # noqa: E501
        """View a teams roster  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_with_http_info(team_id, roster_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str roster_type: Type of roster. Available types in /api/v1/rosterTypes (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'roster_type', 'season', '_date', 'game_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `roster`")  # noqa: E501
        # verify the required parameter 'roster_type' is set
        if ('roster_type' not in params or
                params['roster_type'] is None):
            raise ValueError("Missing the required parameter `roster_type` when calling `roster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'roster_type' in params:
            path_params['rosterType'] = params['roster_type']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/roster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster1(self, team_id, roster_type, **kwargs):  # noqa: E501
        """View a teams roster  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster1(team_id, roster_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str roster_type: Type of roster. Available types in /api/v1/rosterTypes (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster1_with_http_info(team_id, roster_type, **kwargs)  # noqa: E501
        else:
            (data) = self.roster1_with_http_info(team_id, roster_type, **kwargs)  # noqa: E501
            return data

    def roster1_with_http_info(self, team_id, roster_type, **kwargs):  # noqa: E501
        """View a teams roster  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster1_with_http_info(team_id, roster_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str roster_type: Type of roster. Available types in /api/v1/rosterTypes (required)
        :param str season: Season of play
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'roster_type', 'season', '_date', 'game_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `roster1`")  # noqa: E501
        # verify the required parameter 'roster_type' is set
        if ('roster_type' not in params or
                params['roster_type'] is None):
            raise ValueError("Missing the required parameter `roster_type` when calling `roster1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'roster_type' in params:
            path_params['rosterType'] = params['roster_type']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/roster/{rosterType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats(self, team_id, group, **kwargs):  # noqa: E501
        """View a teams stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats(team_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param str sit_codes: Situation code for a given stat split.
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats_with_http_info(team_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.stats_with_http_info(team_id, group, **kwargs)  # noqa: E501
            return data

    def stats_with_http_info(self, team_id, group, **kwargs):  # noqa: E501
        """View a teams stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_with_http_info(team_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int sport_id: Top level organization of a sport
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param str sit_codes: Situation code for a given stat split.
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'group', 'sport_id', 'season', 'game_type', 'stats', 'sort_stat', 'order', 'group_by', 'opposing_team_id', 'opposing_player_id', 'sit_codes', 'start_date', 'end_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `stats`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'sort_stat' in params:
            query_params.append(('sortStat', params['sort_stat']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'multi'  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'opposing_player_id' in params:
            query_params.append(('opposingPlayerId', params['opposing_player_id']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats1(self, group, **kwargs):  # noqa: E501
        """View a teams stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats1(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param str sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param list[str] fields:
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats1_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.stats1_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def stats1_with_http_info(self, group, **kwargs):  # noqa: E501
        """View a teams stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats1_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param str sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param list[str] fields:
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'game_type', 'stats', 'sport_id', 'sport_ids', 'league_ids', 'season', 'sort_stat', 'order', 'start_date', 'end_date', 'days_back', 'sit_codes', 'combine_sits', 'opposing_team_id', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `stats1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'sort_stat' in params:
            query_params.append(('sortStat', params['sort_stat']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
        if 'combine_sits' in params:
            query_params.append(('combineSits', params['combine_sits']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams(self, team_id, **kwargs):  # noqa: E501
        """View info for all teams  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param int sport_id: Top level organization of a sport
        :param int division_id: Unique Division Identifier
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param TeamActiveStatusEnum active_status: Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[AllStarEnum] all_star_statuses:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def teams_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View info for all teams  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param int sport_id: Top level organization of a sport
        :param int division_id: Unique Division Identifier
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param TeamActiveStatusEnum active_status: Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[AllStarEnum] all_star_statuses:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', 'sport_id', 'division_id', 'game_type', 'league_ids', 'sport_ids', 'active_status', 'league_list_id', 'all_star_statuses', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'division_id' in params:
            query_params.append(('divisionId', params['division_id']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'all_star_statuses' in params:
            query_params.append(('allStarStatuses', params['all_star_statuses']))  # noqa: E501
            collection_formats['allStarStatuses'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams1(self, team_id, **kwargs):  # noqa: E501
        """View info for all teams  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams1(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param int sport_id: Top level organization of a sport
        :param int division_id: Unique Division Identifier
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param TeamActiveStatusEnum active_status: Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[AllStarEnum] all_star_statuses:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams1_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.teams1_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def teams1_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """View info for all teams  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams1_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play
        :param int sport_id: Top level organization of a sport
        :param int division_id: Unique Division Identifier
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param TeamActiveStatusEnum active_status: Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[AllStarEnum] all_star_statuses:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TeamsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', 'sport_id', 'division_id', 'game_type', 'league_ids', 'sport_ids', 'active_status', 'league_list_id', 'all_star_statuses', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `teams1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'division_id' in params:
            query_params.append(('divisionId', params['division_id']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'all_star_statuses' in params:
            query_params.append(('allStarStatuses', params['all_star_statuses']))  # noqa: E501
            collection_formats['allStarStatuses'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alumni(self, team_id, season, **kwargs):  # noqa: E501
        """update_alumni  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alumni(team_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play (required)
        :param StatGroup group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alumni_with_http_info(team_id, season, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alumni_with_http_info(team_id, season, **kwargs)  # noqa: E501
            return data

    def update_alumni_with_http_info(self, team_id, season, **kwargs):  # noqa: E501
        """update_alumni  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alumni_with_http_info(team_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc (required)
        :param str season: Season of play (required)
        :param StatGroup group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'season', 'group', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alumni" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_alumni`")  # noqa: E501
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `update_alumni`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/teams/{teamId}/alumni', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
