# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def transactions(self, **kwargs):  # noqa: E501
        """View transaction info  # noqa: E501

        This endpoint allows you to pull transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] league_id: Comma delimited list of Unique league identifiers
        :param list[int] sport_id: Comma delimited list of top level organizations of a sport
        :param list[int] team_id: Comma delimited list of Unique Team identifiers
        :param list[int] player_id: A unique identifier for a player
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param list[int] transaction_ids:
        :param list[str] transaction_types:
        :param list[int] division_ids:
        :param SortOrderEnum order:
        :param int limit:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TransactionsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transactions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transactions_with_http_info(**kwargs)  # noqa: E501
            return data

    def transactions_with_http_info(self, **kwargs):  # noqa: E501
        """View transaction info  # noqa: E501

        This endpoint allows you to pull transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] league_id: Comma delimited list of Unique league identifiers
        :param list[int] sport_id: Comma delimited list of top level organizations of a sport
        :param list[int] team_id: Comma delimited list of Unique Team identifiers
        :param list[int] player_id: A unique identifier for a player
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param list[int] transaction_ids:
        :param list[str] transaction_types:
        :param list[int] division_ids:
        :param SortOrderEnum order:
        :param int limit:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: TransactionsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'sport_id', 'team_id', 'player_id', '_date', 'start_date', 'end_date', 'transaction_ids', 'transaction_types', 'division_ids', 'order', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transactions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
            collection_formats['leagueId'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
            collection_formats['sportId'] = 'multi'  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
            collection_formats['teamId'] = 'multi'  # noqa: E501
        if 'player_id' in params:
            query_params.append(('playerId', params['player_id']))  # noqa: E501
            collection_formats['playerId'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'transaction_ids' in params:
            query_params.append(('transactionIds', params['transaction_ids']))  # noqa: E501
            collection_formats['transactionIds'] = 'multi'  # noqa: E501
        if 'transaction_types' in params:
            query_params.append(('transactionTypes', params['transaction_types']))  # noqa: E501
            collection_formats['transactionTypes'] = 'multi'  # noqa: E501
        if 'division_ids' in params:
            query_params.append(('divisionIds', params['division_ids']))  # noqa: E501
            collection_formats['divisionIds'] = 'multi'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
