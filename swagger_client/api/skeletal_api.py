# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SkeletalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def skeletal_chunked(self, game_pk, play_id, file_name, **kwargs):  # noqa: E501
        """View Skeletal Data by playId and gameId chunked  # noqa: E501

        This endpoint allows you to pull chunked skeletal tracking data by gameId and playId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skeletal_chunked(game_pk, play_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique play identifier (required)
        :param str file_name: Skeletal chunked file name (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skeletal_chunked_with_http_info(game_pk, play_id, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.skeletal_chunked_with_http_info(game_pk, play_id, file_name, **kwargs)  # noqa: E501
            return data

    def skeletal_chunked_with_http_info(self, game_pk, play_id, file_name, **kwargs):  # noqa: E501
        """View Skeletal Data by playId and gameId chunked  # noqa: E501

        This endpoint allows you to pull chunked skeletal tracking data by gameId and playId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skeletal_chunked_with_http_info(game_pk, play_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique play identifier (required)
        :param str file_name: Skeletal chunked file name (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'play_id', 'file_name', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skeletal_chunked" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `skeletal_chunked`")  # noqa: E501
        # verify the required parameter 'play_id' is set
        if ('play_id' not in params or
                params['play_id'] is None):
            raise ValueError("Missing the required parameter `play_id` when calling `skeletal_chunked`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `skeletal_chunked`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'play_id' in params:
            path_params['playId'] = params['play_id']  # noqa: E501

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{playId}/analytics/skeletalData/chunked', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skeletal_data_file_names(self, game_pk, play_id, **kwargs):  # noqa: E501
        """View Skeletal Data by playId and gameId files  # noqa: E501

        This endpoint allows you to pull chunked skeletal tracking data by gameId and playId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skeletal_data_file_names(game_pk, play_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique play identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SkeletalFileData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skeletal_data_file_names_with_http_info(game_pk, play_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skeletal_data_file_names_with_http_info(game_pk, play_id, **kwargs)  # noqa: E501
            return data

    def skeletal_data_file_names_with_http_info(self, game_pk, play_id, **kwargs):  # noqa: E501
        """View Skeletal Data by playId and gameId files  # noqa: E501

        This endpoint allows you to pull chunked skeletal tracking data by gameId and playId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skeletal_data_file_names_with_http_info(game_pk, play_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique play identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: SkeletalFileData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'play_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skeletal_data_file_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `skeletal_data_file_names`")  # noqa: E501
        # verify the required parameter 'play_id' is set
        if ('play_id' not in params or
                params['play_id'] is None):
            raise ValueError("Missing the required parameter `play_id` when calling `skeletal_data_file_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'play_id' in params:
            path_params['playId'] = params['play_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{playId}/analytics/skeletalData/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkeletalFileData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
