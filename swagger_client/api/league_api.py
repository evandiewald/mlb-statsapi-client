# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LeagueApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_star_ballot(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_ballot_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_ballot_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_ballot_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_ballot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_ballot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league/allStarBallot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_ballot1(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot1(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_ballot1_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_ballot1_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_ballot1_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot1_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_ballot1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_ballot1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league/{leagueId}/allStarBallot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_ballot2(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot2(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_ballot2_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_ballot2_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_ballot2_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot2_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_ballot2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_ballot2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues/allStarBallot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_ballot3(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot3(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_ballot3_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_ballot3_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_ballot3_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View al star ballot info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_ballot3_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_ballot3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_ballot3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues/{leagueId}/allStarBallot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_final_vote(self, league_id, **kwargs):  # noqa: E501
        """View all star final vote info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_final_vote(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_final_vote_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_final_vote_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_final_vote_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View all star final vote info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_final_vote_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_final_vote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_final_vote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league/{leagueId}/allStarFinalVote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_final_vote1(self, league_id, **kwargs):  # noqa: E501
        """View all star final vote info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_final_vote1(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_final_vote1_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_final_vote1_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_final_vote1_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View all star final vote info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_final_vote1_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_final_vote1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_final_vote1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues/{leagueId}/allStarFinalVote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_write_ins(self, league_id, **kwargs):  # noqa: E501
        """View all star write ins info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_write_ins(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_write_ins_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_write_ins_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_write_ins_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View all star write ins info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_write_ins_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_write_ins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_write_ins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league/{leagueId}/allStarWriteIns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_star_write_ins1(self, league_id, **kwargs):  # noqa: E501
        """View all star write ins info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_write_ins1(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_star_write_ins1_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_star_write_ins1_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def all_star_write_ins1_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View all star write ins info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_star_write_ins1_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_star_write_ins1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `all_star_write_ins1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues/{leagueId}/allStarWriteIns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def league_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'seasons', 'fields', 'sport_id', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league1(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league1(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league1_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league1_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def league1_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league1_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'seasons', 'fields', 'sport_id', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `league1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/league/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league2(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league2(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league2_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league2_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def league2_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league2_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'seasons', 'fields', 'sport_id', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `league2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league3(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league3(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league3_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league3_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def league3_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """View league info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league3_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Unique League Identifier (required)
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int sport_id: Top level organization of a sport
        :param LeagueActiveStatusEnum active_status: Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'league_ids', 'season', 'seasons', 'fields', 'sport_id', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `league3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/leagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
