# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GameApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def boxscore(self, game_pk, **kwargs):  # noqa: E501
        """Get game boxscore.  # noqa: E501

        This endpoint allows you to pull a boxscore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boxscore(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param int num_players: Number of top player game scores to show. Default is 3.
        :param bool no_ties: If set to false, will show all players tied for the last spot in the game scores list.
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballBoxscoreRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.boxscore_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.boxscore_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def boxscore_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get game boxscore.  # noqa: E501

        This endpoint allows you to pull a boxscore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boxscore_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param int num_players: Number of top player game scores to show. Default is 3.
        :param bool no_ties: If set to false, will show all players tied for the last spot in the game scores list.
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballBoxscoreRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields', 'inclusive_timecode', 'num_players', 'no_ties', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boxscore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `boxscore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501
        if 'num_players' in params:
            query_params.append(('numPlayers', params['num_players']))  # noqa: E501
        if 'no_ties' in params:
            query_params.append(('noTies', params['no_ties']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/boxscore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballBoxscoreRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def color_feed(self, game_pk, **kwargs):  # noqa: E501
        """Get game color feed.  # noqa: E501

        This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use \"Accept-Encoding: gzip\" header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.color_feed(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.color_feed_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.color_feed_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def color_feed_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get game color feed.  # noqa: E501

        This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use \"Accept-Encoding: gzip\" header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.color_feed_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method color_feed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `color_feed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/feed/color', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def color_timestamps(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all of the color timestamps for a game.  # noqa: E501

        This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/color  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.color_timestamps(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.color_timestamps_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.color_timestamps_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def color_timestamps_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all of the color timestamps for a game.  # noqa: E501

        This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/color  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.color_timestamps_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method color_timestamps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `color_timestamps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/feed/color/timestamps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all content for a game.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param int highlight_limit: Number of results to return
        :return: GameContentRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.content_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def content_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all content for a game.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param int highlight_limit: Number of results to return
        :return: GameContentRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'highlight_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'highlight_limit' in params:
            query_params.append(('highlightLimit', params['highlight_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GameContentRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def current_game_stats1(self, **kwargs):  # noqa: E501
        """View a game change log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_game_stats1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime updated_since: Format: YYYY-MM-DDTHH:MM:SSZ
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.current_game_stats1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.current_game_stats1_with_http_info(**kwargs)  # noqa: E501
            return data

    def current_game_stats1_with_http_info(self, **kwargs):  # noqa: E501
        """View a game change log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_game_stats1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime updated_since: Format: YYYY-MM-DDTHH:MM:SSZ
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GameTypeEnum] game_types: Comma delimited list of type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updated_since', 'sport_id', 'sport_ids', 'game_type', 'game_types', 'season', 'game_pks', 'limit', 'offset', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method current_game_stats1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'updated_since' in params:
            query_params.append(('updatedSince', params['updated_since']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_game_context_metrics(self, game_pk, **kwargs):  # noqa: E501
        """Get the context metrics for this game based on its current state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_context_metrics(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BaseballGameContextRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_game_context_metrics_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_game_context_metrics_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_game_context_metrics_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get the context metrics for this game based on its current state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_context_metrics_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BaseballGameContextRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_game_context_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_game_context_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/contextMetrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballGameContextRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_game_with_metrics(self, game_pk, **kwargs):  # noqa: E501
        """Get game info with metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_with_metrics(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballGameRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_game_with_metrics_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_game_with_metrics_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_game_with_metrics_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get game info with metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_with_metrics_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballGameRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'inclusive_timecode', 'fields', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_game_with_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_game_with_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/withMetrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballGameRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_win_probability(self, game_pk, **kwargs):  # noqa: E501
        """Get the win probability for this game  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_win_probability(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: list[BaseballPlayRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_win_probability_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_win_probability_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_win_probability_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get the win probability for this game  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_win_probability_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: list[BaseballPlayRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields', 'inclusive_timecode', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_win_probability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_win_probability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/winProbability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BaseballPlayRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linescore(self, game_pk, **kwargs):  # noqa: E501
        """Get game linescore  # noqa: E501

        This endpoint allows you to pull the linescore for a game  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linescore(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :return: BaseballLinescoreRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linescore_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.linescore_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def linescore_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get game linescore  # noqa: E501

        This endpoint allows you to pull the linescore for a game  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linescore_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :return: BaseballLinescoreRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields', 'inclusive_timecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linescore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `linescore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/linescore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballLinescoreRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def live_game_diff_patch_v1(self, game_pk, **kwargs):  # noqa: E501
        """Get live game status diffPatch.  # noqa: E501

        This endpoint allows comparison of game files and shows any differences/discrepancies between the two<br/><br/><b>Diff/Patch System:</b> startTimecode and endTimecode can be used for getting diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing startTimecode or endTimecode.  This will return the most recent game state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait X seconds<br/> 4) Use the timecode from 2 as the startTimecode.  This will give you a diff of everything that has happened since startTimecode.  <br/> 5) If no data is returned, wait X seconds and do the same request.  <br/> 6) If data is returned, get a new timeStamp from the response, and use that for the next call as startTimecode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_game_diff_patch_v1(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str start_timecode: Start time code will give you everything since that time. Format: MMDDYYYY_HHMMSS
        :param str end_timecode: End time code will give you a snapshot at that specific time. Format: MMDDYYYY_HHMMSS
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.live_game_diff_patch_v1_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.live_game_diff_patch_v1_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def live_game_diff_patch_v1_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get live game status diffPatch.  # noqa: E501

        This endpoint allows comparison of game files and shows any differences/discrepancies between the two<br/><br/><b>Diff/Patch System:</b> startTimecode and endTimecode can be used for getting diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing startTimecode or endTimecode.  This will return the most recent game state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait X seconds<br/> 4) Use the timecode from 2 as the startTimecode.  This will give you a diff of everything that has happened since startTimecode.  <br/> 5) If no data is returned, wait X seconds and do the same request.  <br/> 6) If data is returned, get a new timeStamp from the response, and use that for the next call as startTimecode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_game_diff_patch_v1_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str start_timecode: Start time code will give you everything since that time. Format: MMDDYYYY_HHMMSS
        :param str end_timecode: End time code will give you a snapshot at that specific time. Format: MMDDYYYY_HHMMSS
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'start_timecode', 'end_timecode', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method live_game_diff_patch_v1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `live_game_diff_patch_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'start_timecode' in params:
            query_params.append(('startTimecode', params['start_timecode']))  # noqa: E501
        if 'end_timecode' in params:
            query_params.append(('endTimecode', params['end_timecode']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1.1/game/{game_pk}/feed/live/diffPatch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def live_game_v1(self, game_pk, **kwargs):  # noqa: E501
        """Get live game status.  # noqa: E501

        This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use \"Accept-Encoding: gzip\" header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_game_v1(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballGameRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.live_game_v1_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.live_game_v1_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def live_game_v1_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get live game status.  # noqa: E501

        This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use \"Accept-Encoding: gzip\" header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_game_v1_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballGameRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields', 'inclusive_timecode', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method live_game_v1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `live_game_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1.1/game/{game_pk}/feed/live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballGameRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def live_timestampv11(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all of the play timestamps for a game.  # noqa: E501

        This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/live  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_timestampv11(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.live_timestampv11_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.live_timestampv11_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def live_timestampv11_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Retrieve all of the play timestamps for a game.  # noqa: E501

        This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/live  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.live_timestampv11_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method live_timestampv11" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `live_timestampv11`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1.1/game/{game_pk}/feed/live/timestamps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def play_by_play(self, game_pk, **kwargs):  # noqa: E501
        """Get game play By Play  # noqa: E501

        This endpoint allows you to pull the play by play of a game  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballPlayByPlayRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.play_by_play_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.play_by_play_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def play_by_play_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get game play By Play  # noqa: E501

        This endpoint allows you to pull the play by play of a game  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str timecode: Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool inclusive_timecode: True to include plays that happen before or at the specified timecode
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :return: BaseballPlayByPlayRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields', 'inclusive_timecode', 'accent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method play_by_play" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `play_by_play`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['game_pk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'inclusive_timecode' in params:
            query_params.append(('inclusiveTimecode', params['inclusive_timecode']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{game_pk}/playByPlay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballPlayByPlayRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
