# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JobApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def datacasters(self, **kwargs):  # noqa: E501
        """Get datacaster jobs  # noqa: E501

        Get datacaster jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datacasters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datacasters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.datacasters_with_http_info(**kwargs)  # noqa: E501
            return data

    def datacasters_with_http_info(self, **kwargs):  # noqa: E501
        """Get datacaster jobs  # noqa: E501

        Get datacaster jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datacasters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', '_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datacasters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/jobs/datacasters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs_by_type(self, job_type, **kwargs):  # noqa: E501
        """Get jobs by type  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_by_type(job_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_type: Job Type Identifier (ie. UMPR, etc..) (required)
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_by_type_with_http_info(job_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_by_type_with_http_info(job_type, **kwargs)  # noqa: E501
            return data

    def get_jobs_by_type_with_http_info(self, job_type, **kwargs):  # noqa: E501
        """Get jobs by type  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_by_type_with_http_info(job_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_type: Job Type Identifier (ie. UMPR, etc..) (required)
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_type', 'sport_id', '_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_type' is set
        if ('job_type' not in params or
                params['job_type'] is None):
            raise ValueError("Missing the required parameter `job_type` when calling `get_jobs_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'job_type' in params:
            query_params.append(('jobType', params['job_type']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def official_scorers(self, **kwargs):  # noqa: E501
        """Get official scorers  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.official_scorers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.official_scorers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.official_scorers_with_http_info(**kwargs)  # noqa: E501
            return data

    def official_scorers_with_http_info(self, **kwargs):  # noqa: E501
        """Get official scorers  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.official_scorers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', '_date', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method official_scorers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/jobs/officialScorers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def umpire_schedule(self, umpire_id, season, **kwargs):  # noqa: E501
        """Get umpires and associated game for umpireId  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.umpire_schedule(umpire_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int umpire_id: A unique identifier for an umpire (required)
        :param str season: Season of play (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.umpire_schedule_with_http_info(umpire_id, season, **kwargs)  # noqa: E501
        else:
            (data) = self.umpire_schedule_with_http_info(umpire_id, season, **kwargs)  # noqa: E501
            return data

    def umpire_schedule_with_http_info(self, umpire_id, season, **kwargs):  # noqa: E501
        """Get umpires and associated game for umpireId  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.umpire_schedule_with_http_info(umpire_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int umpire_id: A unique identifier for an umpire (required)
        :param str season: Season of play (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ScheduleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['umpire_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method umpire_schedule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'umpire_id' is set
        if ('umpire_id' not in params or
                params['umpire_id'] is None):
            raise ValueError("Missing the required parameter `umpire_id` when calling `umpire_schedule`")  # noqa: E501
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `umpire_schedule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'umpire_id' in params:
            path_params['umpireId'] = params['umpire_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/jobs/umpires/games/{umpireId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def umpires(self, **kwargs):  # noqa: E501
        """Get umpires  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.umpires(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param str season: Season of play
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.umpires_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.umpires_with_http_info(**kwargs)  # noqa: E501
            return data

    def umpires_with_http_info(self, **kwargs):  # noqa: E501
        """Get umpires  # noqa: E501

        This endpoint allows you to pull teams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.umpires_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param str season: Season of play
        :return: RosterRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', '_date', 'fields', 'season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method umpires" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/jobs/umpires', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosterRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
