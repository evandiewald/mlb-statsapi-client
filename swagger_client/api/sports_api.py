# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_sport_ballot(self, sport_id, season, **kwargs):  # noqa: E501
        """Get ALL MLB ballot for sport  # noqa: E501

        This endpoint allows you to get all players for MLB ballot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_sport_ballot(sport_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: season (required)
        :param list[str] fields:
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_sport_ballot_with_http_info(sport_id, season, **kwargs)  # noqa: E501
        else:
            (data) = self.all_sport_ballot_with_http_info(sport_id, season, **kwargs)  # noqa: E501
            return data

    def all_sport_ballot_with_http_info(self, sport_id, season, **kwargs):  # noqa: E501
        """Get ALL MLB ballot for sport  # noqa: E501

        This endpoint allows you to get all players for MLB ballot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_sport_ballot_with_http_info(sport_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: season (required)
        :param list[str] fields:
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', 'season', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_sport_ballot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport_id' is set
        if ('sport_id' not in params or
                params['sport_id'] is None):
            raise ValueError("Missing the required parameter `sport_id` when calling `all_sport_ballot`")  # noqa: E501
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `all_sport_ballot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport_id' in params:
            path_params['sportId'] = params['sport_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sports/{sportId}/allSportBallot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sport_players(self, sport_id, **kwargs):  # noqa: E501
        """Get all players for a sport level  # noqa: E501

        This endpoint allows you to pull all players for a given sport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sport_players(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param bool has_stats: Returns sports that have individual player stats
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sport_players_with_http_info(sport_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sport_players_with_http_info(sport_id, **kwargs)  # noqa: E501
            return data

    def sport_players_with_http_info(self, sport_id, **kwargs):  # noqa: E501
        """Get all players for a sport level  # noqa: E501

        This endpoint allows you to pull all players for a given sport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sport_players_with_http_info(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param bool has_stats: Returns sports that have individual player stats
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', 'season', 'game_type', 'has_stats', 'accent', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sport_players" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport_id' is set
        if ('sport_id' not in params or
                params['sport_id'] is None):
            raise ValueError("Missing the required parameter `sport_id` when calling `sport_players`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport_id' in params:
            path_params['sportId'] = params['sport_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'has_stats' in params:
            query_params.append(('hasStats', params['has_stats']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sports/{sportId}/players', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sports(self, sport_id, **kwargs):  # noqa: E501
        """Get sports information  # noqa: E501

        This endpoint allows you to pull sports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sports(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool has_stats: Returns sports that have individual player stats
        :param SportActiveStatusEnum active_status: Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: SportsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sports_with_http_info(sport_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sports_with_http_info(sport_id, **kwargs)  # noqa: E501
            return data

    def sports_with_http_info(self, sport_id, **kwargs):  # noqa: E501
        """Get sports information  # noqa: E501

        This endpoint allows you to pull sports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sports_with_http_info(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool has_stats: Returns sports that have individual player stats
        :param SportActiveStatusEnum active_status: Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: SportsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', 'season', 'fields', 'has_stats', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport_id' is set
        if ('sport_id' not in params or
                params['sport_id'] is None):
            raise ValueError("Missing the required parameter `sport_id` when calling `sports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport_id' in params:
            path_params['sportId'] = params['sport_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'has_stats' in params:
            query_params.append(('hasStats', params['has_stats']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SportsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sports1(self, sport_id, **kwargs):  # noqa: E501
        """Get sports information  # noqa: E501

        This endpoint allows you to pull sports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sports1(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool has_stats: Returns sports that have individual player stats
        :param SportActiveStatusEnum active_status: Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: SportsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sports1_with_http_info(sport_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sports1_with_http_info(sport_id, **kwargs)  # noqa: E501
            return data

    def sports1_with_http_info(self, sport_id, **kwargs):  # noqa: E501
        """Get sports information  # noqa: E501

        This endpoint allows you to pull sports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sports1_with_http_info(sport_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_id: Top level organization of a sport (required)
        :param str season: Season of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool has_stats: Returns sports that have individual player stats
        :param SportActiveStatusEnum active_status: Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)
        :return: SportsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_id', 'season', 'fields', 'has_stats', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sports1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sport_id' is set
        if ('sport_id' not in params or
                params['sport_id'] is None):
            raise ValueError("Missing the required parameter `sport_id` when calling `sports1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sport_id' in params:
            path_params['sportId'] = params['sport_id']  # noqa: E501

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'has_stats' in params:
            query_params.append(('hasStats', params['has_stats']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sports/{sportId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SportsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
