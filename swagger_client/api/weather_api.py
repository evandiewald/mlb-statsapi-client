# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WeatherApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def weather_basic(self, venue_id, **kwargs):  # noqa: E501
        """Get basic weather for a venue.  # noqa: E501

        Returns a json file containing basic weather for a specific venue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_basic(venue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int venue_id: Unique Venue Identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BasicWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.weather_basic_with_http_info(venue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.weather_basic_with_http_info(venue_id, **kwargs)  # noqa: E501
            return data

    def weather_basic_with_http_info(self, venue_id, **kwargs):  # noqa: E501
        """Get basic weather for a venue.  # noqa: E501

        Returns a json file containing basic weather for a specific venue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_basic_with_http_info(venue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int venue_id: Unique Venue Identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BasicWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['venue_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method weather_basic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'venue_id' is set
        if ('venue_id' not in params or
                params['venue_id'] is None):
            raise ValueError("Missing the required parameter `venue_id` when calling `weather_basic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'venue_id' in params:
            path_params['venueId'] = params['venue_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/weather/venues/{venueId}/basic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicWeatherWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def weather_data_based_on_play(self, game_pk, play_id, **kwargs):  # noqa: E501
        """Get the raw field weather data.  # noqa: E501

        Returns a json file containing weather for the current play.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_data_based_on_play(game_pk, play_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PlayWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.weather_data_based_on_play_with_http_info(game_pk, play_id, **kwargs)  # noqa: E501
        else:
            (data) = self.weather_data_based_on_play_with_http_info(game_pk, play_id, **kwargs)  # noqa: E501
            return data

    def weather_data_based_on_play_with_http_info(self, game_pk, play_id, **kwargs):  # noqa: E501
        """Get the raw field weather data.  # noqa: E501

        Returns a json file containing weather for the current play.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_data_based_on_play_with_http_info(game_pk, play_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str play_id: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PlayWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'play_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method weather_data_based_on_play" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `weather_data_based_on_play`")  # noqa: E501
        # verify the required parameter 'play_id' is set
        if ('play_id' not in params or
                params['play_id'] is None):
            raise ValueError("Missing the required parameter `play_id` when calling `weather_data_based_on_play`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'play_id' in params:
            path_params['playId'] = params['play_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/weather/game/{gamePk}/{playId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlayWeatherWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def weather_forecast(self, game_pk, roof_type, **kwargs):  # noqa: E501
        """Get the weather forecast for a game.  # noqa: E501

        Returns a json file containing the weather forecast for a specific game.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_forecast(game_pk, roof_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param RoofType roof_type: Venue roof type (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ForecastWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.weather_forecast_with_http_info(game_pk, roof_type, **kwargs)  # noqa: E501
        else:
            (data) = self.weather_forecast_with_http_info(game_pk, roof_type, **kwargs)  # noqa: E501
            return data

    def weather_forecast_with_http_info(self, game_pk, roof_type, **kwargs):  # noqa: E501
        """Get the weather forecast for a game.  # noqa: E501

        Returns a json file containing the weather forecast for a specific game.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_forecast_with_http_info(game_pk, roof_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param RoofType roof_type: Venue roof type (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: ForecastWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'roof_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method weather_forecast" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `weather_forecast`")  # noqa: E501
        # verify the required parameter 'roof_type' is set
        if ('roof_type' not in params or
                params['roof_type'] is None):
            raise ValueError("Missing the required parameter `roof_type` when calling `weather_forecast`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'roof_type' in params:
            path_params['roofType'] = params['roof_type']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/weather/game/{gamePk}/forecast/{roofType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForecastWeatherWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def weather_full(self, venue_id, **kwargs):  # noqa: E501
        """Get full weather for a venue.  # noqa: E501

        Returns a json file containing full weather for a specific venue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_full(venue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int venue_id: Unique Venue Identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: FullWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.weather_full_with_http_info(venue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.weather_full_with_http_info(venue_id, **kwargs)  # noqa: E501
            return data

    def weather_full_with_http_info(self, venue_id, **kwargs):  # noqa: E501
        """Get full weather for a venue.  # noqa: E501

        Returns a json file containing full weather for a specific venue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.weather_full_with_http_info(venue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int venue_id: Unique Venue Identifier (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: FullWeatherWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['venue_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method weather_full" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'venue_id' is set
        if ('venue_id' not in params or
                params['venue_id'] is None):
            raise ValueError("Missing the required parameter `venue_id` when calling `weather_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'venue_id' in params:
            path_params['venueId'] = params['venue_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/weather/venues/{venueId}/full', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullWeatherWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
