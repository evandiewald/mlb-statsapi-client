# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def beast_stats(self, group, **kwargs):  # noqa: E501
        """View stats from search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beast_stats(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[str] play_ids: Comma delimited list of unique play identifiers
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[GameTypeEnum] game_types: Type of Game. Available types in /api/v1/gameTypes
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Date of Game. Format: YYYY-MM-DD
        :param date end_date: Date of Game. Format: YYYY-MM-DD
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] pitcher_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] batter_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] pitcher_sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] batter_sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] pitcher_league_ids: Comma delimited list of Unique league identifiers
        :param list[int] batter_league_ids: Comma delimited list of Unique league identifiers
        :param list[int] division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] pitcher_division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] batter_division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] pitchers_on_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] batters_on_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] player_ids: A unique identifier for a player
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[int] pitcher_ids: A unique identifier for a player
        :param list[int] batter_ids: A unique identifier for a player
        :param list[int] catcher_ids: A unique identifier for a player
        :param list[int] first_baseman_ids: A unique identifier for a player
        :param list[int] second_baseman_ids: A unique identifier for a player
        :param list[int] third_baseman_ids: A unique identifier for a player
        :param list[int] shortstop_ids: A unique identifier for a player
        :param list[int] left_fielder_ids: A unique identifier for a player
        :param list[int] center_fielder_ids: A unique identifier for a player
        :param list[int] right_fielder_ids: A unique identifier for a player
        :param list[int] runner_first_ids: A unique identifier for a player
        :param list[int] runner_second_ids: A unique identifier for a player
        :param list[int] runner_third_ids: A unique identifier for a player
        :param list[int] venue_ids: Unique Venue Identifier
        :param str pitch_hand: Handedness of pitcher
        :param str bat_side: Bat side of hitter
        :param list[PitchType] pitch_types: Classification of pitch (fastball, curveball, etc...)
        :param list[PitchCode] pitch_codes: Result of the pitch (ball, called strike, etc...)
        :param list[EventType] event_types: Type of event
        :param list[BaseballPosition] positions: All of the details of a player's position
        :param list[BaseballPosition] primary_positions: All of the details of a player's position
        :param float min_pitch_speed: Minimum value to filter on
        :param float max_pitch_speed: Maximum value to filter on
        :param float min_spin_rate: Minimum value to filter on
        :param float max_spin_rate: Maximum value to filter on
        :param float min_extension: Minimum value to filter on
        :param float max_extension: Maximum value to filter on
        :param float min_exit_velocity_against: Minimum value to filter on
        :param float max_exit_velocity_against: Maximum value to filter on
        :param float min_launch_angle_against: Minimum value to filter on
        :param float max_launch_angle_against: Maximum value to filter on
        :param float min_exit_velocity: Minimum value to filter on
        :param float max_exit_velocity: Maximum value to filter on
        :param float min_launch_angle: Minimum value to filter on
        :param float max_launch_angle: Maximum value to filter on
        :param float min_home_run_distance: Minimum value to filter on
        :param float max_home_run_distance: Maximum value to filter on
        :param float min_hit_distance: Minimum value to filter on
        :param float max_hit_distance: Maximum value to filter on
        :param float min_hang_time: Minimum value to filter on
        :param float max_hang_time: Maximum value to filter on
        :param float min_hit_probability: Minimum value to filter on
        :param float max_hit_probability: Maximum value to filter on
        :param float min_catch_probability: Minimum value to filter on
        :param float max_catch_probability: Maximum value to filter on
        :param float min_attack_angle: Minimum value to filter on
        :param float max_attack_angle: Maximum value to filter on
        :param float min_bat_speed: Minimum value to filter on
        :param float max_bat_speed: Maximum value to filter on
        :param float min_home_run_x_ballparks: Minimum value to filter on
        :param float max_home_run_x_ballparks: Maximum value to filter on
        :param bool is_barrel: Whether or not a play resulted in a barreled ball
        :param list[HitTrajectory] hit_trajectories: Trajectory of hit (line drive, fly ball, etc...)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param list[GroupByEnum] compare_over: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param AggregateSortTypeEnum sort_modifier: The prefix modifier for the sort stat.  avg, min, max. I.E minExitVelocity, maxLaunchAngle, avgHitDistance
        :param SortOrderEnum sort_order: The order of sorting, ascending or descending
        :param int percentile: Only return averages above this percentile. used for best effort plays
        :param int min_occurrences: Minimum occurrences to filter upon
        :param int min_plate_appearances: Minimum occurrences to filter upon
        :param int min_innings: Minimum occurrences to filter upon
        :param float qualifier_rate: Minimum occurrences to filter upon
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool show_totals: Columns to return totals
        :param bool include_null_metrics: Show events with null metrics
        :param list[StatField] stat_fields: Baseball stat fields to populate
        :param list[int] at_bat_numbers: The at bat number of a given game. Format: 1, 2, 3, etc
        :param list[int] pitch_numbers: The pitch number of a given game. Format: 1, 2, 3, etc
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool debug:
        :param PlayerActiveStatusEnum active_status: Whether or not a player is active
        :return: StatContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.beast_stats_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.beast_stats_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def beast_stats_with_http_info(self, group, **kwargs):  # noqa: E501
        """View stats from search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beast_stats_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param list[int] game_pks: Comma delimited list of unique primary keys
        :param list[str] play_ids: Comma delimited list of unique play identifiers
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[GameTypeEnum] game_types: Type of Game. Available types in /api/v1/gameTypes
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Date of Game. Format: YYYY-MM-DD
        :param date end_date: Date of Game. Format: YYYY-MM-DD
        :param list[int] team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] pitcher_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] batter_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] pitcher_sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] batter_sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] pitcher_league_ids: Comma delimited list of Unique league identifiers
        :param list[int] batter_league_ids: Comma delimited list of Unique league identifiers
        :param list[int] division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] pitcher_division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] batter_division_ids: Comma delimited list of Unique League Identifiers
        :param list[int] pitchers_on_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] batters_on_team_ids: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] player_ids: A unique identifier for a player
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[int] pitcher_ids: A unique identifier for a player
        :param list[int] batter_ids: A unique identifier for a player
        :param list[int] catcher_ids: A unique identifier for a player
        :param list[int] first_baseman_ids: A unique identifier for a player
        :param list[int] second_baseman_ids: A unique identifier for a player
        :param list[int] third_baseman_ids: A unique identifier for a player
        :param list[int] shortstop_ids: A unique identifier for a player
        :param list[int] left_fielder_ids: A unique identifier for a player
        :param list[int] center_fielder_ids: A unique identifier for a player
        :param list[int] right_fielder_ids: A unique identifier for a player
        :param list[int] runner_first_ids: A unique identifier for a player
        :param list[int] runner_second_ids: A unique identifier for a player
        :param list[int] runner_third_ids: A unique identifier for a player
        :param list[int] venue_ids: Unique Venue Identifier
        :param str pitch_hand: Handedness of pitcher
        :param str bat_side: Bat side of hitter
        :param list[PitchType] pitch_types: Classification of pitch (fastball, curveball, etc...)
        :param list[PitchCode] pitch_codes: Result of the pitch (ball, called strike, etc...)
        :param list[EventType] event_types: Type of event
        :param list[BaseballPosition] positions: All of the details of a player's position
        :param list[BaseballPosition] primary_positions: All of the details of a player's position
        :param float min_pitch_speed: Minimum value to filter on
        :param float max_pitch_speed: Maximum value to filter on
        :param float min_spin_rate: Minimum value to filter on
        :param float max_spin_rate: Maximum value to filter on
        :param float min_extension: Minimum value to filter on
        :param float max_extension: Maximum value to filter on
        :param float min_exit_velocity_against: Minimum value to filter on
        :param float max_exit_velocity_against: Maximum value to filter on
        :param float min_launch_angle_against: Minimum value to filter on
        :param float max_launch_angle_against: Maximum value to filter on
        :param float min_exit_velocity: Minimum value to filter on
        :param float max_exit_velocity: Maximum value to filter on
        :param float min_launch_angle: Minimum value to filter on
        :param float max_launch_angle: Maximum value to filter on
        :param float min_home_run_distance: Minimum value to filter on
        :param float max_home_run_distance: Maximum value to filter on
        :param float min_hit_distance: Minimum value to filter on
        :param float max_hit_distance: Maximum value to filter on
        :param float min_hang_time: Minimum value to filter on
        :param float max_hang_time: Maximum value to filter on
        :param float min_hit_probability: Minimum value to filter on
        :param float max_hit_probability: Maximum value to filter on
        :param float min_catch_probability: Minimum value to filter on
        :param float max_catch_probability: Maximum value to filter on
        :param float min_attack_angle: Minimum value to filter on
        :param float max_attack_angle: Maximum value to filter on
        :param float min_bat_speed: Minimum value to filter on
        :param float max_bat_speed: Maximum value to filter on
        :param float min_home_run_x_ballparks: Minimum value to filter on
        :param float max_home_run_x_ballparks: Maximum value to filter on
        :param bool is_barrel: Whether or not a play resulted in a barreled ball
        :param list[HitTrajectory] hit_trajectories: Trajectory of hit (line drive, fly ball, etc...)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param list[GroupByEnum] compare_over: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param AggregateSortTypeEnum sort_modifier: The prefix modifier for the sort stat.  avg, min, max. I.E minExitVelocity, maxLaunchAngle, avgHitDistance
        :param SortOrderEnum sort_order: The order of sorting, ascending or descending
        :param int percentile: Only return averages above this percentile. used for best effort plays
        :param int min_occurrences: Minimum occurrences to filter upon
        :param int min_plate_appearances: Minimum occurrences to filter upon
        :param int min_innings: Minimum occurrences to filter upon
        :param float qualifier_rate: Minimum occurrences to filter upon
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool show_totals: Columns to return totals
        :param bool include_null_metrics: Show events with null metrics
        :param list[StatField] stat_fields: Baseball stat fields to populate
        :param list[int] at_bat_numbers: The at bat number of a given game. Format: 1, 2, 3, etc
        :param list[int] pitch_numbers: The pitch number of a given game. Format: 1, 2, 3, etc
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool debug:
        :param PlayerActiveStatusEnum active_status: Whether or not a player is active
        :return: StatContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'game_pks', 'play_ids', 'seasons', 'game_types', '_date', 'start_date', 'end_date', 'team_ids', 'pitcher_team_ids', 'batter_team_ids', 'sport_ids', 'pitcher_sport_ids', 'batter_sport_ids', 'league_ids', 'pitcher_league_ids', 'batter_league_ids', 'division_ids', 'pitcher_division_ids', 'batter_division_ids', 'pitchers_on_team_ids', 'batters_on_team_ids', 'player_ids', 'player_pool', 'pitcher_ids', 'batter_ids', 'catcher_ids', 'first_baseman_ids', 'second_baseman_ids', 'third_baseman_ids', 'shortstop_ids', 'left_fielder_ids', 'center_fielder_ids', 'right_fielder_ids', 'runner_first_ids', 'runner_second_ids', 'runner_third_ids', 'venue_ids', 'pitch_hand', 'bat_side', 'pitch_types', 'pitch_codes', 'event_types', 'positions', 'primary_positions', 'min_pitch_speed', 'max_pitch_speed', 'min_spin_rate', 'max_spin_rate', 'min_extension', 'max_extension', 'min_exit_velocity_against', 'max_exit_velocity_against', 'min_launch_angle_against', 'max_launch_angle_against', 'min_exit_velocity', 'max_exit_velocity', 'min_launch_angle', 'max_launch_angle', 'min_home_run_distance', 'max_home_run_distance', 'min_hit_distance', 'max_hit_distance', 'min_hang_time', 'max_hang_time', 'min_hit_probability', 'max_hit_probability', 'min_catch_probability', 'max_catch_probability', 'min_attack_angle', 'max_attack_angle', 'min_bat_speed', 'max_bat_speed', 'min_home_run_x_ballparks', 'max_home_run_x_ballparks', 'is_barrel', 'hit_trajectories', 'limit', 'offset', 'group_by', 'compare_over', 'sort_stat', 'sort_modifier', 'sort_order', 'percentile', 'min_occurrences', 'min_plate_appearances', 'min_innings', 'qualifier_rate', 'sit_codes', 'show_totals', 'include_null_metrics', 'stat_fields', 'at_bat_numbers', 'pitch_numbers', 'fields', 'debug', 'active_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beast_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `beast_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'play_ids' in params:
            query_params.append(('playIds', params['play_ids']))  # noqa: E501
            collection_formats['playIds'] = 'multi'  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'game_types' in params:
            query_params.append(('gameTypes', params['game_types']))  # noqa: E501
            collection_formats['gameTypes'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'pitcher_team_ids' in params:
            query_params.append(('pitcherTeamIds', params['pitcher_team_ids']))  # noqa: E501
            collection_formats['pitcherTeamIds'] = 'multi'  # noqa: E501
        if 'batter_team_ids' in params:
            query_params.append(('batterTeamIds', params['batter_team_ids']))  # noqa: E501
            collection_formats['batterTeamIds'] = 'multi'  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'pitcher_sport_ids' in params:
            query_params.append(('pitcherSportIds', params['pitcher_sport_ids']))  # noqa: E501
            collection_formats['pitcherSportIds'] = 'multi'  # noqa: E501
        if 'batter_sport_ids' in params:
            query_params.append(('batterSportIds', params['batter_sport_ids']))  # noqa: E501
            collection_formats['batterSportIds'] = 'multi'  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'pitcher_league_ids' in params:
            query_params.append(('pitcherLeagueIds', params['pitcher_league_ids']))  # noqa: E501
            collection_formats['pitcherLeagueIds'] = 'multi'  # noqa: E501
        if 'batter_league_ids' in params:
            query_params.append(('batterLeagueIds', params['batter_league_ids']))  # noqa: E501
            collection_formats['batterLeagueIds'] = 'multi'  # noqa: E501
        if 'division_ids' in params:
            query_params.append(('divisionIds', params['division_ids']))  # noqa: E501
            collection_formats['divisionIds'] = 'multi'  # noqa: E501
        if 'pitcher_division_ids' in params:
            query_params.append(('pitcherDivisionIds', params['pitcher_division_ids']))  # noqa: E501
            collection_formats['pitcherDivisionIds'] = 'multi'  # noqa: E501
        if 'batter_division_ids' in params:
            query_params.append(('batterDivisionIds', params['batter_division_ids']))  # noqa: E501
            collection_formats['batterDivisionIds'] = 'multi'  # noqa: E501
        if 'pitchers_on_team_ids' in params:
            query_params.append(('pitchersOnTeamIds', params['pitchers_on_team_ids']))  # noqa: E501
            collection_formats['pitchersOnTeamIds'] = 'multi'  # noqa: E501
        if 'batters_on_team_ids' in params:
            query_params.append(('battersOnTeamIds', params['batters_on_team_ids']))  # noqa: E501
            collection_formats['battersOnTeamIds'] = 'multi'  # noqa: E501
        if 'player_ids' in params:
            query_params.append(('playerIds', params['player_ids']))  # noqa: E501
            collection_formats['playerIds'] = 'multi'  # noqa: E501
        if 'player_pool' in params:
            query_params.append(('playerPool', params['player_pool']))  # noqa: E501
        if 'pitcher_ids' in params:
            query_params.append(('pitcherIds', params['pitcher_ids']))  # noqa: E501
            collection_formats['pitcherIds'] = 'multi'  # noqa: E501
        if 'batter_ids' in params:
            query_params.append(('batterIds', params['batter_ids']))  # noqa: E501
            collection_formats['batterIds'] = 'multi'  # noqa: E501
        if 'catcher_ids' in params:
            query_params.append(('catcherIds', params['catcher_ids']))  # noqa: E501
            collection_formats['catcherIds'] = 'multi'  # noqa: E501
        if 'first_baseman_ids' in params:
            query_params.append(('firstBasemanIds', params['first_baseman_ids']))  # noqa: E501
            collection_formats['firstBasemanIds'] = 'multi'  # noqa: E501
        if 'second_baseman_ids' in params:
            query_params.append(('secondBasemanIds', params['second_baseman_ids']))  # noqa: E501
            collection_formats['secondBasemanIds'] = 'multi'  # noqa: E501
        if 'third_baseman_ids' in params:
            query_params.append(('thirdBasemanIds', params['third_baseman_ids']))  # noqa: E501
            collection_formats['thirdBasemanIds'] = 'multi'  # noqa: E501
        if 'shortstop_ids' in params:
            query_params.append(('shortstopIds', params['shortstop_ids']))  # noqa: E501
            collection_formats['shortstopIds'] = 'multi'  # noqa: E501
        if 'left_fielder_ids' in params:
            query_params.append(('leftFielderIds', params['left_fielder_ids']))  # noqa: E501
            collection_formats['leftFielderIds'] = 'multi'  # noqa: E501
        if 'center_fielder_ids' in params:
            query_params.append(('centerFielderIds', params['center_fielder_ids']))  # noqa: E501
            collection_formats['centerFielderIds'] = 'multi'  # noqa: E501
        if 'right_fielder_ids' in params:
            query_params.append(('rightFielderIds', params['right_fielder_ids']))  # noqa: E501
            collection_formats['rightFielderIds'] = 'multi'  # noqa: E501
        if 'runner_first_ids' in params:
            query_params.append(('runnerFirstIds', params['runner_first_ids']))  # noqa: E501
            collection_formats['runnerFirstIds'] = 'multi'  # noqa: E501
        if 'runner_second_ids' in params:
            query_params.append(('runnerSecondIds', params['runner_second_ids']))  # noqa: E501
            collection_formats['runnerSecondIds'] = 'multi'  # noqa: E501
        if 'runner_third_ids' in params:
            query_params.append(('runnerThirdIds', params['runner_third_ids']))  # noqa: E501
            collection_formats['runnerThirdIds'] = 'multi'  # noqa: E501
        if 'venue_ids' in params:
            query_params.append(('venueIds', params['venue_ids']))  # noqa: E501
            collection_formats['venueIds'] = 'multi'  # noqa: E501
        if 'pitch_hand' in params:
            query_params.append(('pitchHand', params['pitch_hand']))  # noqa: E501
        if 'bat_side' in params:
            query_params.append(('batSide', params['bat_side']))  # noqa: E501
        if 'pitch_types' in params:
            query_params.append(('pitchTypes', params['pitch_types']))  # noqa: E501
            collection_formats['pitchTypes'] = 'multi'  # noqa: E501
        if 'pitch_codes' in params:
            query_params.append(('pitchCodes', params['pitch_codes']))  # noqa: E501
            collection_formats['pitchCodes'] = 'multi'  # noqa: E501
        if 'event_types' in params:
            query_params.append(('eventTypes', params['event_types']))  # noqa: E501
            collection_formats['eventTypes'] = 'multi'  # noqa: E501
        if 'positions' in params:
            query_params.append(('positions', params['positions']))  # noqa: E501
            collection_formats['positions'] = 'multi'  # noqa: E501
        if 'primary_positions' in params:
            query_params.append(('primaryPositions', params['primary_positions']))  # noqa: E501
            collection_formats['primaryPositions'] = 'multi'  # noqa: E501
        if 'min_pitch_speed' in params:
            query_params.append(('minPitchSpeed', params['min_pitch_speed']))  # noqa: E501
        if 'max_pitch_speed' in params:
            query_params.append(('maxPitchSpeed', params['max_pitch_speed']))  # noqa: E501
        if 'min_spin_rate' in params:
            query_params.append(('minSpinRate', params['min_spin_rate']))  # noqa: E501
        if 'max_spin_rate' in params:
            query_params.append(('maxSpinRate', params['max_spin_rate']))  # noqa: E501
        if 'min_extension' in params:
            query_params.append(('minExtension', params['min_extension']))  # noqa: E501
        if 'max_extension' in params:
            query_params.append(('maxExtension', params['max_extension']))  # noqa: E501
        if 'min_exit_velocity_against' in params:
            query_params.append(('minExitVelocityAgainst', params['min_exit_velocity_against']))  # noqa: E501
        if 'max_exit_velocity_against' in params:
            query_params.append(('maxExitVelocityAgainst', params['max_exit_velocity_against']))  # noqa: E501
        if 'min_launch_angle_against' in params:
            query_params.append(('minLaunchAngleAgainst', params['min_launch_angle_against']))  # noqa: E501
        if 'max_launch_angle_against' in params:
            query_params.append(('maxLaunchAngleAgainst', params['max_launch_angle_against']))  # noqa: E501
        if 'min_exit_velocity' in params:
            query_params.append(('minExitVelocity', params['min_exit_velocity']))  # noqa: E501
        if 'max_exit_velocity' in params:
            query_params.append(('maxExitVelocity', params['max_exit_velocity']))  # noqa: E501
        if 'min_launch_angle' in params:
            query_params.append(('minLaunchAngle', params['min_launch_angle']))  # noqa: E501
        if 'max_launch_angle' in params:
            query_params.append(('maxLaunchAngle', params['max_launch_angle']))  # noqa: E501
        if 'min_home_run_distance' in params:
            query_params.append(('minHomeRunDistance', params['min_home_run_distance']))  # noqa: E501
        if 'max_home_run_distance' in params:
            query_params.append(('maxHomeRunDistance', params['max_home_run_distance']))  # noqa: E501
        if 'min_hit_distance' in params:
            query_params.append(('minHitDistance', params['min_hit_distance']))  # noqa: E501
        if 'max_hit_distance' in params:
            query_params.append(('maxHitDistance', params['max_hit_distance']))  # noqa: E501
        if 'min_hang_time' in params:
            query_params.append(('minHangTime', params['min_hang_time']))  # noqa: E501
        if 'max_hang_time' in params:
            query_params.append(('maxHangTime', params['max_hang_time']))  # noqa: E501
        if 'min_hit_probability' in params:
            query_params.append(('minHitProbability', params['min_hit_probability']))  # noqa: E501
        if 'max_hit_probability' in params:
            query_params.append(('maxHitProbability', params['max_hit_probability']))  # noqa: E501
        if 'min_catch_probability' in params:
            query_params.append(('minCatchProbability', params['min_catch_probability']))  # noqa: E501
        if 'max_catch_probability' in params:
            query_params.append(('maxCatchProbability', params['max_catch_probability']))  # noqa: E501
        if 'min_attack_angle' in params:
            query_params.append(('minAttackAngle', params['min_attack_angle']))  # noqa: E501
        if 'max_attack_angle' in params:
            query_params.append(('maxAttackAngle', params['max_attack_angle']))  # noqa: E501
        if 'min_bat_speed' in params:
            query_params.append(('minBatSpeed', params['min_bat_speed']))  # noqa: E501
        if 'max_bat_speed' in params:
            query_params.append(('maxBatSpeed', params['max_bat_speed']))  # noqa: E501
        if 'min_home_run_x_ballparks' in params:
            query_params.append(('minHomeRunXBallparks', params['min_home_run_x_ballparks']))  # noqa: E501
        if 'max_home_run_x_ballparks' in params:
            query_params.append(('maxHomeRunXBallparks', params['max_home_run_x_ballparks']))  # noqa: E501
        if 'is_barrel' in params:
            query_params.append(('isBarrel', params['is_barrel']))  # noqa: E501
        if 'hit_trajectories' in params:
            query_params.append(('hitTrajectories', params['hit_trajectories']))  # noqa: E501
            collection_formats['hitTrajectories'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'multi'  # noqa: E501
        if 'compare_over' in params:
            query_params.append(('compareOver', params['compare_over']))  # noqa: E501
            collection_formats['compareOver'] = 'multi'  # noqa: E501
        if 'sort_stat' in params:
            query_params.append(('sortStat', params['sort_stat']))  # noqa: E501
        if 'sort_modifier' in params:
            query_params.append(('sortModifier', params['sort_modifier']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'percentile' in params:
            query_params.append(('percentile', params['percentile']))  # noqa: E501
        if 'min_occurrences' in params:
            query_params.append(('minOccurrences', params['min_occurrences']))  # noqa: E501
        if 'min_plate_appearances' in params:
            query_params.append(('minPlateAppearances', params['min_plate_appearances']))  # noqa: E501
        if 'min_innings' in params:
            query_params.append(('minInnings', params['min_innings']))  # noqa: E501
        if 'qualifier_rate' in params:
            query_params.append(('qualifierRate', params['qualifier_rate']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'show_totals' in params:
            query_params.append(('showTotals', params['show_totals']))  # noqa: E501
        if 'include_null_metrics' in params:
            query_params.append(('includeNullMetrics', params['include_null_metrics']))  # noqa: E501
        if 'stat_fields' in params:
            query_params.append(('statFields', params['stat_fields']))  # noqa: E501
            collection_formats['statFields'] = 'multi'  # noqa: E501
        if 'at_bat_numbers' in params:
            query_params.append(('atBatNumbers', params['at_bat_numbers']))  # noqa: E501
            collection_formats['atBatNumbers'] = 'multi'  # noqa: E501
        if 'pitch_numbers' in params:
            query_params.append(('pitchNumbers', params['pitch_numbers']))  # noqa: E501
            collection_formats['pitchNumbers'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'debug' in params:
            query_params.append(('debug', params['debug']))  # noqa: E501
        if 'active_status' in params:
            query_params.append(('activeStatus', params['active_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatContainerRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outs_above_average(self, game_pk, **kwargs):  # noqa: E501
        """Get outs above average for the current batter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outs_above_average(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outs_above_average_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outs_above_average_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_outs_above_average_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get outs above average for the current batter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outs_above_average_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outs_above_average" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_outs_above_average`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/analytics/outsAboveAverage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spray_chart(self, game_pk, **kwargs):  # noqa: E501
        """Get the spray chart info for the current batter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spray_chart(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spray_chart_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spray_chart_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_spray_chart_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get the spray chart info for the current batter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spray_chart_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spray_chart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_spray_chart`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/analytics/sprayChart', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stolen_base_probability(self, game_pk, **kwargs):  # noqa: E501
        """Get the probability of a hit for the given hit data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stolen_base_probability(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stolen_base_probability_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stolen_base_probability_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def get_stolen_base_probability_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get the probability of a hit for the given hit data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stolen_base_probability_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: (required)
        :param str timecode:
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'timecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stolen_base_probability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `get_stolen_base_probability`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'timecode' in params:
            query_params.append(('timecode', params['timecode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/analytics/stolenBaseProbability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grouped_stats(self, stats, group, **kwargs):  # noqa: E501
        """View grouped stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grouped_stats(stats, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[BaseballPosition] position: Position number. Format: 1, 2, 3, etc
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param bool exclude_traded_players: Excludes players who have since been traded from the input team
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param list[StatField] stat_fields: Baseball stat fields to populate
        :param StatField sort_field: Baseball statField to sort on.  If no statField is given, sortField defaults to BASIC.  If 1 statField is given, that is the default sortField.
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grouped_stats_with_http_info(stats, group, **kwargs)  # noqa: E501
        else:
            (data) = self.grouped_stats_with_http_info(stats, group, **kwargs)  # noqa: E501
            return data

    def grouped_stats_with_http_info(self, stats, group, **kwargs):  # noqa: E501
        """View grouped stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grouped_stats_with_http_info(stats, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[BaseballPosition] position: Position number. Format: 1, 2, 3, etc
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param bool exclude_traded_players: Excludes players who have since been traded from the input team
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param list[StatField] stat_fields: Baseball stat fields to populate
        :param StatField sort_field: Baseball statField to sort on.  If no statField is given, sortField defaults to BASIC.  If 1 statField is given, that is the default sortField.
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stats', 'group', 'person_id', 'team_id', 'team_ids', 'game_type', 'season', 'seasons', 'sport_id', 'sport_ids', 'league_id', 'league_ids', 'league_list_id', 'metrics', 'game_pk', 'batter_team_id', 'pitcher_team_id', 'batter_id', 'pitcher_id', 'sit_codes', 'combine_sits', 'opposing_team_id', 'fields', 'sort_stat', 'order', 'player_pool', 'position', 'start_date', 'end_date', 'days_back', 'games_back', 'exclude_traded_players', 'offset', 'limit', 'stat_fields', 'sort_field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grouped_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stats' is set
        if ('stats' not in params or
                params['stats'] is None):
            raise ValueError("Missing the required parameter `stats` when calling `grouped_stats`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `grouped_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'batter_team_id' in params:
            query_params.append(('batterTeamId', params['batter_team_id']))  # noqa: E501
            collection_formats['batterTeamId'] = 'multi'  # noqa: E501
        if 'pitcher_team_id' in params:
            query_params.append(('pitcherTeamId', params['pitcher_team_id']))  # noqa: E501
            collection_formats['pitcherTeamId'] = 'multi'  # noqa: E501
        if 'batter_id' in params:
            query_params.append(('batterId', params['batter_id']))  # noqa: E501
        if 'pitcher_id' in params:
            query_params.append(('pitcherId', params['pitcher_id']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'combine_sits' in params:
            query_params.append(('combineSits', params['combine_sits']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sort_stat' in params:
            query_params.append(('sortStat', params['sort_stat']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'player_pool' in params:
            query_params.append(('playerPool', params['player_pool']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
            collection_formats['position'] = 'multi'  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'games_back' in params:
            query_params.append(('gamesBack', params['games_back']))  # noqa: E501
        if 'exclude_traded_players' in params:
            query_params.append(('excludeTradedPlayers', params['exclude_traded_players']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'stat_fields' in params:
            query_params.append(('statFields', params['stat_fields']))  # noqa: E501
            collection_formats['statFields'] = 'multi'  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def leaders2(self, **kwargs):  # noqa: E501
        """Get leaders for a statistic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PersonLeadersEnum] leader_categories:
        :param list[GameTypeEnum] leader_game_types:
        :param list[StatGroup] stat_group:
        :param str season:
        :param list[ExpandEnum] expand:
        :param int sport_id:
        :param list[int] sport_ids:
        :param list[StatType] stats:
        :param int limit:
        :param int offset:
        :param int team_id:
        :param list[int] team_ids:
        :param int league_id:
        :param list[int] league_ids:
        :param LeagueListsEnum league_list_id:
        :param PlayerPoolEnum player_pool:
        :param StatType stat_type:
        :param PlayerActiveStatusEnum player_active:
        :param list[BaseballPosition] position:
        :param list[str] sit_codes:
        :param int opposing_team_id:
        :param date start_date:
        :param date end_date:
        :param int days_back:
        :param int games_back:
        :param GroupByEnum group_by:
        :param list[str] fields:
        :return: LeagueLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.leaders2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.leaders2_with_http_info(**kwargs)  # noqa: E501
            return data

    def leaders2_with_http_info(self, **kwargs):  # noqa: E501
        """Get leaders for a statistic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leaders2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PersonLeadersEnum] leader_categories:
        :param list[GameTypeEnum] leader_game_types:
        :param list[StatGroup] stat_group:
        :param str season:
        :param list[ExpandEnum] expand:
        :param int sport_id:
        :param list[int] sport_ids:
        :param list[StatType] stats:
        :param int limit:
        :param int offset:
        :param int team_id:
        :param list[int] team_ids:
        :param int league_id:
        :param list[int] league_ids:
        :param LeagueListsEnum league_list_id:
        :param PlayerPoolEnum player_pool:
        :param StatType stat_type:
        :param PlayerActiveStatusEnum player_active:
        :param list[BaseballPosition] position:
        :param list[str] sit_codes:
        :param int opposing_team_id:
        :param date start_date:
        :param date end_date:
        :param int days_back:
        :param int games_back:
        :param GroupByEnum group_by:
        :param list[str] fields:
        :return: LeagueLeaderContainerRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['leader_categories', 'leader_game_types', 'stat_group', 'season', 'expand', 'sport_id', 'sport_ids', 'stats', 'limit', 'offset', 'team_id', 'team_ids', 'league_id', 'league_ids', 'league_list_id', 'player_pool', 'stat_type', 'player_active', 'position', 'sit_codes', 'opposing_team_id', 'start_date', 'end_date', 'days_back', 'games_back', 'group_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method leaders2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'leader_categories' in params:
            query_params.append(('leaderCategories', params['leader_categories']))  # noqa: E501
            collection_formats['leaderCategories'] = 'multi'  # noqa: E501
        if 'leader_game_types' in params:
            query_params.append(('leaderGameTypes', params['leader_game_types']))  # noqa: E501
            collection_formats['leaderGameTypes'] = 'multi'  # noqa: E501
        if 'stat_group' in params:
            query_params.append(('statGroup', params['stat_group']))  # noqa: E501
            collection_formats['statGroup'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
            collection_formats['expand'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'player_pool' in params:
            query_params.append(('playerPool', params['player_pool']))  # noqa: E501
        if 'stat_type' in params:
            query_params.append(('statType', params['stat_type']))  # noqa: E501
        if 'player_active' in params:
            query_params.append(('playerActive', params['player_active']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
            collection_formats['position'] = 'multi'  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'games_back' in params:
            query_params.append(('gamesBack', params['games_back']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/leaders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueLeaderContainerRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metric_stats(self, stats, metrics, **kwargs):  # noqa: E501
        """View metric stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metric_stats(stats, metrics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[int] person_ids: Unique Player Identifier. Format: 434538, 429665, etc
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[BaseballPosition] position: All of the details of a player's position
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param str pitch_hand: Handedness of pitcher
        :param list[int] venue_id: All of the details of a venue
        :param int game_pk: Unique Primary Key Representing a Game
        :param float min_value: Minimum value to filter on
        :param float max_value: Maximum value to filter on
        :param int percentile: Only return averages above this percentile. used for best effort plays
        :param int min_occurrences: Minimum occurrences to filter upon
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool debug:
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metric_stats_with_http_info(stats, metrics, **kwargs)  # noqa: E501
        else:
            (data) = self.metric_stats_with_http_info(stats, metrics, **kwargs)  # noqa: E501
            return data

    def metric_stats_with_http_info(self, stats, metrics, **kwargs):  # noqa: E501
        """View metric stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metric_stats_with_http_info(stats, metrics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[int] person_ids: Unique Player Identifier. Format: 434538, 429665, etc
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[BaseballPosition] position: All of the details of a player's position
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param str pitch_hand: Handedness of pitcher
        :param list[int] venue_id: All of the details of a venue
        :param int game_pk: Unique Primary Key Representing a Game
        :param float min_value: Minimum value to filter on
        :param float max_value: Maximum value to filter on
        :param int percentile: Only return averages above this percentile. used for best effort plays
        :param int min_occurrences: Minimum occurrences to filter upon
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param date _date: Date of Game. Format: YYYY-MM-DD
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool debug:
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stats', 'metrics', 'person_id', 'person_ids', 'batter_id', 'pitcher_id', 'team_id', 'group', 'season', 'seasons', 'sport_id', 'opposing_team_id', 'opposing_player_id', 'position', 'event_type', 'pitch_type', 'hit_trajectory', 'bat_side', 'pitch_hand', 'venue_id', 'game_pk', 'min_value', 'max_value', 'percentile', 'min_occurrences', 'offset', 'limit', 'order', '_date', 'start_date', 'end_date', 'game_type', 'batter_team_id', 'pitcher_team_id', 'fields', 'debug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metric_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stats' is set
        if ('stats' not in params or
                params['stats'] is None):
            raise ValueError("Missing the required parameter `stats` when calling `metric_stats`")  # noqa: E501
        # verify the required parameter 'metrics' is set
        if ('metrics' not in params or
                params['metrics'] is None):
            raise ValueError("Missing the required parameter `metrics` when calling `metric_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'person_ids' in params:
            query_params.append(('personIds', params['person_ids']))  # noqa: E501
            collection_formats['personIds'] = 'multi'  # noqa: E501
        if 'batter_id' in params:
            query_params.append(('batterId', params['batter_id']))  # noqa: E501
        if 'pitcher_id' in params:
            query_params.append(('pitcherId', params['pitcher_id']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'opposing_player_id' in params:
            query_params.append(('opposingPlayerId', params['opposing_player_id']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
            collection_formats['position'] = 'multi'  # noqa: E501
        if 'event_type' in params:
            query_params.append(('eventType', params['event_type']))  # noqa: E501
            collection_formats['eventType'] = 'multi'  # noqa: E501
        if 'pitch_type' in params:
            query_params.append(('pitchType', params['pitch_type']))  # noqa: E501
            collection_formats['pitchType'] = 'multi'  # noqa: E501
        if 'hit_trajectory' in params:
            query_params.append(('hitTrajectory', params['hit_trajectory']))  # noqa: E501
            collection_formats['hitTrajectory'] = 'multi'  # noqa: E501
        if 'bat_side' in params:
            query_params.append(('batSide', params['bat_side']))  # noqa: E501
        if 'pitch_hand' in params:
            query_params.append(('pitchHand', params['pitch_hand']))  # noqa: E501
        if 'venue_id' in params:
            query_params.append(('venueId', params['venue_id']))  # noqa: E501
            collection_formats['venueId'] = 'multi'  # noqa: E501
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'min_value' in params:
            query_params.append(('minValue', params['min_value']))  # noqa: E501
        if 'max_value' in params:
            query_params.append(('maxValue', params['max_value']))  # noqa: E501
        if 'percentile' in params:
            query_params.append(('percentile', params['percentile']))  # noqa: E501
        if 'min_occurrences' in params:
            query_params.append(('minOccurrences', params['min_occurrences']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'batter_team_id' in params:
            query_params.append(('batterTeamId', params['batter_team_id']))  # noqa: E501
            collection_formats['batterTeamId'] = 'multi'  # noqa: E501
        if 'pitcher_team_id' in params:
            query_params.append(('pitcherTeamId', params['pitcher_team_id']))  # noqa: E501
            collection_formats['pitcherTeamId'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'debug' in params:
            query_params.append(('debug', params['debug']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats2(self, stats, group, **kwargs):  # noqa: E501
        """View stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats2(stats, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param list[str] fields:
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[BaseballPosition] position: Position number. Format: 1, 2, 3, etc
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param bool exclude_traded_players: Excludes players who have since been traded from the input team
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats2_with_http_info(stats, group, **kwargs)  # noqa: E501
        else:
            (data) = self.stats2_with_http_info(stats, group, **kwargs)  # noqa: E501
            return data

    def stats2_with_http_info(self, stats, group, **kwargs):  # noqa: E501
        """View stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats2_with_http_info(stats, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups (required)
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param int league_id: Unique League Identifier
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int game_pk: Unique Primary Key Representing a Game
        :param list[int] batter_team_id: A unique identifier for the batter's team
        :param list[int] pitcher_team_id: A unique identifier for the pitcher's team
        :param int batter_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param int pitcher_id: Unique Player Identifier. Format: 434538, 429665, etc
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param list[str] fields:
        :param BaseballStatsEnum sort_stat: Baseball stat to sort splits by.
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param PlayerPoolEnum player_pool: Return \"ALL\" or only \"QUALIFIED\" players based on plate appearances.
        :param list[BaseballPosition] position: Position number. Format: 1, 2, 3, etc
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param bool exclude_traded_players: Excludes players who have since been traded from the input team
        :param int offset: The pointer to start for a return set; used for pagination
        :param int limit: Number of results to return
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stats', 'group', 'person_id', 'team_id', 'team_ids', 'game_type', 'season', 'seasons', 'sport_id', 'sport_ids', 'league_id', 'league_ids', 'league_list_id', 'metrics', 'game_pk', 'batter_team_id', 'pitcher_team_id', 'batter_id', 'pitcher_id', 'sit_codes', 'combine_sits', 'opposing_team_id', 'fields', 'sort_stat', 'order', 'player_pool', 'position', 'start_date', 'end_date', 'days_back', 'games_back', 'exclude_traded_players', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stats' is set
        if ('stats' not in params or
                params['stats'] is None):
            raise ValueError("Missing the required parameter `stats` when calling `stats2`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `stats2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'game_pk' in params:
            query_params.append(('gamePk', params['game_pk']))  # noqa: E501
        if 'batter_team_id' in params:
            query_params.append(('batterTeamId', params['batter_team_id']))  # noqa: E501
            collection_formats['batterTeamId'] = 'multi'  # noqa: E501
        if 'pitcher_team_id' in params:
            query_params.append(('pitcherTeamId', params['pitcher_team_id']))  # noqa: E501
            collection_formats['pitcherTeamId'] = 'multi'  # noqa: E501
        if 'batter_id' in params:
            query_params.append(('batterId', params['batter_id']))  # noqa: E501
        if 'pitcher_id' in params:
            query_params.append(('pitcherId', params['pitcher_id']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'combine_sits' in params:
            query_params.append(('combineSits', params['combine_sits']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sort_stat' in params:
            query_params.append(('sortStat', params['sort_stat']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'player_pool' in params:
            query_params.append(('playerPool', params['player_pool']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
            collection_formats['position'] = 'multi'  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'games_back' in params:
            query_params.append(('gamesBack', params['games_back']))  # noqa: E501
        if 'exclude_traded_players' in params:
            query_params.append(('excludeTradedPlayers', params['exclude_traded_players']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
