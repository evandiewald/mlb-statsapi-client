# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DraftApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def draft_picks(self, year, **kwargs):  # noqa: E501
        """View MLB Drafted Players  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_picks(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: BaseballDraftListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.draft_picks_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.draft_picks_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def draft_picks_with_http_info(self, year, **kwargs):  # noqa: E501
        """View MLB Drafted Players  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_picks_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: BaseballDraftListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'limit', 'offset', 'fields', 'order', 'sort_by', 'drafted', 'round', 'name', 'school', 'position', 'team', 'team_id', 'state', 'country', 'player_id', 'bis_player_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draft_picks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `draft_picks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'drafted' in params:
            query_params.append(('drafted', params['drafted']))  # noqa: E501
        if 'round' in params:
            query_params.append(('round', params['round']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'school' in params:
            query_params.append(('school', params['school']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'player_id' in params:
            query_params.append(('playerId', params['player_id']))  # noqa: E501
        if 'bis_player_id' in params:
            query_params.append(('bisPlayerId', params['bis_player_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/draft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballDraftListRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def draft_picks1(self, year, **kwargs):  # noqa: E501
        """View MLB Drafted Players  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_picks1(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: BaseballDraftListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.draft_picks1_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.draft_picks1_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def draft_picks1_with_http_info(self, year, **kwargs):  # noqa: E501
        """View MLB Drafted Players  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_picks1_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: BaseballDraftListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'limit', 'offset', 'fields', 'order', 'sort_by', 'drafted', 'round', 'name', 'school', 'position', 'team', 'team_id', 'state', 'country', 'player_id', 'bis_player_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draft_picks1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `draft_picks1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'drafted' in params:
            query_params.append(('drafted', params['drafted']))  # noqa: E501
        if 'round' in params:
            query_params.append(('round', params['round']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'school' in params:
            query_params.append(('school', params['school']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'player_id' in params:
            query_params.append(('playerId', params['player_id']))  # noqa: E501
        if 'bis_player_id' in params:
            query_params.append(('bisPlayerId', params['bis_player_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/draft/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballDraftListRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def draft_prospects(self, year, **kwargs):  # noqa: E501
        """View MLB Draft Prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_prospects(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: ProspectListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.draft_prospects_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.draft_prospects_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def draft_prospects_with_http_info(self, year, **kwargs):  # noqa: E501
        """View MLB Draft Prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_prospects_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: ProspectListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'limit', 'offset', 'fields', 'order', 'sort_by', 'drafted', 'round', 'name', 'school', 'position', 'team', 'team_id', 'state', 'country', 'player_id', 'bis_player_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draft_prospects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `draft_prospects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'drafted' in params:
            query_params.append(('drafted', params['drafted']))  # noqa: E501
        if 'round' in params:
            query_params.append(('round', params['round']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'school' in params:
            query_params.append(('school', params['school']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'player_id' in params:
            query_params.append(('playerId', params['player_id']))  # noqa: E501
        if 'bis_player_id' in params:
            query_params.append(('bisPlayerId', params['bis_player_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/draft/prospects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProspectListRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def draft_prospects1(self, year, **kwargs):  # noqa: E501
        """View MLB Draft Prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_prospects1(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: ProspectListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.draft_prospects1_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.draft_prospects1_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def draft_prospects1_with_http_info(self, year, **kwargs):  # noqa: E501
        """View MLB Draft Prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_prospects1_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param str sort_by: Sort the set of data by the specified field
        :param bool drafted: Whether or not the players been drafted
        :param str round: Round in which a player was drafted
        :param str name: Filter players by the first letter of their name using using the specific character
        :param str school: Filter players by the first letter of their school using using the specific character
        :param BaseballPosition position: Position number. Format: 1, 2, 3, etc
        :param str team: Unique Team Code. Format: tor, nya, etc
        :param int team_id: Unique Team Identifier. Format: 141, 147, etc
        :param str state: State where the venue is located. Format: Ohio
        :param str country: Filter players by their home country
        :param int player_id: A unique identifier for a player
        :param int bis_player_id: A unique identifier for a player in the EBIS system
        :return: ProspectListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'limit', 'offset', 'fields', 'order', 'sort_by', 'drafted', 'round', 'name', 'school', 'position', 'team', 'team_id', 'state', 'country', 'player_id', 'bis_player_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draft_prospects1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `draft_prospects1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'drafted' in params:
            query_params.append(('drafted', params['drafted']))  # noqa: E501
        if 'round' in params:
            query_params.append(('round', params['round']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'school' in params:
            query_params.append(('school', params['school']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'player_id' in params:
            query_params.append(('playerId', params['player_id']))  # noqa: E501
        if 'bis_player_id' in params:
            query_params.append(('bisPlayerId', params['bis_player_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/draft/prospects/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProspectListRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def latest_draft_picks(self, year, **kwargs):  # noqa: E501
        """Get the last drafted player and the next 5 teams up to pick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.latest_draft_picks(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BaseballDraftLatestRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.latest_draft_picks_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.latest_draft_picks_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def latest_draft_picks_with_http_info(self, year, **kwargs):  # noqa: E501
        """Get the last drafted player and the next 5 teams up to pick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.latest_draft_picks_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: Year the player was drafted. Format: 2000 (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: BaseballDraftLatestRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method latest_draft_picks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `latest_draft_picks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/draft/{year}/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseballDraftLatestRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
