# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PersonApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def award(self, person_id, **kwargs):  # noqa: E501
        """View a player's awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.award(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: AwardsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.award_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.award_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def award_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """View a player's awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.award_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: AwardsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method award" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `award`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/{personId}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwardsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def current_game_stats(self, updated_since, **kwargs):  # noqa: E501
        """View a player's change log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_game_stats(updated_since, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime updated_since: Format: YYYY-MM-DDTHH:MM:SSZ (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.current_game_stats_with_http_info(updated_since, **kwargs)  # noqa: E501
        else:
            (data) = self.current_game_stats_with_http_info(updated_since, **kwargs)  # noqa: E501
            return data

    def current_game_stats_with_http_info(self, updated_since, **kwargs):  # noqa: E501
        """View a player's change log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_game_stats_with_http_info(updated_since, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime updated_since: Format: YYYY-MM-DDTHH:MM:SSZ (required)
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updated_since', 'limit', 'offset', 'accent', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method current_game_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'updated_since' is set
        if ('updated_since' not in params or
                params['updated_since'] is None):
            raise ValueError("Missing the required parameter `updated_since` when calling `current_game_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'updated_since' in params:
            query_params.append(('updatedSince', params['updated_since']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def free_agents(self, season, **kwargs):  # noqa: E501
        """Get free agents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.free_agents(season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season: Season of play (required)
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields:
        :return: FreeAgentListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.free_agents_with_http_info(season, **kwargs)  # noqa: E501
        else:
            (data) = self.free_agents_with_http_info(season, **kwargs)  # noqa: E501
            return data

    def free_agents_with_http_info(self, season, **kwargs):  # noqa: E501
        """Get free agents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.free_agents_with_http_info(season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str season: Season of play (required)
        :param SortOrderEnum order: The order of sorting, ascending or descending
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields:
        :return: FreeAgentListRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['season', 'order', 'accent', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method free_agents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'season' is set
        if ('season' not in params or
                params['season'] is None):
            raise ValueError("Missing the required parameter `season` when calling `free_agents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/freeAgents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FreeAgentListRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def person(self, person_id, **kwargs):  # noqa: E501
        """View a player  # noqa: E501

        This endpoint allows you to pull the information of players  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param str season: Season of play
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.person_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.person_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def person_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """View a player  # noqa: E501

        This endpoint allows you to pull the information of players  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param str season: Season of play
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'person_ids', 'accent', 'season', 'group', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501

        query_params = []
        if 'person_ids' in params:
            query_params.append(('personIds', params['person_ids']))  # noqa: E501
            collection_formats['personIds'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/{personId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def person1(self, person_id, **kwargs):  # noqa: E501
        """View a player  # noqa: E501

        This endpoint allows you to pull the information of players  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person1(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param str season: Season of play
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.person1_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.person1_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def person1_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """View a player  # noqa: E501

        This endpoint allows you to pull the information of players  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person1_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param str season: Season of play
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'person_ids', 'accent', 'season', 'group', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method person1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `person1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501

        query_params = []
        if 'person_ids' in params:
            query_params.append(('personIds', params['person_ids']))  # noqa: E501
            collection_formats['personIds'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def player_game_stats(self, person_id, game_pk, **kwargs):  # noqa: E501
        """View a player's game stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.player_game_stats(person_id, game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.player_game_stats_with_http_info(person_id, game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.player_game_stats_with_http_info(person_id, game_pk, **kwargs)  # noqa: E501
            return data

    def player_game_stats_with_http_info(self, person_id, game_pk, **kwargs):  # noqa: E501
        """View a player's game stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.player_game_stats_with_http_info(person_id, game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'game_pk', 'group', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method player_game_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `player_game_stats`")  # noqa: E501
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `player_game_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/{personId}/stats/game/{gamePk}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search(self, **kwargs):  # noqa: E501
        """Search for a player by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: Name a player uses
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param bool active: Whether or not a player is active
        :param bool verified: Complete and confirmed all biographical data
        :param bool rookie: Whether or not a player is a rookie
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param int limit: Number of results to return
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_with_http_info(self, **kwargs):  # noqa: E501
        """Search for a player by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: Name a player uses
        :param list[int] person_ids: Comma delimited list of person ID. Format: 1234, 2345
        :param list[int] sport_ids: Comma delimited list of top level organizations of a sport
        :param list[int] league_ids: Comma delimited list of Unique league identifiers
        :param list[int] team_ids: Comma delimited list of Unique Team identifiers
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param bool active: Whether or not a player is active
        :param bool verified: Complete and confirmed all biographical data
        :param bool rookie: Whether or not a player is a rookie
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param int limit: Number of results to return
        :return: PeopleRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['names', 'person_ids', 'sport_ids', 'league_ids', 'team_ids', 'league_list_id', 'active', 'verified', 'rookie', 'seasons', 'fields', 'accent', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'person_ids' in params:
            query_params.append(('personIds', params['person_ids']))  # noqa: E501
            collection_formats['personIds'] = 'multi'  # noqa: E501
        if 'sport_ids' in params:
            query_params.append(('sportIds', params['sport_ids']))  # noqa: E501
            collection_formats['sportIds'] = 'multi'  # noqa: E501
        if 'league_ids' in params:
            query_params.append(('leagueIds', params['league_ids']))  # noqa: E501
            collection_formats['leagueIds'] = 'multi'  # noqa: E501
        if 'team_ids' in params:
            query_params.append(('teamIds', params['team_ids']))  # noqa: E501
            collection_formats['teamIds'] = 'multi'  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'verified' in params:
            query_params.append(('verified', params['verified']))  # noqa: E501
        if 'rookie' in params:
            query_params.append(('rookie', params['rookie']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats3(self, person_id, stats, **kwargs):  # noqa: E501
        """View a players stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats3(person_id, stats, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int league_id: Unique League Identifier
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param int limit: Number of results to return
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats3_with_http_info(person_id, stats, **kwargs)  # noqa: E501
        else:
            (data) = self.stats3_with_http_info(person_id, stats, **kwargs)  # noqa: E501
            return data

    def stats3_with_http_info(self, person_id, stats, **kwargs):  # noqa: E501
        """View a players stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats3_with_http_info(person_id, stats, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int league_id: Unique League Identifier
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param int limit: Number of results to return
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'stats', 'group', 'season', 'seasons', 'sport_id', 'opposing_team_id', 'opposing_player_id', 'metrics', 'league_id', 'league_list_id', 'sit_codes', 'combine_sits', 'start_date', 'end_date', 'days_back', 'games_back', 'limit', 'event_type', 'pitch_type', 'hit_trajectory', 'bat_side', 'game_type', 'group_by', 'accent', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `stats3`")  # noqa: E501
        # verify the required parameter 'stats' is set
        if ('stats' not in params or
                params['stats'] is None):
            raise ValueError("Missing the required parameter `stats` when calling `stats3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501

        query_params = []
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'opposing_player_id' in params:
            query_params.append(('opposingPlayerId', params['opposing_player_id']))  # noqa: E501
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'combine_sits' in params:
            query_params.append(('combineSits', params['combine_sits']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'games_back' in params:
            query_params.append(('gamesBack', params['games_back']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('eventType', params['event_type']))  # noqa: E501
            collection_formats['eventType'] = 'multi'  # noqa: E501
        if 'pitch_type' in params:
            query_params.append(('pitchType', params['pitch_type']))  # noqa: E501
            collection_formats['pitchType'] = 'multi'  # noqa: E501
        if 'hit_trajectory' in params:
            query_params.append(('hitTrajectory', params['hit_trajectory']))  # noqa: E501
            collection_formats['hitTrajectory'] = 'multi'  # noqa: E501
        if 'bat_side' in params:
            query_params.append(('batSide', params['bat_side']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
            collection_formats['gameType'] = 'multi'  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/{personId}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats_metrics(self, person_id, stats, **kwargs):  # noqa: E501
        """View a player's stat metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_metrics(person_id, stats, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int league_id: Unique League Identifier
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param int limit: Number of results to return
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats_metrics_with_http_info(person_id, stats, **kwargs)  # noqa: E501
        else:
            (data) = self.stats_metrics_with_http_info(person_id, stats, **kwargs)  # noqa: E501
            return data

    def stats_metrics_with_http_info(self, person_id, stats, **kwargs):  # noqa: E501
        """View a player's stat metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_metrics_with_http_info(person_id, stats, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Unique Player Identifier. Format: 434538, 429665, etc (required)
        :param list[StatType] stats: Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes (required)
        :param list[StatGroup] group: Category of statistic to return. Available types in /api/v1/statGroups
        :param str season: Season of play
        :param list[str] seasons: Comma delimited list of Seasons of play
        :param int sport_id: Top level organization of a sport
        :param int opposing_team_id: A unique identifier for the opposing team. Must be used with Team ID
        :param int opposing_player_id: A unique identifier for the opposing team
        :param list[MetricType] metrics: Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics
        :param int league_id: Unique League Identifier
        :param LeagueListsEnum league_list_id: Unique League List Identifier
        :param list[str] sit_codes: Situation code for a given stat split.
        :param bool combine_sits: If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false
        :param date start_date: Start date for range of data (must be used with end date). Format: MM/DD/YYYY
        :param date end_date: End date for range of data (must be used with start date). Format: MM/DD/YYYY
        :param int days_back: Returns results from the last 'X' days (Starting from yesterday).
        :param int games_back: Returns results from the last 'X' games played.
        :param int limit: Number of results to return
        :param list[EventType] event_type: Type of event
        :param list[str] pitch_type: Classification of pitch (fastball, curveball, etc...)
        :param list[HitTrajectory] hit_trajectory: Trajectory of hit (line drive, fly ball, etc...)
        :param str bat_side: Bat side of hitter
        :param list[GameTypeEnum] game_type: Type of Game. Available types in /api/v1/gameTypes
        :param list[GroupByEnum] group_by: Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP
        :param bool accent: Boolean value to specify wanting a person's name with accents or without
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: StatsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'stats', 'group', 'season', 'seasons', 'sport_id', 'opposing_team_id', 'opposing_player_id', 'metrics', 'league_id', 'league_list_id', 'sit_codes', 'combine_sits', 'start_date', 'end_date', 'days_back', 'games_back', 'limit', 'event_type', 'pitch_type', 'hit_trajectory', 'bat_side', 'game_type', 'group_by', 'accent', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `stats_metrics`")  # noqa: E501
        # verify the required parameter 'stats' is set
        if ('stats' not in params or
                params['stats'] is None):
            raise ValueError("Missing the required parameter `stats` when calling `stats_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['personId'] = params['person_id']  # noqa: E501

        query_params = []
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
            collection_formats['stats'] = 'multi'  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
            collection_formats['group'] = 'multi'  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'seasons' in params:
            query_params.append(('seasons', params['seasons']))  # noqa: E501
            collection_formats['seasons'] = 'multi'  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'opposing_team_id' in params:
            query_params.append(('opposingTeamId', params['opposing_team_id']))  # noqa: E501
        if 'opposing_player_id' in params:
            query_params.append(('opposingPlayerId', params['opposing_player_id']))  # noqa: E501
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'league_list_id' in params:
            query_params.append(('leagueListId', params['league_list_id']))  # noqa: E501
        if 'sit_codes' in params:
            query_params.append(('sitCodes', params['sit_codes']))  # noqa: E501
            collection_formats['sitCodes'] = 'multi'  # noqa: E501
        if 'combine_sits' in params:
            query_params.append(('combineSits', params['combine_sits']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'days_back' in params:
            query_params.append(('daysBack', params['days_back']))  # noqa: E501
        if 'games_back' in params:
            query_params.append(('gamesBack', params['games_back']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('eventType', params['event_type']))  # noqa: E501
            collection_formats['eventType'] = 'multi'  # noqa: E501
        if 'pitch_type' in params:
            query_params.append(('pitchType', params['pitch_type']))  # noqa: E501
            collection_formats['pitchType'] = 'multi'  # noqa: E501
        if 'hit_trajectory' in params:
            query_params.append(('hitTrajectory', params['hit_trajectory']))  # noqa: E501
            collection_formats['hitTrajectory'] = 'multi'  # noqa: E501
        if 'bat_side' in params:
            query_params.append(('batSide', params['bat_side']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
            collection_formats['gameType'] = 'multi'  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'multi'  # noqa: E501
        if 'accent' in params:
            query_params.append(('accent', params['accent']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/people/{personId}/stats/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
