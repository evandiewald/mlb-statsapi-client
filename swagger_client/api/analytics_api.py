# coding: utf-8

"""
    Stats API Documentation

    Official API for Major League Baseball.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AnalyticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def context_metrics(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get context metrics for a specific gamePk.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.context_metrics_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.context_metrics_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
            return data

    def context_metrics_with_http_info(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get context metrics for a specific gamePk.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics_with_http_info(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'guid', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method context_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `context_metrics`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `context_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{guid}/contextMetrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalculatedMetricRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def context_metrics_with_averages(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get a json file containing raw coordinate data and refined calculated metrics.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics_with_averages(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.context_metrics_with_averages_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.context_metrics_with_averages_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
            return data

    def context_metrics_with_averages_with_http_info(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get a json file containing raw coordinate data and refined calculated metrics.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics_with_averages_with_http_info(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'guid', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method context_metrics_with_averages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `context_metrics_with_averages`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `context_metrics_with_averages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{guid}/contextMetricsAverages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalculatedMetricRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def context_metrics_with_averages_post(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get a json file containing raw coordinate data and refined calculated metrics.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics_with_averages_post(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.context_metrics_with_averages_post_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.context_metrics_with_averages_post_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
            return data

    def context_metrics_with_averages_post_with_http_info(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get a json file containing raw coordinate data and refined calculated metrics.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.context_metrics_with_averages_post_with_http_info(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[CalculatedMetricRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'guid', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method context_metrics_with_averages_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `context_metrics_with_averages_post`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `context_metrics_with_averages_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{guid}/contextMetricsAverages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalculatedMetricRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_guids(self, game_pk, **kwargs):  # noqa: E501
        """Get the GUIDs (plays) for a specific game.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool has_updates: True if updated by an auditor
        :param datetime since: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime updated_since: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :return: list[AnalyticsPlayMetadataRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_guids_with_http_info(game_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.game_guids_with_http_info(game_pk, **kwargs)  # noqa: E501
            return data

    def game_guids_with_http_info(self, game_pk, **kwargs):  # noqa: E501
        """Get the GUIDs (plays) for a specific game.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids_with_http_info(game_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool has_updates: True if updated by an auditor
        :param datetime since: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime updated_since: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :return: list[AnalyticsPlayMetadataRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'fields', 'game_mode_id', 'is_pitch', 'is_hit', 'is_pickoff', 'has_updates', 'since', 'updated_since', 'last_play_time', 'last_updated_time', 'last_metrics_updated_time', 'last_audit_updated_time', 'last_video_updated_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_guids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `game_guids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'game_mode_id' in params:
            query_params.append(('gameModeId', params['game_mode_id']))  # noqa: E501
        if 'is_pitch' in params:
            query_params.append(('isPitch', params['is_pitch']))  # noqa: E501
        if 'is_hit' in params:
            query_params.append(('isHit', params['is_hit']))  # noqa: E501
        if 'is_pickoff' in params:
            query_params.append(('isPickoff', params['is_pickoff']))  # noqa: E501
        if 'has_updates' in params:
            query_params.append(('hasUpdates', params['has_updates']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('updatedSince', params['updated_since']))  # noqa: E501
        if 'last_play_time' in params:
            query_params.append(('lastPlayTime', params['last_play_time']))  # noqa: E501
        if 'last_updated_time' in params:
            query_params.append(('lastUpdatedTime', params['last_updated_time']))  # noqa: E501
        if 'last_metrics_updated_time' in params:
            query_params.append(('lastMetricsUpdatedTime', params['last_metrics_updated_time']))  # noqa: E501
        if 'last_audit_updated_time' in params:
            query_params.append(('lastAuditUpdatedTime', params['last_audit_updated_time']))  # noqa: E501
        if 'last_video_updated_time' in params:
            query_params.append(('lastVideoUpdatedTime', params['last_video_updated_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/guids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AnalyticsPlayMetadataRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_guids_from_postgres_range(self, **kwargs):  # noqa: E501
        """Get the GUIDs (plays) for a specific game.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids_from_postgres_range(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool is_non_statcast: If non statcast games need to be included
        :param str gameday_type: Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)
        :param bool has_updates: True if updated by an auditor
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :param date game_date: Date of Game. Format: YYYY-MM-DD
        :param int sport_id: Top level organization of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param TrackingSystemOwner tracking_system_owner: Owner of the tracking system
        :param str season: Season of play
        :param str sort_by: Sort the set of data by the specified field
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :return: AnalyticsPlayMetadataWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_guids_from_postgres_range_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.game_guids_from_postgres_range_with_http_info(**kwargs)  # noqa: E501
            return data

    def game_guids_from_postgres_range_with_http_info(self, **kwargs):  # noqa: E501
        """Get the GUIDs (plays) for a specific game.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids_from_postgres_range_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool is_non_statcast: If non statcast games need to be included
        :param str gameday_type: Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)
        :param bool has_updates: True if updated by an auditor
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :param date game_date: Date of Game. Format: YYYY-MM-DD
        :param int sport_id: Top level organization of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param TrackingSystemOwner tracking_system_owner: Owner of the tracking system
        :param str season: Season of play
        :param str sort_by: Sort the set of data by the specified field
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :return: AnalyticsPlayMetadataWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'game_mode_id', 'is_pitch', 'is_hit', 'is_pickoff', 'is_non_statcast', 'gameday_type', 'has_updates', 'last_play_time', 'last_updated_time', 'last_metrics_updated_time', 'last_audit_updated_time', 'last_video_updated_time', 'game_date', 'sport_id', 'game_type', 'tracking_system_owner', 'season', 'sort_by', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_guids_from_postgres_range" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'game_mode_id' in params:
            query_params.append(('gameModeId', params['game_mode_id']))  # noqa: E501
        if 'is_pitch' in params:
            query_params.append(('isPitch', params['is_pitch']))  # noqa: E501
        if 'is_hit' in params:
            query_params.append(('isHit', params['is_hit']))  # noqa: E501
        if 'is_pickoff' in params:
            query_params.append(('isPickoff', params['is_pickoff']))  # noqa: E501
        if 'is_non_statcast' in params:
            query_params.append(('isNonStatcast', params['is_non_statcast']))  # noqa: E501
        if 'gameday_type' in params:
            query_params.append(('gamedayType', params['gameday_type']))  # noqa: E501
        if 'has_updates' in params:
            query_params.append(('hasUpdates', params['has_updates']))  # noqa: E501
        if 'last_play_time' in params:
            query_params.append(('lastPlayTime', params['last_play_time']))  # noqa: E501
        if 'last_updated_time' in params:
            query_params.append(('lastUpdatedTime', params['last_updated_time']))  # noqa: E501
        if 'last_metrics_updated_time' in params:
            query_params.append(('lastMetricsUpdatedTime', params['last_metrics_updated_time']))  # noqa: E501
        if 'last_audit_updated_time' in params:
            query_params.append(('lastAuditUpdatedTime', params['last_audit_updated_time']))  # noqa: E501
        if 'last_video_updated_time' in params:
            query_params.append(('lastVideoUpdatedTime', params['last_video_updated_time']))  # noqa: E501
        if 'game_date' in params:
            query_params.append(('gameDate', params['game_date']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'tracking_system_owner' in params:
            query_params.append(('trackingSystemOwner', params['tracking_system_owner']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/guids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsPlayMetadataWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_guids_from_postgres_range_by_game(self, **kwargs):  # noqa: E501
        """Get all games by updated date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids_from_postgres_range_by_game(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool is_non_statcast: If non statcast games need to be included
        :param str gameday_type: Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)
        :param bool has_updates: True if updated by an auditor
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param date game_date: Date of Game. Format: YYYY-MM-DD
        :param int sport_id: Top level organization of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param TrackingSystemOwner tracking_system_owner: Owner of the tracking system
        :param str sort_by: Sort the set of data by the specified field
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :return: AnalyticsGameMetadataWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_guids_from_postgres_range_by_game_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.game_guids_from_postgres_range_by_game_with_http_info(**kwargs)  # noqa: E501
            return data

    def game_guids_from_postgres_range_by_game_with_http_info(self, **kwargs):  # noqa: E501
        """Get all games by updated date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_guids_from_postgres_range_by_game_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :param int game_mode_id: Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
        :param bool is_pitch: If there was a pitch
        :param bool is_hit: If there was a hit ball tracked
        :param bool is_pickoff: If there was a pickoff
        :param bool is_non_statcast: If non statcast games need to be included
        :param str gameday_type: Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)
        :param bool has_updates: True if updated by an auditor
        :param datetime last_play_time: Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_video_updated_time: The last time SportyBot video was updated
        :param datetime last_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_metrics_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param datetime last_audit_updated_time: Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ
        :param date game_date: Date of Game. Format: YYYY-MM-DD
        :param int sport_id: Top level organization of a sport
        :param GameTypeEnum game_type: Type of Game. Available types in /api/v1/gameTypes
        :param str season: Season of play
        :param TrackingSystemOwner tracking_system_owner: Owner of the tracking system
        :param str sort_by: Sort the set of data by the specified field
        :param int limit: Number of results to return
        :param int offset: The pointer to start for a return set; used for pagination
        :param list[ScheduleEventTypes] schedule_event_types: Comma delimited list of type of event types
        :return: AnalyticsGameMetadataWrapperRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'game_mode_id', 'is_pitch', 'is_hit', 'is_pickoff', 'is_non_statcast', 'gameday_type', 'has_updates', 'last_play_time', 'last_video_updated_time', 'last_updated_time', 'last_metrics_updated_time', 'last_audit_updated_time', 'game_date', 'sport_id', 'game_type', 'season', 'tracking_system_owner', 'sort_by', 'limit', 'offset', 'schedule_event_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_guids_from_postgres_range_by_game" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'game_mode_id' in params:
            query_params.append(('gameModeId', params['game_mode_id']))  # noqa: E501
        if 'is_pitch' in params:
            query_params.append(('isPitch', params['is_pitch']))  # noqa: E501
        if 'is_hit' in params:
            query_params.append(('isHit', params['is_hit']))  # noqa: E501
        if 'is_pickoff' in params:
            query_params.append(('isPickoff', params['is_pickoff']))  # noqa: E501
        if 'is_non_statcast' in params:
            query_params.append(('isNonStatcast', params['is_non_statcast']))  # noqa: E501
        if 'gameday_type' in params:
            query_params.append(('gamedayType', params['gameday_type']))  # noqa: E501
        if 'has_updates' in params:
            query_params.append(('hasUpdates', params['has_updates']))  # noqa: E501
        if 'last_play_time' in params:
            query_params.append(('lastPlayTime', params['last_play_time']))  # noqa: E501
        if 'last_video_updated_time' in params:
            query_params.append(('lastVideoUpdatedTime', params['last_video_updated_time']))  # noqa: E501
        if 'last_updated_time' in params:
            query_params.append(('lastUpdatedTime', params['last_updated_time']))  # noqa: E501
        if 'last_metrics_updated_time' in params:
            query_params.append(('lastMetricsUpdatedTime', params['last_metrics_updated_time']))  # noqa: E501
        if 'last_audit_updated_time' in params:
            query_params.append(('lastAuditUpdatedTime', params['last_audit_updated_time']))  # noqa: E501
        if 'game_date' in params:
            query_params.append(('gameDate', params['game_date']))  # noqa: E501
        if 'sport_id' in params:
            query_params.append(('sportId', params['sport_id']))  # noqa: E501
        if 'game_type' in params:
            query_params.append(('gameType', params['game_type']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'tracking_system_owner' in params:
            query_params.append(('trackingSystemOwner', params['tracking_system_owner']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'schedule_event_types' in params:
            query_params.append(('scheduleEventTypes', params['schedule_event_types']))  # noqa: E501
            collection_formats['scheduleEventTypes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/game', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsGameMetadataWrapperRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_last_pitch(self, game_pks, **kwargs):  # noqa: E501
        """Get the last pitch for a list of games  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_last_pitch(game_pks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] game_pks: Unique Primary Key Representing a Game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[AnalyticsPlayMetadataRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_last_pitch_with_http_info(game_pks, **kwargs)  # noqa: E501
        else:
            (data) = self.game_last_pitch_with_http_info(game_pks, **kwargs)  # noqa: E501
            return data

    def game_last_pitch_with_http_info(self, game_pks, **kwargs):  # noqa: E501
        """Get the last pitch for a list of games  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_last_pitch_with_http_info(game_pks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] game_pks: Unique Primary Key Representing a Game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: list[AnalyticsPlayMetadataRestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pks', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_last_pitch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pks' is set
        if ('game_pks' not in params or
                params['game_pks'] is None):
            raise ValueError("Missing the required parameter `game_pks` when calling `game_last_pitch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game_pks' in params:
            query_params.append(('gamePks', params['game_pks']))  # noqa: E501
            collection_formats['gamePks'] = 'multi'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/lastPitch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AnalyticsPlayMetadataRestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def home_run_ballparks(self, game_pk, guid, is_home_run_parks, **kwargs):  # noqa: E501
        """Get if the play is a home run is each park for a specific play.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.home_run_ballparks(game_pk, guid, is_home_run_parks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param bool is_home_run_parks: (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: VenuesRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.home_run_ballparks_with_http_info(game_pk, guid, is_home_run_parks, **kwargs)  # noqa: E501
        else:
            (data) = self.home_run_ballparks_with_http_info(game_pk, guid, is_home_run_parks, **kwargs)  # noqa: E501
            return data

    def home_run_ballparks_with_http_info(self, game_pk, guid, is_home_run_parks, **kwargs):  # noqa: E501
        """Get if the play is a home run is each park for a specific play.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.home_run_ballparks_with_http_info(game_pk, guid, is_home_run_parks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param bool is_home_run_parks: (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: VenuesRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'guid', 'is_home_run_parks', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method home_run_ballparks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `home_run_ballparks`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `home_run_ballparks`")  # noqa: E501
        # verify the required parameter 'is_home_run_parks' is set
        if ('is_home_run_parks' not in params or
                params['is_home_run_parks'] is None):
            raise ValueError("Missing the required parameter `is_home_run_parks` when calling `home_run_ballparks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []
        if 'is_home_run_parks' in params:
            query_params.append(('isHomeRunParks', params['is_home_run_parks']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{guid}/homeRunBallparks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VenuesRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parsed_json_formatted_analytics(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get Statcast data for a specific play.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_json_formatted_analytics(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: AnalyticsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parsed_json_formatted_analytics_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.parsed_json_formatted_analytics_with_http_info(game_pk, guid, **kwargs)  # noqa: E501
            return data

    def parsed_json_formatted_analytics_with_http_info(self, game_pk, guid, **kwargs):  # noqa: E501
        """Get Statcast data for a specific play.  # noqa: E501

        Returns a json file containing raw coordinate data and refined calculated metrics.<br/><br/>This responses can be very large, so it is strongly recommended that you pass \"Accept-Encoding: gzip\" as a header to have the responses compressed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_json_formatted_analytics_with_http_info(game_pk, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int game_pk: Unique Primary Key Representing a Game (required)
        :param str guid: Unique identifier for a play within a game (required)
        :param list[str] fields: Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
        :return: AnalyticsRestObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_pk', 'guid', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parsed_json_formatted_analytics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_pk' is set
        if ('game_pk' not in params or
                params['game_pk'] is None):
            raise ValueError("Missing the required parameter `game_pk` when calling `parsed_json_formatted_analytics`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `parsed_json_formatted_analytics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_pk' in params:
            path_params['gamePk'] = params['game_pk']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/game/{gamePk}/{guid}/analytics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsRestObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
